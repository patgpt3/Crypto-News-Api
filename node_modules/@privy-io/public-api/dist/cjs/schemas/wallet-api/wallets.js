"use strict";var e=require("zod"),t=require("@privy-io/api-base"),i=require("../api.js"),r=require("../core.js"),a=require("../transaction.js"),n=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const o=e.z.enum(["secp256k1","ed25519"]),s=e.z.string().regex(/^[mM]'?(\/\d+'?)*$/),l=e.z.literal("ECDSA"),p=e.z.literal("EdDSA"),c=e.z.union([l,p]),z=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let d=e.z.object({address:r.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional(),wallet_id:e.z.string().optional()}),u=e.z.object({address:r.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional(),wallet_id:e.z.string().optional()});const g=e.z.enum(["root","manager","delegated-actions"]).nullable(),h=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(d).strict(),m=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:z,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(d).strict(),_=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(d).strict(),b=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),x=b.transform((e=>e));let y=e.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const j=e.z.union([b,y],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),A=e.z.object({from:r.WalletAddress.optional(),to:r.WalletAddress.optional(),chain_id:j.optional(),nonce:j.optional(),data:b.optional(),value:j.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:j.optional(),gas_price:j.optional(),max_fee_per_gas:j.optional(),max_priority_fee_per_gas:j.optional()}).strict(),v=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:A}).strict()}).merge(u).strict(),I=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:z,params:e.z.object({transaction:A}).strict()}).merge(u).strict(),R=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}).strict(),W=e.z.object({method:e.z.literal("personal_sign"),params:R}).merge(u).strict(),S=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:x}).strict()}).merge(u).strict(),T=e.z.object({method:e.z.literal("eth_sign7702Authorization"),params:e.z.object({contract:r.WalletAddress,chain_id:j,nonce:j.optional()}).strict()}).merge(u).strict(),w=e.z.object({params:e.z.object({hash:x}).strict()}).strict(),E=e.z.record(e.z.string(),e.z.any()),f=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),D=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:E,types:f,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()}).strict()}).strict()}).merge(u).strict(),k=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:n.PrivateKeyExportInput}).strict(),P=e.z.discriminatedUnion("method",[v,I,W,D,S,T]),C=e.z.discriminatedUnion("method",[h,m,_]),K=e.z.union([P,C,k]),q=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),B=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:z}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),U=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),G=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),O=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:z,transaction_request:A.optional()}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),M=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),N=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:b,encoding:e.z.literal("hex")})});let F=e.z.object({contract:r.WalletAddress,chain_id:j,nonce:j,r:b,s:b,y_parity:e.z.number()});const H=e.z.object({method:e.z.literal("eth_sign7702Authorization"),data:e.z.object({authorization:F}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),L=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),V=e.z.object({method:e.z.literal("exportPrivateKey"),data:n.PrivateKeyExportInput}),Q=e.z.object({data:e.z.object({signature:b,encoding:e.z.literal("hex")}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}).strict(),$=e.z.discriminatedUnion("method",[q,B,U,G,O,M,N,H,L,V]),Z=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:g.optional()}),J=e.z.literal("cosmos"),X=e.z.literal("stellar"),Y=e.z.literal("sui"),ee=e.z.literal("tron"),te=e.z.literal("bitcoin-segwit"),ie=e.z.union([J,X,Y,ee,te]),re=e.z.literal("curve_signing"),ae=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]),ne=e.z.union([ie,ae]),oe=e.z.enum(["hd","private-key"]),se=e.z.object({id:e.z.string(),address:e.z.string(),public_key:e.z.string().optional(),created_at:e.z.number(),exported_at:e.z.number().nullable(),imported_at:e.z.number().nullable(),chain_type:ne,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2(),override_policy_ids:e.z.array(e.z.string()).optional()})),owner_id:e.z.string().cuid2().nullable()}),le=e.z.string().cuid2(),pe=e.z.string(),ce=e.z.union([e.z.object({user_id:e.z.string().startsWith("did:privy:",{message:"user_id must start with did:privy:"})}).strict(),e.z.object({public_key:pe}).strict(),e.z.null()]),ze={owner:ce.optional(),owner_id:le.nullable().optional()},de=e.z.array(e.z.string().cuid2()).max(1,"Only one policy ID can be set").optional(),ue=e.z.array(e.z.object({signer_id:le,override_policy_ids:de}).strict()),ge=e.z.object({chain_type:ne,policy_ids:de,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:ue.optional(),...ze}).strict(),he=ge.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,i=void 0!==e.additional_signers;return!t||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),me=e.z.object({id:e.z.string(),chain_type:ne,address:e.z.string(),authorization_threshold:e.z.number().optional()}),_e=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),be=e.z.enum(["usdc","eth","pol"]),xe=e.z.enum(["sol"]),ye=e.z.enum([...be.options,...xe.options]),je=e.z.enum(["ethereum","arbitrum","base","linea","optimism","polygon","solana","zksync_era"]),Ae=e.z.enum(["usd"]),ve=e.z.object({asset:e.z.union([ye,e.z.array(ye).max(10)]),chain:e.z.union([je,e.z.array(je).max(10)]),include_currency:Ae.optional()}),Ie=e.z.object({chain:je,asset:ye,raw_value:e.z.string(),raw_value_decimals:e.z.number(),display_values:e.z.record(e.z.union([ye,Ae]),e.z.string())}),Re=e.z.object({balances:e.z.array(Ie.refine((e=>e.asset in e.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),We=e.z.object({id:e.z.string()}),Se=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:g,created_at:e.z.number()}),Te=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),we=i.Pagination.extend({chain_type:ne.optional(),user_id:e.z.string().optional()}).strict(),Ee=e.z.object({policy_ids:de,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:ue.optional(),...ze}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>void 0===e||""===e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&t.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),fe=i.Pagination.extend({chain:e.z.literal("base"),asset:e.z.union([ye,e.z.array(ye).max(2)])}).strict(),De=e.z.object({type:e.z.literal("transfer_sent"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(Ie),ke=e.z.object({type:e.z.literal("transfer_received"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(Ie),Pe=e.z.discriminatedUnion("type",[De,ke]),Ce=a.BaseTransactionResponse.extend({details:Pe.nullable()}),Ke=Ce.extend({privy_transaction_id:e.z.string(),wallet_id:e.z.string()}),qe=e.z.object({transactions:e.z.array(Ke),next_cursor:e.z.string().nullable()});exports.AdditionalSignerInput=ue,exports.Asset=ye,exports.AssetAmountDetails=Ie,exports.AuthorizationKeyDashboardResponse=Se,exports.AuthorizationKeyResponse=Te,exports.AuthorizationKeyRole=g,exports.BalanceFiatCurrency=Ae,exports.BaseWalletApiCreateInput=ge,exports.BitcoinSegwit=te,exports.CAIP2=z,exports.CURVE_SIGNING="curve_signing",exports.ChainNameInput=je,exports.ChainType=ne,exports.Cosmos=J,exports.CurveSigningChainTypes=ie,exports.CurveSigningLiteral=re,exports.CurveType=o,exports.ECDSA=l,exports.EdDSA=p,exports.EthereumAsset=be,exports.FirstClassChainTypes=ae,exports.HDPath=s,exports.Hash=x,exports.Hex=b,exports.KeyQuorumId=le,exports.OwnerInput=ce,exports.OwnerInputFields=ze,exports.P256PublicKey=pe,exports.PolicyInput=de,exports.PrivyTransactionResponseWithDetails=Ke,exports.Quantity=j,exports.SigningAlgorithm=c,exports.SolanaAsset=xe,exports.Stellar=X,exports.Sui=Y,exports.TransactionDetail=Pe,exports.TransactionResponseWithDetails=Ce,exports.TransferReceivedTransactionDetail=ke,exports.TransferSentTransactionDetail=De,exports.Tron=ee,exports.TypedDataDomainInputParams=E,exports.TypedDataTypesInputParams=f,exports.UnsignedEthereumTransaction=A,exports.WalletApiCreateInput=he,exports.WalletApiCreateResponse=me,exports.WalletApiEthereumPersonalSignRpcInput=W,exports.WalletApiEthereumPersonalSignRpcInputParams=R,exports.WalletApiEthereumPersonalSignRpcResponse=M,exports.WalletApiEthereumRpcInput=P,exports.WalletApiEthereumSecp256k1SignRpcInput=S,exports.WalletApiEthereumSecp256k1SignRpcResponse=N,exports.WalletApiEthereumSendTransactionRpcInput=I,exports.WalletApiEthereumSendTransactionRpcResponse=O,exports.WalletApiEthereumSign7702AuthorizationRpcInput=T,exports.WalletApiEthereumSign7702AuthorizationRpcResponse=H,exports.WalletApiEthereumSignTransactionRpcInput=v,exports.WalletApiEthereumSignTransactionRpcResponse=G,exports.WalletApiEthereumSignTypedDataRpcInput=D,exports.WalletApiEthereumSignTypedDataRpcResponse=L,exports.WalletApiExportPrivateKeyRpcInput=k,exports.WalletApiExportPrivateKeyRpcResponse=V,exports.WalletApiRawSignInput=w,exports.WalletApiRawSignResponse=Q,exports.WalletApiRegisterAuthorizationKeyInput=Z,exports.WalletApiRevokeAuthorizationKeyInput=We,exports.WalletApiRpcInput=K,exports.WalletApiRpcResponse=$,exports.WalletApiSolanaRpcInput=C,exports.WalletApiSolanaSignAndSendTransactionRpcInput=m,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=B,exports.WalletApiSolanaSignMessageRpcInput=_,exports.WalletApiSolanaSignMessageRpcResponse=U,exports.WalletApiSolanaSignTransactionRpcInput=h,exports.WalletApiSolanaSignTransactionRpcResponse=q,exports.WalletEntropyType=oe,exports.WalletGetBalanceInput=ve,exports.WalletGetBalanceResponse=Re,exports.WalletGetTransactionsInput=fe,exports.WalletGetTransactionsResponse=qe,exports.WalletIdFromPath=_e,exports.WalletResponse=se,exports.WalletUpdateInput=Ee,exports.WalletsSearchInput=we;
