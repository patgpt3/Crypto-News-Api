"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VrfLiteAccountData = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const web3_js_1 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class VrfLiteAccountData {
    /** The bump used to derive the SbState account. */
    stateBump;
    /** The bump used to derive the permission account. */
    permissionBump;
    /** The VrfPool the account belongs to. */
    vrfPool;
    /** The current status of the VRF account. */
    status;
    /** The VRF round result. Will be zeroized if still awaiting fulfillment. */
    result;
    /** Incremental counter for tracking VRF rounds. */
    counter;
    /** The alpha bytes used to calculate the VRF proof. */
    alpha;
    /** The number of bytes in the alpha buffer. */
    alphaLen;
    /** The Slot when the VRF round was opened. */
    requestSlot;
    /** The unix timestamp when the VRF round was opened. */
    requestTimestamp;
    /** On-chain account delegated for making account changes. */
    authority;
    /** The OracleQueueAccountData that is assigned to fulfill VRF update request. */
    queue;
    /** The token account used to hold funds for VRF update request. */
    escrow;
    /** The callback that is invoked when an update request is successfully verified. */
    callback;
    /** The incremental VRF proof calculation. */
    builder;
    expiration;
    ebuf;
    static discriminator = Buffer.from([
        98, 127, 126, 124, 166, 81, 97, 100,
    ]);
    static layout = borsh.struct([
        borsh.u8("stateBump"),
        borsh.u8("permissionBump"),
        borsh.publicKey("vrfPool"),
        types.VrfStatus.layout("status"),
        borsh.array(borsh.u8(), 32, "result"),
        borsh.u128("counter"),
        borsh.array(borsh.u8(), 256, "alpha"),
        borsh.u32("alphaLen"),
        borsh.u64("requestSlot"),
        borsh.i64("requestTimestamp"),
        borsh.publicKey("authority"),
        borsh.publicKey("queue"),
        borsh.publicKey("escrow"),
        types.CallbackZC.layout("callback"),
        types.VrfBuilder.layout("builder"),
        borsh.i64("expiration"),
        borsh.array(borsh.u8(), 1024, "ebuf"),
    ]);
    constructor(fields) {
        this.stateBump = fields.stateBump;
        this.permissionBump = fields.permissionBump;
        this.vrfPool = fields.vrfPool;
        this.status = fields.status;
        this.result = fields.result;
        this.counter = fields.counter;
        this.alpha = fields.alpha;
        this.alphaLen = fields.alphaLen;
        this.requestSlot = fields.requestSlot;
        this.requestTimestamp = fields.requestTimestamp;
        this.authority = fields.authority;
        this.queue = fields.queue;
        this.escrow = fields.escrow;
        this.callback = new types.CallbackZC({ ...fields.callback });
        this.builder = new types.VrfBuilder({ ...fields.builder });
        this.expiration = fields.expiration;
        this.ebuf = fields.ebuf;
    }
    static async fetch(program, address, programId = program.oracleProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.oracleProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(VrfLiteAccountData.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = VrfLiteAccountData.layout.decode(data.slice(8));
        return new VrfLiteAccountData({
            stateBump: dec.stateBump,
            permissionBump: dec.permissionBump,
            vrfPool: dec.vrfPool,
            status: types.VrfStatus.fromDecoded(dec.status),
            result: dec.result,
            counter: dec.counter,
            alpha: dec.alpha,
            alphaLen: dec.alphaLen,
            requestSlot: dec.requestSlot,
            requestTimestamp: dec.requestTimestamp,
            authority: dec.authority,
            queue: dec.queue,
            escrow: dec.escrow,
            callback: types.CallbackZC.fromDecoded(dec.callback),
            builder: types.VrfBuilder.fromDecoded(dec.builder),
            expiration: dec.expiration,
            ebuf: dec.ebuf,
        });
    }
    toJSON() {
        return {
            stateBump: this.stateBump,
            permissionBump: this.permissionBump,
            vrfPool: this.vrfPool.toString(),
            status: this.status.toJSON(),
            result: this.result,
            counter: this.counter.toString(),
            alpha: this.alpha,
            alphaLen: this.alphaLen,
            requestSlot: this.requestSlot.toString(),
            requestTimestamp: this.requestTimestamp.toString(),
            authority: this.authority.toString(),
            queue: this.queue.toString(),
            escrow: this.escrow.toString(),
            callback: this.callback.toJSON(),
            builder: this.builder.toJSON(),
            expiration: this.expiration.toString(),
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new VrfLiteAccountData({
            stateBump: obj.stateBump,
            permissionBump: obj.permissionBump,
            vrfPool: new web3_js_1.PublicKey(obj.vrfPool),
            status: types.VrfStatus.fromJSON(obj.status),
            result: obj.result,
            counter: new common_1.BN(obj.counter),
            alpha: obj.alpha,
            alphaLen: obj.alphaLen,
            requestSlot: new common_1.BN(obj.requestSlot),
            requestTimestamp: new common_1.BN(obj.requestTimestamp),
            authority: new web3_js_1.PublicKey(obj.authority),
            queue: new web3_js_1.PublicKey(obj.queue),
            escrow: new web3_js_1.PublicKey(obj.escrow),
            callback: types.CallbackZC.fromJSON(obj.callback),
            builder: types.VrfBuilder.fromJSON(obj.builder),
            expiration: new common_1.BN(obj.expiration),
            ebuf: obj.ebuf,
        });
    }
}
exports.VrfLiteAccountData = VrfLiteAccountData;
