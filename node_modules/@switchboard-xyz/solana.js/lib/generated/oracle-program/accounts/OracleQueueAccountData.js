import * as types from "../types/index.js"; // eslint-disable-line @typescript-eslint/no-unused-vars
import * as borsh from "@coral-xyz/borsh"; // eslint-disable-line @typescript-eslint/no-unused-vars
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common"; // eslint-disable-line @typescript-eslint/no-unused-vars
export class OracleQueueAccountData {
    /** Name of the queue to store on-chain. */
    name;
    /** Metadata of the queue to store on-chain. */
    metadata;
    /** The account delegated as the authority for making account changes or assigning permissions targeted at the queue. */
    authority;
    /** Interval when stale oracles will be removed if they fail to heartbeat. */
    oracleTimeout;
    /** Rewards to provide oracles and round openers on this queue. */
    reward;
    /** The minimum amount of stake oracles must present to remain on the queue. */
    minStake;
    /** Whether slashing is enabled on this queue. */
    slashingEnabled;
    /**
     * The tolerated variance amount oracle results can have from the accepted round result before being slashed.
     * slashBound = varianceToleranceMultiplier * stdDeviation Default: 2
     */
    varianceToleranceMultiplier;
    /**
     * Number of update rounds new feeds are on probation for.
     * If a feed returns 429s within probation period, auto disable permissions.
     */
    feedProbationPeriod;
    /** Current index of the oracle rotation. */
    currIdx;
    /** Current number of oracles on a queue. */
    size;
    /** Garbage collection index. */
    gcIdx;
    /** Consecutive failure limit for a feed before feed permission is revoked. */
    consecutiveFeedFailureLimit;
    /** Consecutive failure limit for an oracle before oracle permission is revoked. */
    consecutiveOracleFailureLimit;
    /** Enabling this setting means data feeds do not need explicit permission to join the queue and request new values from its oracles. */
    unpermissionedFeedsEnabled;
    /** Enabling this setting means VRF accounts do not need explicit permission to join the queue and request new values from its oracles. */
    unpermissionedVrfEnabled;
    /** TODO: Revenue percentage rewarded to job curators overall. */
    curatorRewardCut;
    /**
     * Prevent new leases from being funded n this queue.
     * Useful to turn down a queue for migrations, since authority is always immutable.
     */
    lockLeaseFunding;
    /** Token mint used for the oracle queue rewards and slashing. */
    mint;
    /** Whether oracles are permitted to fulfill buffer relayer update request. */
    enableBufferRelayers;
    enableTeeOnly;
    /** Reserved for future info. */
    ebuf;
    /** Maximum number of oracles a queue can support. */
    maxSize;
    /** The public key of the OracleQueueBuffer account holding a collection of Oracle pubkeys that haver successfully heartbeated before the queues `oracleTimeout`. */
    dataBuffer;
    static discriminator = Buffer.from([
        164, 207, 200, 51, 199, 113, 35, 109,
    ]);
    static layout = borsh.struct([
        borsh.array(borsh.u8(), 32, "name"),
        borsh.array(borsh.u8(), 64, "metadata"),
        borsh.publicKey("authority"),
        borsh.u32("oracleTimeout"),
        borsh.u64("reward"),
        borsh.u64("minStake"),
        borsh.bool("slashingEnabled"),
        types.SwitchboardDecimal.layout("varianceToleranceMultiplier"),
        borsh.u32("feedProbationPeriod"),
        borsh.u32("currIdx"),
        borsh.u32("size"),
        borsh.u32("gcIdx"),
        borsh.u64("consecutiveFeedFailureLimit"),
        borsh.u64("consecutiveOracleFailureLimit"),
        borsh.bool("unpermissionedFeedsEnabled"),
        borsh.bool("unpermissionedVrfEnabled"),
        types.SwitchboardDecimal.layout("curatorRewardCut"),
        borsh.bool("lockLeaseFunding"),
        borsh.publicKey("mint"),
        borsh.bool("enableBufferRelayers"),
        borsh.bool("enableTeeOnly"),
        borsh.array(borsh.u8(), 967, "ebuf"),
        borsh.u32("maxSize"),
        borsh.publicKey("dataBuffer"),
    ]);
    constructor(fields) {
        this.name = fields.name;
        this.metadata = fields.metadata;
        this.authority = fields.authority;
        this.oracleTimeout = fields.oracleTimeout;
        this.reward = fields.reward;
        this.minStake = fields.minStake;
        this.slashingEnabled = fields.slashingEnabled;
        this.varianceToleranceMultiplier = new types.SwitchboardDecimal({
            ...fields.varianceToleranceMultiplier,
        });
        this.feedProbationPeriod = fields.feedProbationPeriod;
        this.currIdx = fields.currIdx;
        this.size = fields.size;
        this.gcIdx = fields.gcIdx;
        this.consecutiveFeedFailureLimit = fields.consecutiveFeedFailureLimit;
        this.consecutiveOracleFailureLimit = fields.consecutiveOracleFailureLimit;
        this.unpermissionedFeedsEnabled = fields.unpermissionedFeedsEnabled;
        this.unpermissionedVrfEnabled = fields.unpermissionedVrfEnabled;
        this.curatorRewardCut = new types.SwitchboardDecimal({
            ...fields.curatorRewardCut,
        });
        this.lockLeaseFunding = fields.lockLeaseFunding;
        this.mint = fields.mint;
        this.enableBufferRelayers = fields.enableBufferRelayers;
        this.enableTeeOnly = fields.enableTeeOnly;
        this.ebuf = fields.ebuf;
        this.maxSize = fields.maxSize;
        this.dataBuffer = fields.dataBuffer;
    }
    static async fetch(program, address, programId = program.oracleProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.oracleProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(OracleQueueAccountData.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = OracleQueueAccountData.layout.decode(data.slice(8));
        return new OracleQueueAccountData({
            name: dec.name,
            metadata: dec.metadata,
            authority: dec.authority,
            oracleTimeout: dec.oracleTimeout,
            reward: dec.reward,
            minStake: dec.minStake,
            slashingEnabled: dec.slashingEnabled,
            varianceToleranceMultiplier: types.SwitchboardDecimal.fromDecoded(dec.varianceToleranceMultiplier),
            feedProbationPeriod: dec.feedProbationPeriod,
            currIdx: dec.currIdx,
            size: dec.size,
            gcIdx: dec.gcIdx,
            consecutiveFeedFailureLimit: dec.consecutiveFeedFailureLimit,
            consecutiveOracleFailureLimit: dec.consecutiveOracleFailureLimit,
            unpermissionedFeedsEnabled: dec.unpermissionedFeedsEnabled,
            unpermissionedVrfEnabled: dec.unpermissionedVrfEnabled,
            curatorRewardCut: types.SwitchboardDecimal.fromDecoded(dec.curatorRewardCut),
            lockLeaseFunding: dec.lockLeaseFunding,
            mint: dec.mint,
            enableBufferRelayers: dec.enableBufferRelayers,
            enableTeeOnly: dec.enableTeeOnly,
            ebuf: dec.ebuf,
            maxSize: dec.maxSize,
            dataBuffer: dec.dataBuffer,
        });
    }
    toJSON() {
        return {
            name: this.name,
            metadata: this.metadata,
            authority: this.authority.toString(),
            oracleTimeout: this.oracleTimeout,
            reward: this.reward.toString(),
            minStake: this.minStake.toString(),
            slashingEnabled: this.slashingEnabled,
            varianceToleranceMultiplier: this.varianceToleranceMultiplier.toJSON(),
            feedProbationPeriod: this.feedProbationPeriod,
            currIdx: this.currIdx,
            size: this.size,
            gcIdx: this.gcIdx,
            consecutiveFeedFailureLimit: this.consecutiveFeedFailureLimit.toString(),
            consecutiveOracleFailureLimit: this.consecutiveOracleFailureLimit.toString(),
            unpermissionedFeedsEnabled: this.unpermissionedFeedsEnabled,
            unpermissionedVrfEnabled: this.unpermissionedVrfEnabled,
            curatorRewardCut: this.curatorRewardCut.toJSON(),
            lockLeaseFunding: this.lockLeaseFunding,
            mint: this.mint.toString(),
            enableBufferRelayers: this.enableBufferRelayers,
            enableTeeOnly: this.enableTeeOnly,
            ebuf: this.ebuf,
            maxSize: this.maxSize,
            dataBuffer: this.dataBuffer.toString(),
        };
    }
    static fromJSON(obj) {
        return new OracleQueueAccountData({
            name: obj.name,
            metadata: obj.metadata,
            authority: new PublicKey(obj.authority),
            oracleTimeout: obj.oracleTimeout,
            reward: new BN(obj.reward),
            minStake: new BN(obj.minStake),
            slashingEnabled: obj.slashingEnabled,
            varianceToleranceMultiplier: types.SwitchboardDecimal.fromJSON(obj.varianceToleranceMultiplier),
            feedProbationPeriod: obj.feedProbationPeriod,
            currIdx: obj.currIdx,
            size: obj.size,
            gcIdx: obj.gcIdx,
            consecutiveFeedFailureLimit: new BN(obj.consecutiveFeedFailureLimit),
            consecutiveOracleFailureLimit: new BN(obj.consecutiveOracleFailureLimit),
            unpermissionedFeedsEnabled: obj.unpermissionedFeedsEnabled,
            unpermissionedVrfEnabled: obj.unpermissionedVrfEnabled,
            curatorRewardCut: types.SwitchboardDecimal.fromJSON(obj.curatorRewardCut),
            lockLeaseFunding: obj.lockLeaseFunding,
            mint: new PublicKey(obj.mint),
            enableBufferRelayers: obj.enableBufferRelayers,
            enableTeeOnly: obj.enableTeeOnly,
            ebuf: obj.ebuf,
            maxSize: obj.maxSize,
            dataBuffer: new PublicKey(obj.dataBuffer),
        });
    }
}
