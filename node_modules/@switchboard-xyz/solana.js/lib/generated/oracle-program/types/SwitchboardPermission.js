import * as borsh from "@coral-xyz/borsh";
export class PermitNone {
    static discriminator = 0;
    static kind = "NONE";
    discriminator = 0;
    kind = "PermitNone";
    toJSON() {
        return {
            kind: "PermitNone",
        };
    }
    toEncodable() {
        return {
            PermitOracleHeartbeat: {},
        };
    }
}
export class PermitOracleHeartbeat {
    static discriminator = 1;
    static kind = "PermitOracleHeartbeat";
    discriminator = 1;
    kind = "PermitOracleHeartbeat";
    toJSON() {
        return {
            kind: "PermitOracleHeartbeat",
        };
    }
    toEncodable() {
        return {
            PermitOracleHeartbeat: {},
        };
    }
}
export class PermitOracleQueueUsage {
    static discriminator = 2;
    static kind = "PermitOracleQueueUsage";
    discriminator = 2;
    kind = "PermitOracleQueueUsage";
    toJSON() {
        return {
            kind: "PermitOracleQueueUsage",
        };
    }
    toEncodable() {
        return {
            PermitOracleQueueUsage: {},
        };
    }
}
export class PermitVrfRequests {
    static discriminator = 4;
    static kind = "PermitVrfRequests";
    discriminator = 4;
    kind = "PermitVrfRequests";
    toJSON() {
        return {
            kind: "PermitVrfRequests",
        };
    }
    toEncodable() {
        return {
            PermitVrfRequests: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("PermitNone" in obj) {
        return new PermitNone();
    }
    if ("PermitOracleHeartbeat" in obj) {
        return new PermitOracleHeartbeat();
    }
    if ("PermitOracleQueueUsage" in obj) {
        return new PermitOracleQueueUsage();
    }
    if ("PermitVrfRequests" in obj) {
        return new PermitVrfRequests();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "PermitNone": {
            return new PermitNone();
        }
        case "PermitOracleHeartbeat": {
            return new PermitOracleHeartbeat();
        }
        case "PermitOracleQueueUsage": {
            return new PermitOracleQueueUsage();
        }
        case "PermitVrfRequests": {
            return new PermitVrfRequests();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        // borsh.struct([], 'PermitNone'),
        borsh.struct([], "PermitOracleHeartbeat"),
        borsh.struct([], "PermitOracleQueueUsage"),
        borsh.struct([], "PermitVrfRequests"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
