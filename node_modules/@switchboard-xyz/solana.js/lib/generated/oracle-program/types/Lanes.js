import * as borsh from "@coral-xyz/borsh";
export class D {
    static discriminator = 0;
    static kind = "D";
    discriminator = 0;
    kind = "D";
    toJSON() {
        return {
            kind: "D",
        };
    }
    toEncodable() {
        return {
            D: {},
        };
    }
}
export class C {
    static discriminator = 1;
    static kind = "C";
    discriminator = 1;
    kind = "C";
    toJSON() {
        return {
            kind: "C",
        };
    }
    toEncodable() {
        return {
            C: {},
        };
    }
}
export class AB {
    static discriminator = 2;
    static kind = "AB";
    discriminator = 2;
    kind = "AB";
    toJSON() {
        return {
            kind: "AB",
        };
    }
    toEncodable() {
        return {
            AB: {},
        };
    }
}
export class AC {
    static discriminator = 3;
    static kind = "AC";
    discriminator = 3;
    kind = "AC";
    toJSON() {
        return {
            kind: "AC",
        };
    }
    toEncodable() {
        return {
            AC: {},
        };
    }
}
export class AD {
    static discriminator = 4;
    static kind = "AD";
    discriminator = 4;
    kind = "AD";
    toJSON() {
        return {
            kind: "AD",
        };
    }
    toEncodable() {
        return {
            AD: {},
        };
    }
}
export class BCD {
    static discriminator = 5;
    static kind = "BCD";
    discriminator = 5;
    kind = "BCD";
    toJSON() {
        return {
            kind: "BCD",
        };
    }
    toEncodable() {
        return {
            BCD: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("D" in obj) {
        return new D();
    }
    if ("C" in obj) {
        return new C();
    }
    if ("AB" in obj) {
        return new AB();
    }
    if ("AC" in obj) {
        return new AC();
    }
    if ("AD" in obj) {
        return new AD();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "D": {
            return new D();
        }
        case "C": {
            return new C();
        }
        case "AB": {
            return new AB();
        }
        case "AC": {
            return new AC();
        }
        case "AD": {
            return new AD();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "D"),
        borsh.struct([], "C"),
        borsh.struct([], "AB"),
        borsh.struct([], "AC"),
        borsh.struct([], "AD"),
        borsh.struct([], "BCD"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
