import * as borsh from "@coral-xyz/borsh";
export class InvalidPublicKey {
    static discriminator = 0;
    static kind = "InvalidPublicKey";
    discriminator = 0;
    kind = "InvalidPublicKey";
    toJSON() {
        return {
            kind: "InvalidPublicKey",
        };
    }
    toEncodable() {
        return {
            InvalidPublicKey: {},
        };
    }
}
export class SerializationError {
    static discriminator = 1;
    static kind = "SerializationError";
    discriminator = 1;
    kind = "SerializationError";
    toJSON() {
        return {
            kind: "SerializationError",
        };
    }
    toEncodable() {
        return {
            SerializationError: {},
        };
    }
}
export class DeserializationError {
    static discriminator = 2;
    static kind = "DeserializationError";
    discriminator = 2;
    kind = "DeserializationError";
    toJSON() {
        return {
            kind: "DeserializationError",
        };
    }
    toEncodable() {
        return {
            DeserializationError: {},
        };
    }
}
export class InvalidDataError {
    static discriminator = 3;
    static kind = "InvalidDataError";
    discriminator = 3;
    kind = "InvalidDataError";
    toJSON() {
        return {
            kind: "InvalidDataError",
        };
    }
    toEncodable() {
        return {
            InvalidDataError: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("InvalidPublicKey" in obj) {
        return new InvalidPublicKey();
    }
    if ("SerializationError" in obj) {
        return new SerializationError();
    }
    if ("DeserializationError" in obj) {
        return new DeserializationError();
    }
    if ("InvalidDataError" in obj) {
        return new InvalidDataError();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "InvalidPublicKey": {
            return new InvalidPublicKey();
        }
        case "SerializationError": {
            return new SerializationError();
        }
        case "DeserializationError": {
            return new DeserializationError();
        }
        case "InvalidDataError": {
            return new InvalidDataError();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "InvalidPublicKey"),
        borsh.struct([], "SerializationError"),
        borsh.struct([], "DeserializationError"),
        borsh.struct([], "InvalidDataError"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
