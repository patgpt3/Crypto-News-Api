import * as types from "../types/index.js";
import { BN } from "@switchboard-xyz/common";
export interface AggregatorFunctionUpsertParamsFields {
    name: Array<number>;
    value: types.BorshDecimalFields;
}
export interface AggregatorFunctionUpsertParamsJSON {
    name: Array<number>;
    value: types.BorshDecimalJSON;
}
export declare class AggregatorFunctionUpsertParams {
    readonly name: Array<number>;
    readonly value: types.BorshDecimal;
    constructor(fields: AggregatorFunctionUpsertParamsFields);
    static layout(property?: string): any;
    static fromDecoded(obj: any): types.AggregatorFunctionUpsertParams;
    static toEncodable(fields: AggregatorFunctionUpsertParamsFields): {
        name: number[];
        value: {
            mantissa: BN;
            scale: number;
        };
    };
    toJSON(): AggregatorFunctionUpsertParamsJSON;
    static fromJSON(obj: AggregatorFunctionUpsertParamsJSON): AggregatorFunctionUpsertParams;
    toEncodable(): {
        name: number[];
        value: {
            mantissa: BN;
            scale: number;
        };
    };
}
//# sourceMappingURL=AggregatorFunctionUpsertParams.d.ts.map