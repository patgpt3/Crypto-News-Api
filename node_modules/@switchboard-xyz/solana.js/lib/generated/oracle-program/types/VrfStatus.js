import * as borsh from "@coral-xyz/borsh";
export class StatusNone {
    static discriminator = 0;
    static kind = "StatusNone";
    discriminator = 0;
    kind = "StatusNone";
    toJSON() {
        return {
            kind: "StatusNone",
        };
    }
    toEncodable() {
        return {
            StatusNone: {},
        };
    }
}
export class StatusRequesting {
    static discriminator = 1;
    static kind = "StatusRequesting";
    discriminator = 1;
    kind = "StatusRequesting";
    toJSON() {
        return {
            kind: "StatusRequesting",
        };
    }
    toEncodable() {
        return {
            StatusRequesting: {},
        };
    }
}
export class StatusVerifying {
    static discriminator = 2;
    static kind = "StatusVerifying";
    discriminator = 2;
    kind = "StatusVerifying";
    toJSON() {
        return {
            kind: "StatusVerifying",
        };
    }
    toEncodable() {
        return {
            StatusVerifying: {},
        };
    }
}
export class StatusVerified {
    static discriminator = 3;
    static kind = "StatusVerified";
    discriminator = 3;
    kind = "StatusVerified";
    toJSON() {
        return {
            kind: "StatusVerified",
        };
    }
    toEncodable() {
        return {
            StatusVerified: {},
        };
    }
}
export class StatusCallbackSuccess {
    static discriminator = 4;
    static kind = "StatusCallbackSuccess";
    discriminator = 4;
    kind = "StatusCallbackSuccess";
    toJSON() {
        return {
            kind: "StatusCallbackSuccess",
        };
    }
    toEncodable() {
        return {
            StatusCallbackSuccess: {},
        };
    }
}
export class StatusVerifyFailure {
    static discriminator = 5;
    static kind = "StatusVerifyFailure";
    discriminator = 5;
    kind = "StatusVerifyFailure";
    toJSON() {
        return {
            kind: "StatusVerifyFailure",
        };
    }
    toEncodable() {
        return {
            StatusVerifyFailure: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("StatusNone" in obj) {
        return new StatusNone();
    }
    if ("StatusRequesting" in obj) {
        return new StatusRequesting();
    }
    if ("StatusVerifying" in obj) {
        return new StatusVerifying();
    }
    if ("StatusVerified" in obj) {
        return new StatusVerified();
    }
    if ("StatusCallbackSuccess" in obj) {
        return new StatusCallbackSuccess();
    }
    if ("StatusVerifyFailure" in obj) {
        return new StatusVerifyFailure();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "StatusNone": {
            return new StatusNone();
        }
        case "StatusRequesting": {
            return new StatusRequesting();
        }
        case "StatusVerifying": {
            return new StatusVerifying();
        }
        case "StatusVerified": {
            return new StatusVerified();
        }
        case "StatusCallbackSuccess": {
            return new StatusCallbackSuccess();
        }
        case "StatusVerifyFailure": {
            return new StatusVerifyFailure();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "StatusNone"),
        borsh.struct([], "StatusRequesting"),
        borsh.struct([], "StatusVerifying"),
        borsh.struct([], "StatusVerified"),
        borsh.struct([], "StatusCallbackSuccess"),
        borsh.struct([], "StatusVerifyFailure"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
