import * as borsh from "@coral-xyz/borsh";
export class TypeSuccess {
    static discriminator = 0;
    static kind = "TypeSuccess";
    discriminator = 0;
    kind = "TypeSuccess";
    toJSON() {
        return {
            kind: "TypeSuccess",
        };
    }
    toEncodable() {
        return {
            TypeSuccess: {},
        };
    }
}
export class TypeError {
    static discriminator = 1;
    static kind = "TypeError";
    discriminator = 1;
    kind = "TypeError";
    toJSON() {
        return {
            kind: "TypeError",
        };
    }
    toEncodable() {
        return {
            TypeError: {},
        };
    }
}
export class TypeDisagreement {
    static discriminator = 2;
    static kind = "TypeDisagreement";
    discriminator = 2;
    kind = "TypeDisagreement";
    toJSON() {
        return {
            kind: "TypeDisagreement",
        };
    }
    toEncodable() {
        return {
            TypeDisagreement: {},
        };
    }
}
export class TypeNoResponse {
    static discriminator = 3;
    static kind = "TypeNoResponse";
    discriminator = 3;
    kind = "TypeNoResponse";
    toJSON() {
        return {
            kind: "TypeNoResponse",
        };
    }
    toEncodable() {
        return {
            TypeNoResponse: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("TypeSuccess" in obj) {
        return new TypeSuccess();
    }
    if ("TypeError" in obj) {
        return new TypeError();
    }
    if ("TypeDisagreement" in obj) {
        return new TypeDisagreement();
    }
    if ("TypeNoResponse" in obj) {
        return new TypeNoResponse();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "TypeSuccess": {
            return new TypeSuccess();
        }
        case "TypeError": {
            return new TypeError();
        }
        case "TypeDisagreement": {
            return new TypeDisagreement();
        }
        case "TypeNoResponse": {
            return new TypeNoResponse();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "TypeSuccess"),
        borsh.struct([], "TypeError"),
        borsh.struct([], "TypeDisagreement"),
        borsh.struct([], "TypeNoResponse"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
