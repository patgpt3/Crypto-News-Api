"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = exports.fromJSON = exports.fromDecoded = exports.BCD = exports.AD = exports.AC = exports.AB = exports.C = exports.D = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class D {
    static discriminator = 0;
    static kind = "D";
    discriminator = 0;
    kind = "D";
    toJSON() {
        return {
            kind: "D",
        };
    }
    toEncodable() {
        return {
            D: {},
        };
    }
}
exports.D = D;
class C {
    static discriminator = 1;
    static kind = "C";
    discriminator = 1;
    kind = "C";
    toJSON() {
        return {
            kind: "C",
        };
    }
    toEncodable() {
        return {
            C: {},
        };
    }
}
exports.C = C;
class AB {
    static discriminator = 2;
    static kind = "AB";
    discriminator = 2;
    kind = "AB";
    toJSON() {
        return {
            kind: "AB",
        };
    }
    toEncodable() {
        return {
            AB: {},
        };
    }
}
exports.AB = AB;
class AC {
    static discriminator = 3;
    static kind = "AC";
    discriminator = 3;
    kind = "AC";
    toJSON() {
        return {
            kind: "AC",
        };
    }
    toEncodable() {
        return {
            AC: {},
        };
    }
}
exports.AC = AC;
class AD {
    static discriminator = 4;
    static kind = "AD";
    discriminator = 4;
    kind = "AD";
    toJSON() {
        return {
            kind: "AD",
        };
    }
    toEncodable() {
        return {
            AD: {},
        };
    }
}
exports.AD = AD;
class BCD {
    static discriminator = 5;
    static kind = "BCD";
    discriminator = 5;
    kind = "BCD";
    toJSON() {
        return {
            kind: "BCD",
        };
    }
    toEncodable() {
        return {
            BCD: {},
        };
    }
}
exports.BCD = BCD;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("D" in obj) {
        return new D();
    }
    if ("C" in obj) {
        return new C();
    }
    if ("AB" in obj) {
        return new AB();
    }
    if ("AC" in obj) {
        return new AC();
    }
    if ("AD" in obj) {
        return new AD();
    }
    throw new Error("Invalid enum object");
}
exports.fromDecoded = fromDecoded;
function fromJSON(obj) {
    switch (obj.kind) {
        case "D": {
            return new D();
        }
        case "C": {
            return new C();
        }
        case "AB": {
            return new AB();
        }
        case "AC": {
            return new AC();
        }
        case "AD": {
            return new AD();
        }
    }
}
exports.fromJSON = fromJSON;
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "D"),
        borsh.struct([], "C"),
        borsh.struct([], "AB"),
        borsh.struct([], "AC"),
        borsh.struct([], "AD"),
        borsh.struct([], "BCD"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
exports.layout = layout;
