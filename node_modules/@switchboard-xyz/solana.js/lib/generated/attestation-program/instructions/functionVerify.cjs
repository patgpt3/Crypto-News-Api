"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionVerify = exports.layout = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const web3_js_1 = require("@solana/web3.js"); // eslint-disable-line @typescript-eslint/no-unused-vars
exports.layout = borsh.struct([
    types.FunctionVerifyParams.layout("params"),
]);
/**
 * Verifies a function was executed within an enclave and sets the enclave signer
 * on the function account for downstream instructions to verify.
 *
 * # Errors
 *
 * * `InsufficientQueue` - If the attestation queue has no active verifier oracles
 * * `InvalidQuote` - If the verifier oracle has an invalid or expired quote
 * * `IncorrectMrEnclave` - If the verifiers mr_enclave is not found in the attestation queue's enclave set
 * * `IllegalVerifier` - If the incorrect verifier has responded and the routine is less than 30 seconds stale.
 *
 * * `FunctionNotReady` - If the function status is not Active
 * * `InvalidMrEnclave` - If the measured mr_enclave value is not null
 * * `MrEnclavesEmpty` - If the function has 0 mr_enclaves whitelisted
 * * `IncorrectMrEnclave` - If the measured mr_enclave is not found in the functions enclave set
 *
 * * `IncorrectObservedTime` - If the oracles observed time has drifted by 20 seconds
 *
 */
function functionVerify(program, args, accounts, programId = program.attestationProgramId) {
    const keys = [
        { pubkey: accounts.function, isSigner: false, isWritable: true },
        {
            pubkey: accounts.functionEnclaveSigner,
            isSigner: true,
            isWritable: false,
        },
        { pubkey: accounts.verifier, isSigner: false, isWritable: false },
        { pubkey: accounts.verifierSigner, isSigner: true, isWritable: false },
        { pubkey: accounts.verifierPermission, isSigner: false, isWritable: false },
        { pubkey: accounts.escrowWallet, isSigner: false, isWritable: false },
        { pubkey: accounts.escrowTokenWallet, isSigner: false, isWritable: true },
        { pubkey: accounts.receiver, isSigner: false, isWritable: true },
        { pubkey: accounts.attestationQueue, isSigner: false, isWritable: false },
        { pubkey: accounts.tokenProgram, isSigner: false, isWritable: false },
    ];
    const identifier = Buffer.from([210, 108, 154, 138, 198, 14, 53, 191]);
    const buffer = Buffer.alloc(1000);
    const len = exports.layout.encode({
        params: types.FunctionVerifyParams.toEncodable(args.params),
    }, buffer);
    const data = Buffer.concat([identifier, buffer]).slice(0, 8 + len);
    const ix = new web3_js_1.TransactionInstruction({ keys, programId, data });
    return ix;
}
exports.functionVerify = functionVerify;
