export type CustomError = GenericError | InvalidQuote | QuoteExpired | InvalidNode | InsufficientQueue | QueueFull | InvalidEnclaveSigner | InvalidSigner | MrEnclavesEmpty | MrEnclaveAlreadyExists | MrEnclaveDoesntExist | MrEnclaveAtCapacity | PermissionDenied | InvalidConstraint | InvalidTimestamp | InvalidMrEnclave | InvalidReportData | InsufficientLoadAmount | IncorrectObservedTime | InvalidQuoteMode | InvalidVerifierIdx | InvalidSelfVerifyRequest | IncorrectMrEnclave | InvalidResponder | InvalidAddressLookupAddress | InvalidQueue | IllegalVerifier | InvalidEscrow | InvalidAuthority | IllegalExecuteAttempt | RequestExpired | InsufficientFunds | MissingFunctionEscrow | InvalidRequest | FunctionNotReady | UserRequestsDisabled | MissingFunctionAuthority | FunctionCloseNotReady | RequestAlreadyInitialized | AccountCloseNotPermitted | AccountCloseNotReady | FunctionRequestNotReady | InvalidParamsHash | RequestInvalidStatus | ContainerParamsTooLong | RoutineDisabled | FunctionRoutinesDisabled | ConfigParameterLocked | RequestBufferFull | RequestRoundNotActive | EmptyEscrow | MissingSbWalletAuthoritySigner | RequestRoundAlreadyClosed | MethodDeprecated | FunctionServicesDisabled | ServiceDisabled | ServiceWorkerFull | ServiceWorkerEnclaveFull | ServiceAlreadyAssignedToWorker;
export declare class GenericError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "GenericError";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQuote extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "InvalidQuote";
    readonly msg = "The provided enclave quote is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class QuoteExpired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "QuoteExpired";
    readonly msg = "The EnclaveAccount has expired and needs to be reverified";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidNode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "InvalidNode";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientQueue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "InsufficientQueue";
    readonly msg = "The provided queue is empty and has no verifier oracles heartbeating on-chain.";
    constructor(logs?: string[] | undefined);
}
export declare class QueueFull extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "QueueFull";
    readonly msg = "The provided queue is full and cannot support new verifiers";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidEnclaveSigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "InvalidEnclaveSigner";
    readonly msg = "The provided enclave_signer does not match the expected enclave_signer on the EnclaveAccount";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "InvalidSigner";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclavesEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "MrEnclavesEmpty";
    readonly msg = "This account has zero mr_enclaves defined";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveAlreadyExists extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "MrEnclaveAlreadyExists";
    readonly msg = "The MrEnclave value already exists in the array";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveDoesntExist extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "MrEnclaveDoesntExist";
    readonly msg = "The MrEnclave value was not found in the whitelist";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveAtCapacity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "MrEnclaveAtCapacity";
    readonly msg = "This account has a full mr_enclaves array. Remove some measurements to make room for new ones";
    constructor(logs?: string[] | undefined);
}
export declare class PermissionDenied extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "PermissionDenied";
    readonly msg = "The PermissionAccount is missing the required flags for this action. Check the queues config to see which permissions are required";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidConstraint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "InvalidConstraint";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTimestamp extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "InvalidTimestamp";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidMrEnclave extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "InvalidMrEnclave";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidReportData extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "InvalidReportData";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientLoadAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "InsufficientLoadAmount";
    constructor(logs?: string[] | undefined);
}
export declare class IncorrectObservedTime extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "IncorrectObservedTime";
    readonly msg = "The provided timestamp is not within the expected range. This may be indicative of an unhealthy enclave.";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQuoteMode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "InvalidQuoteMode";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidVerifierIdx extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "InvalidVerifierIdx";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSelfVerifyRequest extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "InvalidSelfVerifyRequest";
    constructor(logs?: string[] | undefined);
}
export declare class IncorrectMrEnclave extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "IncorrectMrEnclave";
    readonly msg = "The provided mr_enclave measurement did not match a value in its enclave settings. If you recently modified your function container, you may need to update the measurement in your FunctionAccount config.";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidResponder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "InvalidResponder";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAddressLookupAddress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "InvalidAddressLookupAddress";
    readonly msg = "The provided address_lookup_address did not match the expected address on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQueue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "InvalidQueue";
    readonly msg = "The provided attestation queue address did not match the expected address on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class IllegalVerifier extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "IllegalVerifier";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidEscrow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "InvalidEscrow";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "InvalidAuthority";
    readonly msg = "The provided authority account does not match the expected value on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class IllegalExecuteAttempt extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "IllegalExecuteAttempt";
    constructor(logs?: string[] | undefined);
}
export declare class RequestExpired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "RequestExpired";
    readonly msg = "The requests expiration_slot has expired";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientFunds extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "InsufficientFunds";
    readonly msg = "The escrow has insufficient funds for this action";
    constructor(logs?: string[] | undefined);
}
export declare class MissingFunctionEscrow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "MissingFunctionEscrow";
    readonly msg = "The FunctionAccount escrow is required if function.requests_fee is greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRequest extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "InvalidRequest";
    readonly msg = "The provided requestSlot did not match the expected requestSlot on-chain. The request may have already been processed";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "FunctionNotReady";
    readonly msg = "The FunctionAccount status is not active (1)";
    constructor(logs?: string[] | undefined);
}
export declare class UserRequestsDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "UserRequestsDisabled";
    readonly msg = "The FunctionAccount has set requests_disabled to true and disabled this action";
    constructor(logs?: string[] | undefined);
}
export declare class MissingFunctionAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "MissingFunctionAuthority";
    readonly msg = "The FunctionAccount authority is required to sign if function.requests_require_authorization is enabled";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionCloseNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "FunctionCloseNotReady";
    readonly msg = "The FunctionAccount must have no requests before it can be closed";
    constructor(logs?: string[] | undefined);
}
export declare class RequestAlreadyInitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "RequestAlreadyInitialized";
    readonly msg = "Attempting to initialize an already created FunctionRequestAccount";
    constructor(logs?: string[] | undefined);
}
export declare class AccountCloseNotPermitted extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "AccountCloseNotPermitted";
    constructor(logs?: string[] | undefined);
}
export declare class AccountCloseNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "AccountCloseNotReady";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionRequestNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "FunctionRequestNotReady";
    readonly msg = "The FunctionRequestAccount is not ready to be verified";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidParamsHash extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "InvalidParamsHash";
    readonly msg = "The container params hash does not match the expected hash on-chain. The parameters may have been modified in-flight; the assigned oracle may need to pickup the account change before re-verifying the function.";
    constructor(logs?: string[] | undefined);
}
export declare class RequestInvalidStatus extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "RequestInvalidStatus";
    constructor(logs?: string[] | undefined);
}
export declare class ContainerParamsTooLong extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "ContainerParamsTooLong";
    readonly msg = "Please ensure your parameters length is <= your account max length";
    constructor(logs?: string[] | undefined);
}
export declare class RoutineDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "RoutineDisabled";
    readonly msg = "The routine has been disabled. Please check the routine's is_disabled status for more information.";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionRoutinesDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "FunctionRoutinesDisabled";
    readonly msg = "The function authority has disabled routine execution for this function";
    constructor(logs?: string[] | undefined);
}
export declare class ConfigParameterLocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "ConfigParameterLocked";
    readonly msg = "The configuration parameter has been locked and cannot be changed";
    constructor(logs?: string[] | undefined);
}
export declare class RequestBufferFull extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "RequestBufferFull";
    constructor(logs?: string[] | undefined);
}
export declare class RequestRoundNotActive extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "RequestRoundNotActive";
    readonly msg = "The request does not have an active round to verify";
    constructor(logs?: string[] | undefined);
}
export declare class EmptyEscrow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "EmptyEscrow";
    readonly msg = "The resources escrow token account has a balance of 0 and the queue reward is greater than 0";
    constructor(logs?: string[] | undefined);
}
export declare class MissingSbWalletAuthoritySigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "MissingSbWalletAuthoritySigner";
    readonly msg = "The SwitchboardWallet authority must sign this request in order to use its escrow wallet";
    constructor(logs?: string[] | undefined);
}
export declare class RequestRoundAlreadyClosed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "RequestRoundAlreadyClosed";
    readonly msg = "The verifier is attempting to respond to an already closed request round with the same request_slot";
    constructor(logs?: string[] | undefined);
}
export declare class MethodDeprecated extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "MethodDeprecated";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionServicesDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6054;
    readonly code = 6054;
    readonly name = "FunctionServicesDisabled";
    readonly msg = "The function authority has disabled service execution for this function";
    constructor(logs?: string[] | undefined);
}
export declare class ServiceDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6055;
    readonly code = 6055;
    readonly name = "ServiceDisabled";
    readonly msg = "The service has been disabled. Please check the service's is_disabled status for more information.";
    constructor(logs?: string[] | undefined);
}
export declare class ServiceWorkerFull extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6056;
    readonly code = 6056;
    readonly name = "ServiceWorkerFull";
    readonly msg = "The service worker already has the maximum number of services (128)";
    constructor(logs?: string[] | undefined);
}
export declare class ServiceWorkerEnclaveFull extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6057;
    readonly code = 6057;
    readonly name = "ServiceWorkerEnclaveFull";
    readonly msg = "The service worker is already using its max enclave space for a set of services";
    constructor(logs?: string[] | undefined);
}
export declare class ServiceAlreadyAssignedToWorker extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6058;
    readonly code = 6058;
    readonly name = "ServiceAlreadyAssignedToWorker";
    readonly msg = "Service is already being executed by a worker. Please remove the service before adding to a new service worker";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map