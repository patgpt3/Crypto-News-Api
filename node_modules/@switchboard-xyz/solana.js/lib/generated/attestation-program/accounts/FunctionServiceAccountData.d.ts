/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionServiceAccountDataFields {
    /** The Attestation Queue for this service, responsible for verifying any SGX quotes. */
    attestationQueue: PublicKey;
    /** The service workerr that is executing the managed service. */
    serviceWorker: PublicKey;
    /**
     * The status of the current service.
     * 0 = disabled, 1 = active.
     */
    status: types.ServiceStatusKind;
    /** Flag to disable the service and prevent new verification requests. */
    isDisabled: types.ResourceLevelKind;
    /** Whether the enclave is in progress for being rotated. Used for quote verifiers to filter and find pending verification requests. */
    enclaveRotationStatus: types.EnclaveRotationStatusKind;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** Signer allowed to manage the service. */
    authority: PublicKey;
    /** The pubkey of the [`FunctionAccountData`] that this service belongs to. */
    function: PublicKey;
    escrowWallet: PublicKey;
    /** The TokenAccount with funds for the escrow. */
    escrowTokenWallet: PublicKey;
    /** The name of the service for easier identification. */
    name: Array<number>;
    /** The metadata of the service for easier identification. */
    metadata: Array<number>;
    /** The unix timestamp when the service was created. */
    createdAt: BN;
    /** The unix timestamp when the service was last updated. */
    updatedAt: BN;
    /** Represents the state of the quote verifiers enclave. */
    enclave: types.BorshQuoteFields;
    /** The previous verified quote. Used to facilitate smooth transitions during signer rotations. */
    previousEnclave: types.BorshQuoteFields;
    /** The pending [`Quote`] indicating a signer rotation is in-progress. */
    pendingEnclave: types.BorshQuoteFields;
    /** The timestamp when the signer was last rotated. */
    lastRotationTimestamp: BN;
    /** The index on the queue of the verifier that is assigned to verify the SGX quote. */
    queueIdx: number;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Uint8Array;
    /** The size of the enclave to reserve, in bytes. */
    enclaveSize: BN;
    /** */
    cpu: BN;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface FunctionServiceAccountDataJSON {
    /** The Attestation Queue for this service, responsible for verifying any SGX quotes. */
    attestationQueue: string;
    /** The service workerr that is executing the managed service. */
    serviceWorker: string;
    /**
     * The status of the current service.
     * 0 = disabled, 1 = active.
     */
    status: types.ServiceStatusJSON;
    /** Flag to disable the service and prevent new verification requests. */
    isDisabled: types.ResourceLevelJSON;
    /** Whether the enclave is in progress for being rotated. Used for quote verifiers to filter and find pending verification requests. */
    enclaveRotationStatus: types.EnclaveRotationStatusJSON;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** Signer allowed to manage the service. */
    authority: string;
    /** The pubkey of the [`FunctionAccountData`] that this service belongs to. */
    function: string;
    escrowWallet: string;
    /** The TokenAccount with funds for the escrow. */
    escrowTokenWallet: string;
    /** The name of the service for easier identification. */
    name: Array<number>;
    /** The metadata of the service for easier identification. */
    metadata: Array<number>;
    /** The unix timestamp when the service was created. */
    createdAt: string;
    /** The unix timestamp when the service was last updated. */
    updatedAt: string;
    /** Represents the state of the quote verifiers enclave. */
    enclave: types.BorshQuoteJSON;
    /** The previous verified quote. Used to facilitate smooth transitions during signer rotations. */
    previousEnclave: types.BorshQuoteJSON;
    /** The pending [`Quote`] indicating a signer rotation is in-progress. */
    pendingEnclave: types.BorshQuoteJSON;
    /** The timestamp when the signer was last rotated. */
    lastRotationTimestamp: string;
    /** The index on the queue of the verifier that is assigned to verify the SGX quote. */
    queueIdx: number;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Array<number>;
    /** The size of the enclave to reserve, in bytes. */
    enclaveSize: string;
    /** */
    cpu: string;
    /** Reserved. */
    ebuf: Array<number>;
}
/**
 * A [`FunctionServiceAccountData`] represents a long running function for a given [`FunctionAccountData`].
 * A service determines the execution parameters (environment variables, oracle config, cost).
 */
export declare class FunctionServiceAccountData {
    /** The Attestation Queue for this service, responsible for verifying any SGX quotes. */
    readonly attestationQueue: PublicKey;
    /** The service workerr that is executing the managed service. */
    readonly serviceWorker: PublicKey;
    /**
     * The status of the current service.
     * 0 = disabled, 1 = active.
     */
    readonly status: types.ServiceStatusKind;
    /** Flag to disable the service and prevent new verification requests. */
    readonly isDisabled: types.ResourceLevelKind;
    /** Whether the enclave is in progress for being rotated. Used for quote verifiers to filter and find pending verification requests. */
    readonly enclaveRotationStatus: types.EnclaveRotationStatusKind;
    /** The last reported error code if the most recent response was a failure */
    readonly errorStatus: number;
    /** Signer allowed to manage the service. */
    readonly authority: PublicKey;
    /** The pubkey of the [`FunctionAccountData`] that this service belongs to. */
    readonly function: PublicKey;
    readonly escrowWallet: PublicKey;
    /** The TokenAccount with funds for the escrow. */
    readonly escrowTokenWallet: PublicKey;
    /** The name of the service for easier identification. */
    readonly name: Array<number>;
    /** The metadata of the service for easier identification. */
    readonly metadata: Array<number>;
    /** The unix timestamp when the service was created. */
    readonly createdAt: BN;
    /** The unix timestamp when the service was last updated. */
    readonly updatedAt: BN;
    /** Represents the state of the quote verifiers enclave. */
    readonly enclave: types.BorshQuote;
    /** The previous verified quote. Used to facilitate smooth transitions during signer rotations. */
    readonly previousEnclave: types.BorshQuote;
    /** The pending [`Quote`] indicating a signer rotation is in-progress. */
    readonly pendingEnclave: types.BorshQuote;
    /** The timestamp when the signer was last rotated. */
    readonly lastRotationTimestamp: BN;
    /** The index on the queue of the verifier that is assigned to verify the SGX quote. */
    readonly queueIdx: number;
    /** The maximum number of bytes to pass to the container params. */
    readonly maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    readonly containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    readonly containerParams: Uint8Array;
    /** The size of the enclave to reserve, in bytes. */
    readonly enclaveSize: BN;
    /** */
    readonly cpu: BN;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: FunctionServiceAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<FunctionServiceAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<FunctionServiceAccountData | null>>;
    static decode(data: Buffer): FunctionServiceAccountData;
    toJSON(): FunctionServiceAccountDataJSON;
    static fromJSON(obj: FunctionServiceAccountDataJSON): FunctionServiceAccountData;
}
//# sourceMappingURL=FunctionServiceAccountData.d.ts.map