/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionRequestAccountDataFields {
    /** Whether the request is ready to be processed. */
    isTriggered: number;
    /** The status of the current request. */
    status: types.RequestStatusKind;
    /** Signer allowed to cancel the request. */
    authority: PublicKey;
    /** The default destination for rent exemption when the account is closed. */
    payer: PublicKey;
    /** The function that can process this request */
    function: PublicKey;
    /** The tokenAccount escrow */
    escrow: PublicKey;
    /** The Attestation Queue for this request. */
    attestationQueue: PublicKey;
    /** The current active request. */
    activeRequest: types.FunctionRequestTriggerRoundFields;
    /** The previous request. */
    previousRequest: types.FunctionRequestTriggerRoundFields;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Uint8Array;
    /** The unix timestamp when the function was created. */
    createdAt: BN;
    /** The slot when the account can be garbage collected and closed by anyone for a portion of the rent. */
    garbageCollectionSlot: BN | null;
    /** The last recorded error code if most recent response was an error. */
    errorStatus: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface FunctionRequestAccountDataJSON {
    /** Whether the request is ready to be processed. */
    isTriggered: number;
    /** The status of the current request. */
    status: types.RequestStatusJSON;
    /** Signer allowed to cancel the request. */
    authority: string;
    /** The default destination for rent exemption when the account is closed. */
    payer: string;
    /** The function that can process this request */
    function: string;
    /** The tokenAccount escrow */
    escrow: string;
    /** The Attestation Queue for this request. */
    attestationQueue: string;
    /** The current active request. */
    activeRequest: types.FunctionRequestTriggerRoundJSON;
    /** The previous request. */
    previousRequest: types.FunctionRequestTriggerRoundJSON;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Array<number>;
    /** The unix timestamp when the function was created. */
    createdAt: string;
    /** The slot when the account can be garbage collected and closed by anyone for a portion of the rent. */
    garbageCollectionSlot: string | null;
    /** The last recorded error code if most recent response was an error. */
    errorStatus: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class FunctionRequestAccountData {
    /** Whether the request is ready to be processed. */
    readonly isTriggered: number;
    /** The status of the current request. */
    readonly status: types.RequestStatusKind;
    /** Signer allowed to cancel the request. */
    readonly authority: PublicKey;
    /** The default destination for rent exemption when the account is closed. */
    readonly payer: PublicKey;
    /** The function that can process this request */
    readonly function: PublicKey;
    /** The tokenAccount escrow */
    readonly escrow: PublicKey;
    /** The Attestation Queue for this request. */
    readonly attestationQueue: PublicKey;
    /** The current active request. */
    readonly activeRequest: types.FunctionRequestTriggerRound;
    /** The previous request. */
    readonly previousRequest: types.FunctionRequestTriggerRound;
    /** The maximum number of bytes to pass to the container params. */
    readonly maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    readonly containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    readonly containerParams: Uint8Array;
    /** The unix timestamp when the function was created. */
    readonly createdAt: BN;
    /** The slot when the account can be garbage collected and closed by anyone for a portion of the rent. */
    readonly garbageCollectionSlot: BN | null;
    /** The last recorded error code if most recent response was an error. */
    readonly errorStatus: number;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: FunctionRequestAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<FunctionRequestAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<FunctionRequestAccountData | null>>;
    static decode(data: Buffer): FunctionRequestAccountData;
    toJSON(): FunctionRequestAccountDataJSON;
    static fromJSON(obj: FunctionRequestAccountDataJSON): FunctionRequestAccountData;
}
//# sourceMappingURL=FunctionRequestAccountData.d.ts.map