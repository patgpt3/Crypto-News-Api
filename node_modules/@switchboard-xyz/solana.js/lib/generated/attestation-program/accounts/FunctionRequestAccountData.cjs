"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionRequestAccountData = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const web3_js_1 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class FunctionRequestAccountData {
    /** Whether the request is ready to be processed. */
    isTriggered;
    /** The status of the current request. */
    status;
    /** Signer allowed to cancel the request. */
    authority;
    /** The default destination for rent exemption when the account is closed. */
    payer;
    /** The function that can process this request */
    function;
    /** The tokenAccount escrow */
    escrow;
    /** The Attestation Queue for this request. */
    attestationQueue;
    /** The current active request. */
    activeRequest;
    /** The previous request. */
    previousRequest;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash;
    /** The stringified container params to pass to the function. */
    containerParams;
    /** The unix timestamp when the function was created. */
    createdAt;
    /** The slot when the account can be garbage collected and closed by anyone for a portion of the rent. */
    garbageCollectionSlot;
    /** The last recorded error code if most recent response was an error. */
    errorStatus;
    /** Reserved. */
    ebuf;
    static discriminator = Buffer.from([
        8, 14, 177, 85, 144, 65, 148, 246,
    ]);
    static layout = borsh.struct([
        borsh.u8("isTriggered"),
        types.RequestStatus.layout("status"),
        borsh.publicKey("authority"),
        borsh.publicKey("payer"),
        borsh.publicKey("function"),
        borsh.publicKey("escrow"),
        borsh.publicKey("attestationQueue"),
        types.FunctionRequestTriggerRound.layout("activeRequest"),
        types.FunctionRequestTriggerRound.layout("previousRequest"),
        borsh.u32("maxContainerParamsLen"),
        borsh.array(borsh.u8(), 32, "containerParamsHash"),
        borsh.vecU8("containerParams"),
        borsh.i64("createdAt"),
        borsh.option(borsh.u64(), "garbageCollectionSlot"),
        borsh.u8("errorStatus"),
        borsh.array(borsh.u8(), 255, "ebuf"),
    ]);
    constructor(fields) {
        this.isTriggered = fields.isTriggered;
        this.status = fields.status;
        this.authority = fields.authority;
        this.payer = fields.payer;
        this.function = fields.function;
        this.escrow = fields.escrow;
        this.attestationQueue = fields.attestationQueue;
        this.activeRequest = new types.FunctionRequestTriggerRound({
            ...fields.activeRequest,
        });
        this.previousRequest = new types.FunctionRequestTriggerRound({
            ...fields.previousRequest,
        });
        this.maxContainerParamsLen = fields.maxContainerParamsLen;
        this.containerParamsHash = fields.containerParamsHash;
        this.containerParams = fields.containerParams;
        this.createdAt = fields.createdAt;
        this.garbageCollectionSlot = fields.garbageCollectionSlot;
        this.errorStatus = fields.errorStatus;
        this.ebuf = fields.ebuf;
    }
    static async fetch(program, address, programId = program.attestationProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.attestationProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(FunctionRequestAccountData.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = FunctionRequestAccountData.layout.decode(data.slice(8));
        return new FunctionRequestAccountData({
            isTriggered: dec.isTriggered,
            status: types.RequestStatus.fromDecoded(dec.status),
            authority: dec.authority,
            payer: dec.payer,
            function: dec.function,
            escrow: dec.escrow,
            attestationQueue: dec.attestationQueue,
            activeRequest: types.FunctionRequestTriggerRound.fromDecoded(dec.activeRequest),
            previousRequest: types.FunctionRequestTriggerRound.fromDecoded(dec.previousRequest),
            maxContainerParamsLen: dec.maxContainerParamsLen,
            containerParamsHash: dec.containerParamsHash,
            containerParams: new Uint8Array(dec.containerParams.buffer, dec.containerParams.byteOffset, dec.containerParams.length),
            createdAt: dec.createdAt,
            garbageCollectionSlot: dec.garbageCollectionSlot,
            errorStatus: dec.errorStatus,
            ebuf: dec.ebuf,
        });
    }
    toJSON() {
        return {
            isTriggered: this.isTriggered,
            status: this.status.toJSON(),
            authority: this.authority.toString(),
            payer: this.payer.toString(),
            function: this.function.toString(),
            escrow: this.escrow.toString(),
            attestationQueue: this.attestationQueue.toString(),
            activeRequest: this.activeRequest.toJSON(),
            previousRequest: this.previousRequest.toJSON(),
            maxContainerParamsLen: this.maxContainerParamsLen,
            containerParamsHash: this.containerParamsHash,
            containerParams: Array.from(this.containerParams.values()),
            createdAt: this.createdAt.toString(),
            garbageCollectionSlot: (this.garbageCollectionSlot && this.garbageCollectionSlot.toString()) ||
                null,
            errorStatus: this.errorStatus,
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new FunctionRequestAccountData({
            isTriggered: obj.isTriggered,
            status: types.RequestStatus.fromJSON(obj.status),
            authority: new web3_js_1.PublicKey(obj.authority),
            payer: new web3_js_1.PublicKey(obj.payer),
            function: new web3_js_1.PublicKey(obj.function),
            escrow: new web3_js_1.PublicKey(obj.escrow),
            attestationQueue: new web3_js_1.PublicKey(obj.attestationQueue),
            activeRequest: types.FunctionRequestTriggerRound.fromJSON(obj.activeRequest),
            previousRequest: types.FunctionRequestTriggerRound.fromJSON(obj.previousRequest),
            maxContainerParamsLen: obj.maxContainerParamsLen,
            containerParamsHash: obj.containerParamsHash,
            containerParams: Uint8Array.from(obj.containerParams),
            createdAt: new common_1.BN(obj.createdAt),
            garbageCollectionSlot: (obj.garbageCollectionSlot && new common_1.BN(obj.garbageCollectionSlot)) ||
                null,
            errorStatus: obj.errorStatus,
            ebuf: obj.ebuf,
        });
    }
}
exports.FunctionRequestAccountData = FunctionRequestAccountData;
