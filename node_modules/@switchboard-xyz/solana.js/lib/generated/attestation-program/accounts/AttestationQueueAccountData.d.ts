/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface AttestationQueueAccountDataFields {
    /** The address of the authority which is permitted to add/remove allowed enclave measurements. */
    authority: PublicKey;
    /** Allowed enclave measurements. */
    mrEnclaves: Array<Array<number>>;
    /** The number of allowed enclave measurements. */
    mrEnclavesLen: number;
    /**
     * The addresses of the quote verifiers who have a valid
     * verification status and have heartbeated on-chain recently.
     */
    data: Array<PublicKey>;
    /** The length of valid quote verifiers for the given attestation queue. */
    dataLen: number;
    /** Allow authority to force add a node after X seconds with no heartbeat. */
    allowAuthorityOverrideAfter: BN;
    /**
     * Even if a heartbeating machine quote verifies with proper measurement,
     * require authority signoff.
     */
    requireAuthorityHeartbeatPermission: boolean;
    /** Require FunctionAccounts to have PermitQueueUsage before they are executed. */
    requireUsagePermissions: boolean;
    /** The maximum allowable time until a EnclaveAccount needs to be re-verified on-chain. */
    maxQuoteVerificationAge: BN;
    /** The reward paid to quote verifiers for attesting on-chain. */
    reward: number;
    /** The unix timestamp when the last quote verifier heartbeated on-chain. */
    lastHeartbeat: BN;
    nodeTimeout: BN;
    /** Incrementer used to track the current quote verifier permitted to run any available functions. */
    currIdx: number;
    /** Incrementer used to garbage collect and remove stale quote verifiers. */
    gcIdx: number;
    /** The minimum number of lamports a quote verifier needs to lock-up in order to heartbeat and verify other quotes. */
    verifierMinStake: BN;
    /** The minimum number of lamports a function needs to lock-up in order to use a queues resources. */
    functionMinStake: BN;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface AttestationQueueAccountDataJSON {
    /** The address of the authority which is permitted to add/remove allowed enclave measurements. */
    authority: string;
    /** Allowed enclave measurements. */
    mrEnclaves: Array<Array<number>>;
    /** The number of allowed enclave measurements. */
    mrEnclavesLen: number;
    /**
     * The addresses of the quote verifiers who have a valid
     * verification status and have heartbeated on-chain recently.
     */
    data: Array<string>;
    /** The length of valid quote verifiers for the given attestation queue. */
    dataLen: number;
    /** Allow authority to force add a node after X seconds with no heartbeat. */
    allowAuthorityOverrideAfter: string;
    /**
     * Even if a heartbeating machine quote verifies with proper measurement,
     * require authority signoff.
     */
    requireAuthorityHeartbeatPermission: boolean;
    /** Require FunctionAccounts to have PermitQueueUsage before they are executed. */
    requireUsagePermissions: boolean;
    /** The maximum allowable time until a EnclaveAccount needs to be re-verified on-chain. */
    maxQuoteVerificationAge: string;
    /** The reward paid to quote verifiers for attesting on-chain. */
    reward: number;
    /** The unix timestamp when the last quote verifier heartbeated on-chain. */
    lastHeartbeat: string;
    nodeTimeout: string;
    /** Incrementer used to track the current quote verifier permitted to run any available functions. */
    currIdx: number;
    /** Incrementer used to garbage collect and remove stale quote verifiers. */
    gcIdx: number;
    /** The minimum number of lamports a quote verifier needs to lock-up in order to heartbeat and verify other quotes. */
    verifierMinStake: string;
    /** The minimum number of lamports a function needs to lock-up in order to use a queues resources. */
    functionMinStake: string;
    /** Reserved. */
    ebuf: Array<number>;
}
/**
 * An AttestationQueue represents a round-robin queue of verifier oracles who attest on-chain
 * whether a Switchboard Function was executed within an enclave against an expected set of
 * enclave measurements.
 *
 * For an oracle to join the queue, the oracle must first submit their enclave quote on-chain and
 * wait for an existing verifier to attest their quote. If the oracle's quote matches an expected
 * measurement within the queues mr_enclaves config, it is granted permissions and will start
 * being assigned update requests.
 */
export declare class AttestationQueueAccountData {
    /** The address of the authority which is permitted to add/remove allowed enclave measurements. */
    readonly authority: PublicKey;
    /** Allowed enclave measurements. */
    readonly mrEnclaves: Array<Array<number>>;
    /** The number of allowed enclave measurements. */
    readonly mrEnclavesLen: number;
    /**
     * The addresses of the quote verifiers who have a valid
     * verification status and have heartbeated on-chain recently.
     */
    readonly data: Array<PublicKey>;
    /** The length of valid quote verifiers for the given attestation queue. */
    readonly dataLen: number;
    /** Allow authority to force add a node after X seconds with no heartbeat. */
    readonly allowAuthorityOverrideAfter: BN;
    /**
     * Even if a heartbeating machine quote verifies with proper measurement,
     * require authority signoff.
     */
    readonly requireAuthorityHeartbeatPermission: boolean;
    /** Require FunctionAccounts to have PermitQueueUsage before they are executed. */
    readonly requireUsagePermissions: boolean;
    /** The maximum allowable time until a EnclaveAccount needs to be re-verified on-chain. */
    readonly maxQuoteVerificationAge: BN;
    /** The reward paid to quote verifiers for attesting on-chain. */
    readonly reward: number;
    /** The unix timestamp when the last quote verifier heartbeated on-chain. */
    readonly lastHeartbeat: BN;
    readonly nodeTimeout: BN;
    /** Incrementer used to track the current quote verifier permitted to run any available functions. */
    readonly currIdx: number;
    /** Incrementer used to garbage collect and remove stale quote verifiers. */
    readonly gcIdx: number;
    /** The minimum number of lamports a quote verifier needs to lock-up in order to heartbeat and verify other quotes. */
    readonly verifierMinStake: BN;
    /** The minimum number of lamports a function needs to lock-up in order to use a queues resources. */
    readonly functionMinStake: BN;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: AttestationQueueAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<AttestationQueueAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<AttestationQueueAccountData | null>>;
    static decode(data: Buffer): AttestationQueueAccountData;
    toJSON(): AttestationQueueAccountDataJSON;
    static fromJSON(obj: AttestationQueueAccountDataJSON): AttestationQueueAccountData;
}
//# sourceMappingURL=AttestationQueueAccountData.d.ts.map