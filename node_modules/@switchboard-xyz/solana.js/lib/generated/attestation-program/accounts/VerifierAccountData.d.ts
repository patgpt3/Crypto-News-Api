/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface VerifierAccountDataFields {
    /** Represents the state of the quote verifiers enclave. */
    enclave: types.QuoteFields;
    /** The authority of the EnclaveAccount which is permitted to make account changes. */
    authority: PublicKey;
    /** Queue used for attestation to verify a MRENCLAVE measurement. */
    attestationQueue: PublicKey;
    /** The unix timestamp when the quote was created. */
    createdAt: BN;
    /** Whether the quote is located on the AttestationQueues buffer. */
    isOnQueue: number;
    /** The last time the quote heartbeated on-chain. */
    lastHeartbeat: BN;
    /**
     * The SwitchboardWallet account containing the reward escrow for verifying quotes on-chain.
     * We should set this whenever the operator changes so we dont need to pass another account and can verify with has_one.
     */
    rewardEscrow: PublicKey;
    /**
     * The SwitchboardWallet account containing the queues required min_stake.
     * Needs to be separate from the reward_escrow. Allows easier 3rd party management of stake from rewards.
     */
    stakeWallet: PublicKey;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface VerifierAccountDataJSON {
    /** Represents the state of the quote verifiers enclave. */
    enclave: types.QuoteJSON;
    /** The authority of the EnclaveAccount which is permitted to make account changes. */
    authority: string;
    /** Queue used for attestation to verify a MRENCLAVE measurement. */
    attestationQueue: string;
    /** The unix timestamp when the quote was created. */
    createdAt: string;
    /** Whether the quote is located on the AttestationQueues buffer. */
    isOnQueue: number;
    /** The last time the quote heartbeated on-chain. */
    lastHeartbeat: string;
    /**
     * The SwitchboardWallet account containing the reward escrow for verifying quotes on-chain.
     * We should set this whenever the operator changes so we dont need to pass another account and can verify with has_one.
     */
    rewardEscrow: string;
    /**
     * The SwitchboardWallet account containing the queues required min_stake.
     * Needs to be separate from the reward_escrow. Allows easier 3rd party management of stake from rewards.
     */
    stakeWallet: string;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class VerifierAccountData {
    /** Represents the state of the quote verifiers enclave. */
    readonly enclave: types.Quote;
    /** The authority of the EnclaveAccount which is permitted to make account changes. */
    readonly authority: PublicKey;
    /** Queue used for attestation to verify a MRENCLAVE measurement. */
    readonly attestationQueue: PublicKey;
    /** The unix timestamp when the quote was created. */
    readonly createdAt: BN;
    /** Whether the quote is located on the AttestationQueues buffer. */
    readonly isOnQueue: number;
    /** The last time the quote heartbeated on-chain. */
    readonly lastHeartbeat: BN;
    /**
     * The SwitchboardWallet account containing the reward escrow for verifying quotes on-chain.
     * We should set this whenever the operator changes so we dont need to pass another account and can verify with has_one.
     */
    readonly rewardEscrow: PublicKey;
    /**
     * The SwitchboardWallet account containing the queues required min_stake.
     * Needs to be separate from the reward_escrow. Allows easier 3rd party management of stake from rewards.
     */
    readonly stakeWallet: PublicKey;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: VerifierAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<VerifierAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<VerifierAccountData | null>>;
    static decode(data: Buffer): VerifierAccountData;
    toJSON(): VerifierAccountDataJSON;
    static fromJSON(obj: VerifierAccountDataJSON): VerifierAccountData;
}
//# sourceMappingURL=VerifierAccountData.d.ts.map