import * as borsh from "@coral-xyz/borsh"; // eslint-disable-line @typescript-eslint/no-unused-vars
export class AttestationProgramState {
    bump;
    ebuf;
    static discriminator = Buffer.from([
        42, 145, 190, 11, 203, 77, 146, 231,
    ]);
    static layout = borsh.struct([
        borsh.u8("bump"),
        borsh.array(borsh.u8(), 2048, "ebuf"),
    ]);
    constructor(fields) {
        this.bump = fields.bump;
        this.ebuf = fields.ebuf;
    }
    static async fetch(program, address, programId = program.attestationProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.attestationProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(AttestationProgramState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = AttestationProgramState.layout.decode(data.slice(8));
        return new AttestationProgramState({
            bump: dec.bump,
            ebuf: dec.ebuf,
        });
    }
    toJSON() {
        return {
            bump: this.bump,
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new AttestationProgramState({
            bump: obj.bump,
            ebuf: obj.ebuf,
        });
    }
}
