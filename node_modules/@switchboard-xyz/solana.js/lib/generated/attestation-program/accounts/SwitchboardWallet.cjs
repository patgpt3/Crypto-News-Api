"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchboardWallet = void 0;
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const web3_js_1 = require("@solana/web3.js");
class SwitchboardWallet {
    /** The bump used to derive the PDA. */
    bump;
    /** Flag dictating whether the wallet has been initialized already. */
    initialized;
    /** The public key of the mint used for this wallet. */
    mint;
    /** The attestation queue pubkey. */
    attestationQueue;
    /** The wallet authority that is permitted to make account changes. */
    authority;
    /** The name of the wallet for easier identification. */
    name;
    /** The number of resources tied to this wallet. */
    resourceCount;
    /**
     * The pubkey of the account that is permitted to withdraw funds from the wallet.
     * Setting this to the default pubkey will lock deposited funds.
     */
    withdrawAuthority;
    /** The associated token account pubkey. */
    tokenWallet;
    resources;
    resourcesMaxLen;
    /** Reserved. */
    ebuf;
    static discriminator = Buffer.from([210, 5, 94, 50, 69, 33, 74, 13]);
    static layout = borsh.struct([
        borsh.u8("bump"),
        borsh.u8("initialized"),
        borsh.publicKey("mint"),
        borsh.publicKey("attestationQueue"),
        borsh.publicKey("authority"),
        borsh.array(borsh.u8(), 32, "name"),
        borsh.u32("resourceCount"),
        borsh.publicKey("withdrawAuthority"),
        borsh.publicKey("tokenWallet"),
        borsh.vec(borsh.publicKey(), "resources"),
        borsh.u32("resourcesMaxLen"),
        borsh.array(borsh.u8(), 64, "ebuf"),
    ]);
    constructor(fields) {
        this.bump = fields.bump;
        this.initialized = fields.initialized;
        this.mint = fields.mint;
        this.attestationQueue = fields.attestationQueue;
        this.authority = fields.authority;
        this.name = fields.name;
        this.resourceCount = fields.resourceCount;
        this.withdrawAuthority = fields.withdrawAuthority;
        this.tokenWallet = fields.tokenWallet;
        this.resources = fields.resources;
        this.resourcesMaxLen = fields.resourcesMaxLen;
        this.ebuf = fields.ebuf;
    }
    static async fetch(program, address, programId = program.attestationProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.attestationProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(SwitchboardWallet.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = SwitchboardWallet.layout.decode(data.slice(8));
        return new SwitchboardWallet({
            bump: dec.bump,
            initialized: dec.initialized,
            mint: dec.mint,
            attestationQueue: dec.attestationQueue,
            authority: dec.authority,
            name: dec.name,
            resourceCount: dec.resourceCount,
            withdrawAuthority: dec.withdrawAuthority,
            tokenWallet: dec.tokenWallet,
            resources: dec.resources,
            resourcesMaxLen: dec.resourcesMaxLen,
            ebuf: dec.ebuf,
        });
    }
    toJSON() {
        return {
            bump: this.bump,
            initialized: this.initialized,
            mint: this.mint.toString(),
            attestationQueue: this.attestationQueue.toString(),
            authority: this.authority.toString(),
            name: this.name,
            resourceCount: this.resourceCount,
            withdrawAuthority: this.withdrawAuthority.toString(),
            tokenWallet: this.tokenWallet.toString(),
            resources: this.resources.map((item) => item.toString()),
            resourcesMaxLen: this.resourcesMaxLen,
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new SwitchboardWallet({
            bump: obj.bump,
            initialized: obj.initialized,
            mint: new web3_js_1.PublicKey(obj.mint),
            attestationQueue: new web3_js_1.PublicKey(obj.attestationQueue),
            authority: new web3_js_1.PublicKey(obj.authority),
            name: obj.name,
            resourceCount: obj.resourceCount,
            withdrawAuthority: new web3_js_1.PublicKey(obj.withdrawAuthority),
            tokenWallet: new web3_js_1.PublicKey(obj.tokenWallet),
            resources: obj.resources.map((item) => new web3_js_1.PublicKey(item)),
            resourcesMaxLen: obj.resourcesMaxLen,
            ebuf: obj.ebuf,
        });
    }
}
exports.SwitchboardWallet = SwitchboardWallet;
