"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationQueueAccountData = void 0;
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const web3_js_1 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
/**
 * An AttestationQueue represents a round-robin queue of verifier oracles who attest on-chain
 * whether a Switchboard Function was executed within an enclave against an expected set of
 * enclave measurements.
 *
 * For an oracle to join the queue, the oracle must first submit their enclave quote on-chain and
 * wait for an existing verifier to attest their quote. If the oracle's quote matches an expected
 * measurement within the queues mr_enclaves config, it is granted permissions and will start
 * being assigned update requests.
 */
class AttestationQueueAccountData {
    /** The address of the authority which is permitted to add/remove allowed enclave measurements. */
    authority;
    /** Allowed enclave measurements. */
    mrEnclaves;
    /** The number of allowed enclave measurements. */
    mrEnclavesLen;
    /**
     * The addresses of the quote verifiers who have a valid
     * verification status and have heartbeated on-chain recently.
     */
    data;
    /** The length of valid quote verifiers for the given attestation queue. */
    dataLen;
    /** Allow authority to force add a node after X seconds with no heartbeat. */
    allowAuthorityOverrideAfter;
    /**
     * Even if a heartbeating machine quote verifies with proper measurement,
     * require authority signoff.
     */
    requireAuthorityHeartbeatPermission;
    /** Require FunctionAccounts to have PermitQueueUsage before they are executed. */
    requireUsagePermissions;
    /** The maximum allowable time until a EnclaveAccount needs to be re-verified on-chain. */
    maxQuoteVerificationAge;
    /** The reward paid to quote verifiers for attesting on-chain. */
    reward;
    /** The unix timestamp when the last quote verifier heartbeated on-chain. */
    lastHeartbeat;
    nodeTimeout;
    /** Incrementer used to track the current quote verifier permitted to run any available functions. */
    currIdx;
    /** Incrementer used to garbage collect and remove stale quote verifiers. */
    gcIdx;
    /** The minimum number of lamports a quote verifier needs to lock-up in order to heartbeat and verify other quotes. */
    verifierMinStake;
    /** The minimum number of lamports a function needs to lock-up in order to use a queues resources. */
    functionMinStake;
    /** Reserved. */
    ebuf;
    static discriminator = Buffer.from([
        192, 53, 130, 67, 234, 207, 39, 171,
    ]);
    static layout = borsh.struct([
        borsh.publicKey("authority"),
        borsh.array(borsh.array(borsh.u8(), 32), 32, "mrEnclaves"),
        borsh.u32("mrEnclavesLen"),
        borsh.array(borsh.publicKey(), 128, "data"),
        borsh.u32("dataLen"),
        borsh.i64("allowAuthorityOverrideAfter"),
        borsh.bool("requireAuthorityHeartbeatPermission"),
        borsh.bool("requireUsagePermissions"),
        borsh.i64("maxQuoteVerificationAge"),
        borsh.u32("reward"),
        borsh.i64("lastHeartbeat"),
        borsh.i64("nodeTimeout"),
        borsh.u32("currIdx"),
        borsh.u32("gcIdx"),
        borsh.u64("verifierMinStake"),
        borsh.u64("functionMinStake"),
        borsh.array(borsh.u8(), 1008, "ebuf"),
    ]);
    constructor(fields) {
        this.authority = fields.authority;
        this.mrEnclaves = fields.mrEnclaves;
        this.mrEnclavesLen = fields.mrEnclavesLen;
        this.data = fields.data;
        this.dataLen = fields.dataLen;
        this.allowAuthorityOverrideAfter = fields.allowAuthorityOverrideAfter;
        this.requireAuthorityHeartbeatPermission =
            fields.requireAuthorityHeartbeatPermission;
        this.requireUsagePermissions = fields.requireUsagePermissions;
        this.maxQuoteVerificationAge = fields.maxQuoteVerificationAge;
        this.reward = fields.reward;
        this.lastHeartbeat = fields.lastHeartbeat;
        this.nodeTimeout = fields.nodeTimeout;
        this.currIdx = fields.currIdx;
        this.gcIdx = fields.gcIdx;
        this.verifierMinStake = fields.verifierMinStake;
        this.functionMinStake = fields.functionMinStake;
        this.ebuf = fields.ebuf;
    }
    static async fetch(program, address, programId = program.attestationProgramId) {
        const info = await program.connection.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(program, addresses, programId = program.attestationProgramId) {
        const infos = await program.connection.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(AttestationQueueAccountData.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = AttestationQueueAccountData.layout.decode(data.slice(8));
        return new AttestationQueueAccountData({
            authority: dec.authority,
            mrEnclaves: dec.mrEnclaves,
            mrEnclavesLen: dec.mrEnclavesLen,
            data: dec.data,
            dataLen: dec.dataLen,
            allowAuthorityOverrideAfter: dec.allowAuthorityOverrideAfter,
            requireAuthorityHeartbeatPermission: dec.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: dec.requireUsagePermissions,
            maxQuoteVerificationAge: dec.maxQuoteVerificationAge,
            reward: dec.reward,
            lastHeartbeat: dec.lastHeartbeat,
            nodeTimeout: dec.nodeTimeout,
            currIdx: dec.currIdx,
            gcIdx: dec.gcIdx,
            verifierMinStake: dec.verifierMinStake,
            functionMinStake: dec.functionMinStake,
            ebuf: dec.ebuf,
        });
    }
    toJSON() {
        return {
            authority: this.authority.toString(),
            mrEnclaves: this.mrEnclaves,
            mrEnclavesLen: this.mrEnclavesLen,
            data: this.data.map((item) => item.toString()),
            dataLen: this.dataLen,
            allowAuthorityOverrideAfter: this.allowAuthorityOverrideAfter.toString(),
            requireAuthorityHeartbeatPermission: this.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: this.requireUsagePermissions,
            maxQuoteVerificationAge: this.maxQuoteVerificationAge.toString(),
            reward: this.reward,
            lastHeartbeat: this.lastHeartbeat.toString(),
            nodeTimeout: this.nodeTimeout.toString(),
            currIdx: this.currIdx,
            gcIdx: this.gcIdx,
            verifierMinStake: this.verifierMinStake.toString(),
            functionMinStake: this.functionMinStake.toString(),
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new AttestationQueueAccountData({
            authority: new web3_js_1.PublicKey(obj.authority),
            mrEnclaves: obj.mrEnclaves,
            mrEnclavesLen: obj.mrEnclavesLen,
            data: obj.data.map((item) => new web3_js_1.PublicKey(item)),
            dataLen: obj.dataLen,
            allowAuthorityOverrideAfter: new common_1.BN(obj.allowAuthorityOverrideAfter),
            requireAuthorityHeartbeatPermission: obj.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: obj.requireUsagePermissions,
            maxQuoteVerificationAge: new common_1.BN(obj.maxQuoteVerificationAge),
            reward: obj.reward,
            lastHeartbeat: new common_1.BN(obj.lastHeartbeat),
            nodeTimeout: new common_1.BN(obj.nodeTimeout),
            currIdx: obj.currIdx,
            gcIdx: obj.gcIdx,
            verifierMinStake: new common_1.BN(obj.verifierMinStake),
            functionMinStake: new common_1.BN(obj.functionMinStake),
            ebuf: obj.ebuf,
        });
    }
}
exports.AttestationQueueAccountData = AttestationQueueAccountData;
