/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionAccountDataFields {
    /** Whether the function is invoked on a schedule or by request */
    isScheduled: number;
    /** Whether the function has been manually triggered with the function_trigger instruction */
    isTriggered: number;
    /** The function permissions granted by the attestation_queue.authority */
    permissions: number;
    status: types.FunctionStatusKind;
    /** PDA bump. */
    bump: number;
    /** The payer who originally created the function. Cannot change, used to derive PDA. */
    creatorSeed: Array<number>;
    /** The name of the function for easier identification. */
    name: Array<number>;
    /** The metadata of the function for easier identification. */
    metadata: Array<number>;
    /** The Solana slot when the function was created. (PDA) */
    createdAtSlot: BN;
    /** The unix timestamp when the function was created. */
    createdAt: BN;
    /** The unix timestamp when the function config (container, registry, version, or schedule) was changed. */
    updatedAt: BN;
    /** The enclave quote */
    enclave: types.QuoteFields;
    /** An array of permitted mr_enclave measurements for the function. */
    mrEnclaves: Array<Array<number>>;
    /** The off-chain registry to fetch the function container from. */
    containerRegistry: Array<number>;
    /** The identifier of the container in the given container_registry. */
    container: Array<number>;
    /** The version tag of the container to pull. */
    version: Array<number>;
    /** The expected schema for the container params. */
    paramsSchema: Array<number>;
    /** The default params passed to the container during scheduled execution. */
    defaultContainerParams: Array<number>;
    /** The authority of the function which is authorized to make account changes. */
    authority: PublicKey;
    /** The address of the AttestationQueueAccountData that will be processing function requests and verifying the function measurements. */
    attestationQueue: PublicKey;
    /** An incrementer used to rotate through an AttestationQueue's verifiers. */
    queueIdx: number;
    /** The address_lookup_table of the function used to increase the number of accounts we can fit into a function result. */
    addressLookupTable: PublicKey;
    /** The cron schedule to run the function on. */
    schedule: Array<number>;
    /** The unix timestamp when the function was last run. */
    lastExecutionTimestamp: BN;
    /** The unix timestamp when the function is allowed to run next. */
    nextAllowedTimestamp: BN;
    /** The number of times to trigger the function upon the next invocation. */
    triggerCount: BN;
    /** Time this function has been sitting in an explicitly triggered state */
    triggeredSince: BN;
    /** UNUSED. The unix timestamp when the current permissions expire. */
    permissionExpiration: BN;
    /** Number of requests created for this function. Used to prevent closing when there are live requests. */
    numRequests: BN;
    /** Whether custom requests have been disabled for this function. */
    requestsDisabled: number;
    /**
     * Whether new requests need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to use CPIs to control request account creation.
     */
    requestsRequireAuthorization: number;
    /** DEPRECATED. */
    reserved1: Array<number>;
    /**
     * The dev fee that is paid out from the request's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = requests's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    requestsDevFee: BN;
    /** The SwitchboardWallet that will handle pre-funding rewards paid out to function verifiers. */
    escrowWallet: PublicKey;
    /** The escrow_wallet TokenAccount that handles pre-funding rewards paid out to function runners. */
    escrowTokenWallet: PublicKey;
    /**
     * The SwitchboardWallet that will handle acruing rewards from requests.
     * Defaults to the escrow_wallet.
     */
    rewardEscrowWallet: PublicKey;
    /** The reward_escrow_wallet TokenAccount used to acrue rewards from requests made with custom parameters. */
    rewardEscrowTokenWallet: PublicKey;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** Number of routines created for this function. Used to prevent closing when there are live routines. */
    numRoutines: BN;
    /** Whether custom routines have been disabled for this function. */
    routinesDisabled: types.BoolWithLockKind;
    /**
     * Whether new routines need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run routines.
     */
    routinesRequireAuthorization: number;
    /**
     * The fee that is paid out from the routine's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = routine's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    routinesDevFee: BN;
    /** The functions MRENCLAVE measurement dictating the contents of the secure enclave. */
    mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    verificationTimestamp: BN;
    /** The unix timestamp when the quotes verification status expires. */
    validUntil: BN;
    /** Number of services created for this function. Used to prevent closing when there are live services. */
    numServices: BN;
    /** Whether custom services have been disabled for this function. */
    servicesEnabled: types.BoolWithLockKind;
    /**
     * Whether new services need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run services.
     */
    servicesRequireAuthorization: number;
    /**
     * The number of seconds before a service needs to rotate their keypair, excluding reboots.
     * This is used to payout the services_dev_fee each time the signer is rotated.
     * 0 = No rotation required.
     */
    servicesSignerRotationInterval: BN;
    /**
     * The fee that is paid out from the service's escrow to the function's escrow on each successful signer rotation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = services's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    servicesDevFee: BN;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface FunctionAccountDataJSON {
    /** Whether the function is invoked on a schedule or by request */
    isScheduled: number;
    /** Whether the function has been manually triggered with the function_trigger instruction */
    isTriggered: number;
    /** The function permissions granted by the attestation_queue.authority */
    permissions: number;
    status: types.FunctionStatusJSON;
    /** PDA bump. */
    bump: number;
    /** The payer who originally created the function. Cannot change, used to derive PDA. */
    creatorSeed: Array<number>;
    /** The name of the function for easier identification. */
    name: Array<number>;
    /** The metadata of the function for easier identification. */
    metadata: Array<number>;
    /** The Solana slot when the function was created. (PDA) */
    createdAtSlot: string;
    /** The unix timestamp when the function was created. */
    createdAt: string;
    /** The unix timestamp when the function config (container, registry, version, or schedule) was changed. */
    updatedAt: string;
    /** The enclave quote */
    enclave: types.QuoteJSON;
    /** An array of permitted mr_enclave measurements for the function. */
    mrEnclaves: Array<Array<number>>;
    /** The off-chain registry to fetch the function container from. */
    containerRegistry: Array<number>;
    /** The identifier of the container in the given container_registry. */
    container: Array<number>;
    /** The version tag of the container to pull. */
    version: Array<number>;
    /** The expected schema for the container params. */
    paramsSchema: Array<number>;
    /** The default params passed to the container during scheduled execution. */
    defaultContainerParams: Array<number>;
    /** The authority of the function which is authorized to make account changes. */
    authority: string;
    /** The address of the AttestationQueueAccountData that will be processing function requests and verifying the function measurements. */
    attestationQueue: string;
    /** An incrementer used to rotate through an AttestationQueue's verifiers. */
    queueIdx: number;
    /** The address_lookup_table of the function used to increase the number of accounts we can fit into a function result. */
    addressLookupTable: string;
    /** The cron schedule to run the function on. */
    schedule: Array<number>;
    /** The unix timestamp when the function was last run. */
    lastExecutionTimestamp: string;
    /** The unix timestamp when the function is allowed to run next. */
    nextAllowedTimestamp: string;
    /** The number of times to trigger the function upon the next invocation. */
    triggerCount: string;
    /** Time this function has been sitting in an explicitly triggered state */
    triggeredSince: string;
    /** UNUSED. The unix timestamp when the current permissions expire. */
    permissionExpiration: string;
    /** Number of requests created for this function. Used to prevent closing when there are live requests. */
    numRequests: string;
    /** Whether custom requests have been disabled for this function. */
    requestsDisabled: number;
    /**
     * Whether new requests need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to use CPIs to control request account creation.
     */
    requestsRequireAuthorization: number;
    /** DEPRECATED. */
    reserved1: Array<number>;
    /**
     * The dev fee that is paid out from the request's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = requests's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    requestsDevFee: string;
    /** The SwitchboardWallet that will handle pre-funding rewards paid out to function verifiers. */
    escrowWallet: string;
    /** The escrow_wallet TokenAccount that handles pre-funding rewards paid out to function runners. */
    escrowTokenWallet: string;
    /**
     * The SwitchboardWallet that will handle acruing rewards from requests.
     * Defaults to the escrow_wallet.
     */
    rewardEscrowWallet: string;
    /** The reward_escrow_wallet TokenAccount used to acrue rewards from requests made with custom parameters. */
    rewardEscrowTokenWallet: string;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** Number of routines created for this function. Used to prevent closing when there are live routines. */
    numRoutines: string;
    /** Whether custom routines have been disabled for this function. */
    routinesDisabled: types.BoolWithLockJSON;
    /**
     * Whether new routines need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run routines.
     */
    routinesRequireAuthorization: number;
    /**
     * The fee that is paid out from the routine's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = routine's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    routinesDevFee: string;
    /** The functions MRENCLAVE measurement dictating the contents of the secure enclave. */
    mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    verificationTimestamp: string;
    /** The unix timestamp when the quotes verification status expires. */
    validUntil: string;
    /** Number of services created for this function. Used to prevent closing when there are live services. */
    numServices: string;
    /** Whether custom services have been disabled for this function. */
    servicesEnabled: types.BoolWithLockJSON;
    /**
     * Whether new services need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run services.
     */
    servicesRequireAuthorization: number;
    /**
     * The number of seconds before a service needs to rotate their keypair, excluding reboots.
     * This is used to payout the services_dev_fee each time the signer is rotated.
     * 0 = No rotation required.
     */
    servicesSignerRotationInterval: string;
    /**
     * The fee that is paid out from the service's escrow to the function's escrow on each successful signer rotation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = services's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    servicesDevFee: string;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class FunctionAccountData {
    /** Whether the function is invoked on a schedule or by request */
    readonly isScheduled: number;
    /** Whether the function has been manually triggered with the function_trigger instruction */
    readonly isTriggered: number;
    /** The function permissions granted by the attestation_queue.authority */
    readonly permissions: number;
    readonly status: types.FunctionStatusKind;
    /** PDA bump. */
    readonly bump: number;
    /** The payer who originally created the function. Cannot change, used to derive PDA. */
    readonly creatorSeed: Array<number>;
    /** The name of the function for easier identification. */
    readonly name: Array<number>;
    /** The metadata of the function for easier identification. */
    readonly metadata: Array<number>;
    /** The Solana slot when the function was created. (PDA) */
    readonly createdAtSlot: BN;
    /** The unix timestamp when the function was created. */
    readonly createdAt: BN;
    /** The unix timestamp when the function config (container, registry, version, or schedule) was changed. */
    readonly updatedAt: BN;
    /** The enclave quote */
    readonly enclave: types.Quote;
    /** An array of permitted mr_enclave measurements for the function. */
    readonly mrEnclaves: Array<Array<number>>;
    /** The off-chain registry to fetch the function container from. */
    readonly containerRegistry: Array<number>;
    /** The identifier of the container in the given container_registry. */
    readonly container: Array<number>;
    /** The version tag of the container to pull. */
    readonly version: Array<number>;
    /** The expected schema for the container params. */
    readonly paramsSchema: Array<number>;
    /** The default params passed to the container during scheduled execution. */
    readonly defaultContainerParams: Array<number>;
    /** The authority of the function which is authorized to make account changes. */
    readonly authority: PublicKey;
    /** The address of the AttestationQueueAccountData that will be processing function requests and verifying the function measurements. */
    readonly attestationQueue: PublicKey;
    /** An incrementer used to rotate through an AttestationQueue's verifiers. */
    readonly queueIdx: number;
    /** The address_lookup_table of the function used to increase the number of accounts we can fit into a function result. */
    readonly addressLookupTable: PublicKey;
    /** The cron schedule to run the function on. */
    readonly schedule: Array<number>;
    /** The unix timestamp when the function was last run. */
    readonly lastExecutionTimestamp: BN;
    /** The unix timestamp when the function is allowed to run next. */
    readonly nextAllowedTimestamp: BN;
    /** The number of times to trigger the function upon the next invocation. */
    readonly triggerCount: BN;
    /** Time this function has been sitting in an explicitly triggered state */
    readonly triggeredSince: BN;
    /** UNUSED. The unix timestamp when the current permissions expire. */
    readonly permissionExpiration: BN;
    /** Number of requests created for this function. Used to prevent closing when there are live requests. */
    readonly numRequests: BN;
    /** Whether custom requests have been disabled for this function. */
    readonly requestsDisabled: number;
    /**
     * Whether new requests need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to use CPIs to control request account creation.
     */
    readonly requestsRequireAuthorization: number;
    /** DEPRECATED. */
    readonly reserved1: Array<number>;
    /**
     * The dev fee that is paid out from the request's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = requests's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    readonly requestsDevFee: BN;
    /** The SwitchboardWallet that will handle pre-funding rewards paid out to function verifiers. */
    readonly escrowWallet: PublicKey;
    /** The escrow_wallet TokenAccount that handles pre-funding rewards paid out to function runners. */
    readonly escrowTokenWallet: PublicKey;
    /**
     * The SwitchboardWallet that will handle acruing rewards from requests.
     * Defaults to the escrow_wallet.
     */
    readonly rewardEscrowWallet: PublicKey;
    /** The reward_escrow_wallet TokenAccount used to acrue rewards from requests made with custom parameters. */
    readonly rewardEscrowTokenWallet: PublicKey;
    /** The last reported error code if the most recent response was a failure */
    readonly errorStatus: number;
    /** Number of routines created for this function. Used to prevent closing when there are live routines. */
    readonly numRoutines: BN;
    /** Whether custom routines have been disabled for this function. */
    readonly routinesDisabled: types.BoolWithLockKind;
    /**
     * Whether new routines need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run routines.
     */
    readonly routinesRequireAuthorization: number;
    /**
     * The fee that is paid out from the routine's escrow to the function's escrow on each successful invocation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = routine's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    readonly routinesDevFee: BN;
    /** The functions MRENCLAVE measurement dictating the contents of the secure enclave. */
    readonly mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    readonly verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    readonly verificationTimestamp: BN;
    /** The unix timestamp when the quotes verification status expires. */
    readonly validUntil: BN;
    /** Number of services created for this function. Used to prevent closing when there are live services. */
    readonly numServices: BN;
    /** Whether custom services have been disabled for this function. */
    readonly servicesEnabled: types.BoolWithLockKind;
    /**
     * Whether new services need to be authorized by the FunctionAccount authority before being initialized.
     * Useful if you want to provide AccessControl and only allow certain parties to run services.
     */
    readonly servicesRequireAuthorization: number;
    /**
     * The number of seconds before a service needs to rotate their keypair, excluding reboots.
     * This is used to payout the services_dev_fee each time the signer is rotated.
     * 0 = No rotation required.
     */
    readonly servicesSignerRotationInterval: BN;
    /**
     * The fee that is paid out from the service's escrow to the function's escrow on each successful signer rotation.
     * This is used to reward the function maintainer for providing the function.
     * 0 = No Fee. Sender = services's escrow_token_wallet. Receiver = function's reward_token_wallet.
     */
    readonly servicesDevFee: BN;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: FunctionAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<FunctionAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<FunctionAccountData | null>>;
    static decode(data: Buffer): FunctionAccountData;
    toJSON(): FunctionAccountDataJSON;
    static fromJSON(obj: FunctionAccountDataJSON): FunctionAccountData;
}
//# sourceMappingURL=FunctionAccountData.d.ts.map