/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionRoutineAccountDataFields {
    /** The name of the function routine for easier identification. */
    name: Array<number>;
    /** The metadata of the function routine for easier identification. */
    metadata: Array<number>;
    /** The unix timestamp when the function routine was created. */
    createdAt: BN;
    /** The unix timestamp when the function routine config was changed. */
    updatedAt: BN;
    /** Flag to disable the function and prevent new verification requests. */
    isDisabled: types.ResourceLevelKind;
    status: types.RoutineStatusKind;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** The enclave generated signer for this routine. */
    enclaveSigner: PublicKey;
    /** The verifier oracle who signed this verification. */
    verifier: PublicKey;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. 0 = no bounty. Receiver = verifier oracle. */
    bounty: BN;
    /** Signer allowed to manage the routine. */
    authority: PublicKey;
    /** The default destination for rent exemption when the account is closed. */
    payer: PublicKey;
    /** The function that manages the mr_enclave set for this routine. */
    function: PublicKey;
    /** The Attestation Queue for this request. */
    attestationQueue: PublicKey;
    /** The tokenAccount escrow */
    escrowWallet: PublicKey;
    /** The TokenAccount with funds for the escrow. */
    escrowTokenWallet: PublicKey;
    /**
     * The index of the verifier on the queue that is assigned to process the next invocation.
     * This is incremented after each invocation in a round-robin fashion.
     */
    queueIdx: number;
    /** The cron schedule to run the function on. */
    schedule: Array<number>;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Uint8Array;
    /** The unix timestamp when the function was last run. */
    lastExecutionTimestamp: BN;
    /** The unix timestamp when the function was last run successfully. */
    lastSuccessfulExecutionTimestamp: BN;
    /** The unix timestamp when the function is allowed to run next. */
    nextAllowedTimestamp: BN;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface FunctionRoutineAccountDataJSON {
    /** The name of the function routine for easier identification. */
    name: Array<number>;
    /** The metadata of the function routine for easier identification. */
    metadata: Array<number>;
    /** The unix timestamp when the function routine was created. */
    createdAt: string;
    /** The unix timestamp when the function routine config was changed. */
    updatedAt: string;
    /** Flag to disable the function and prevent new verification requests. */
    isDisabled: types.ResourceLevelJSON;
    status: types.RoutineStatusJSON;
    /** The last reported error code if the most recent response was a failure */
    errorStatus: number;
    /** The enclave generated signer for this routine. */
    enclaveSigner: string;
    /** The verifier oracle who signed this verification. */
    verifier: string;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. 0 = no bounty. Receiver = verifier oracle. */
    bounty: string;
    /** Signer allowed to manage the routine. */
    authority: string;
    /** The default destination for rent exemption when the account is closed. */
    payer: string;
    /** The function that manages the mr_enclave set for this routine. */
    function: string;
    /** The Attestation Queue for this request. */
    attestationQueue: string;
    /** The tokenAccount escrow */
    escrowWallet: string;
    /** The TokenAccount with funds for the escrow. */
    escrowTokenWallet: string;
    /**
     * The index of the verifier on the queue that is assigned to process the next invocation.
     * This is incremented after each invocation in a round-robin fashion.
     */
    queueIdx: number;
    /** The cron schedule to run the function on. */
    schedule: Array<number>;
    /** The maximum number of bytes to pass to the container params. */
    maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    containerParams: Array<number>;
    /** The unix timestamp when the function was last run. */
    lastExecutionTimestamp: string;
    /** The unix timestamp when the function was last run successfully. */
    lastSuccessfulExecutionTimestamp: string;
    /** The unix timestamp when the function is allowed to run next. */
    nextAllowedTimestamp: string;
    /** Reserved. */
    ebuf: Array<number>;
}
/**
 * The function routine account provides scheduled execution of Switchboard Functions
 * with a configurable cron-based schedule and container parameters.
 *
 * Function routines maintain their own queue_idx to provide round-robin assignment of
 * verifiers for each settled execution. This is incremented after each invocation.
 *
 * Function routines can share a SwitchboardWallet as long as the escrow authority has
 * signed the transaction.
 */
export declare class FunctionRoutineAccountData {
    /** The name of the function routine for easier identification. */
    readonly name: Array<number>;
    /** The metadata of the function routine for easier identification. */
    readonly metadata: Array<number>;
    /** The unix timestamp when the function routine was created. */
    readonly createdAt: BN;
    /** The unix timestamp when the function routine config was changed. */
    readonly updatedAt: BN;
    /** Flag to disable the function and prevent new verification requests. */
    readonly isDisabled: types.ResourceLevelKind;
    readonly status: types.RoutineStatusKind;
    /** The last reported error code if the most recent response was a failure */
    readonly errorStatus: number;
    /** The enclave generated signer for this routine. */
    readonly enclaveSigner: PublicKey;
    /** The verifier oracle who signed this verification. */
    readonly verifier: PublicKey;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. 0 = no bounty. Receiver = verifier oracle. */
    readonly bounty: BN;
    /** Signer allowed to manage the routine. */
    readonly authority: PublicKey;
    /** The default destination for rent exemption when the account is closed. */
    readonly payer: PublicKey;
    /** The function that manages the mr_enclave set for this routine. */
    readonly function: PublicKey;
    /** The Attestation Queue for this request. */
    readonly attestationQueue: PublicKey;
    /** The tokenAccount escrow */
    readonly escrowWallet: PublicKey;
    /** The TokenAccount with funds for the escrow. */
    readonly escrowTokenWallet: PublicKey;
    /**
     * The index of the verifier on the queue that is assigned to process the next invocation.
     * This is incremented after each invocation in a round-robin fashion.
     */
    readonly queueIdx: number;
    /** The cron schedule to run the function on. */
    readonly schedule: Array<number>;
    /** The maximum number of bytes to pass to the container params. */
    readonly maxContainerParamsLen: number;
    /**
     * Hash of the serialized container_params to prevent RPC tampering.
     * Should be verified within your function to ensure you are using the correct parameters.
     */
    readonly containerParamsHash: Array<number>;
    /** The stringified container params to pass to the function. */
    readonly containerParams: Uint8Array;
    /** The unix timestamp when the function was last run. */
    readonly lastExecutionTimestamp: BN;
    /** The unix timestamp when the function was last run successfully. */
    readonly lastSuccessfulExecutionTimestamp: BN;
    /** The unix timestamp when the function is allowed to run next. */
    readonly nextAllowedTimestamp: BN;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: FunctionRoutineAccountDataFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<FunctionRoutineAccountData | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<FunctionRoutineAccountData | null>>;
    static decode(data: Buffer): FunctionRoutineAccountData;
    toJSON(): FunctionRoutineAccountDataJSON;
    static fromJSON(obj: FunctionRoutineAccountDataJSON): FunctionRoutineAccountData;
}
//# sourceMappingURL=FunctionRoutineAccountData.d.ts.map