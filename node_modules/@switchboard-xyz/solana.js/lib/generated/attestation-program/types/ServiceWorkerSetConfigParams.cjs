"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceWorkerSetConfigParams = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class ServiceWorkerSetConfigParams {
    region;
    zone;
    permissionsRequired;
    lockPermissionsRequired;
    availableEnclaveSize;
    maxEnclaveSize;
    maxCpu;
    enclaveCost;
    constructor(fields) {
        this.region = fields.region;
        this.zone = fields.zone;
        this.permissionsRequired = fields.permissionsRequired;
        this.lockPermissionsRequired = fields.lockPermissionsRequired;
        this.availableEnclaveSize = fields.availableEnclaveSize;
        this.maxEnclaveSize = fields.maxEnclaveSize;
        this.maxCpu = fields.maxCpu;
        this.enclaveCost = fields.enclaveCost;
    }
    static layout(property) {
        return borsh.struct([
            borsh.option(types.ServerRegion.layout(), "region"),
            borsh.option(types.ServerZone.layout(), "zone"),
            borsh.option(borsh.bool(), "permissionsRequired"),
            borsh.option(borsh.bool(), "lockPermissionsRequired"),
            borsh.option(borsh.u64(), "availableEnclaveSize"),
            borsh.option(borsh.u64(), "maxEnclaveSize"),
            borsh.option(borsh.u64(), "maxCpu"),
            borsh.option(borsh.u64(), "enclaveCost"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new ServiceWorkerSetConfigParams({
            region: (obj.region && types.ServerRegion.fromDecoded(obj.region)) || null,
            zone: (obj.zone && types.ServerZone.fromDecoded(obj.zone)) || null,
            permissionsRequired: obj.permissionsRequired,
            lockPermissionsRequired: obj.lockPermissionsRequired,
            availableEnclaveSize: obj.availableEnclaveSize,
            maxEnclaveSize: obj.maxEnclaveSize,
            maxCpu: obj.maxCpu,
            enclaveCost: obj.enclaveCost,
        });
    }
    static toEncodable(fields) {
        return {
            region: (fields.region && fields.region.toEncodable()) || null,
            zone: (fields.zone && fields.zone.toEncodable()) || null,
            permissionsRequired: fields.permissionsRequired,
            lockPermissionsRequired: fields.lockPermissionsRequired,
            availableEnclaveSize: fields.availableEnclaveSize,
            maxEnclaveSize: fields.maxEnclaveSize,
            maxCpu: fields.maxCpu,
            enclaveCost: fields.enclaveCost,
        };
    }
    toJSON() {
        return {
            region: (this.region && this.region.toJSON()) || null,
            zone: (this.zone && this.zone.toJSON()) || null,
            permissionsRequired: this.permissionsRequired,
            lockPermissionsRequired: this.lockPermissionsRequired,
            availableEnclaveSize: (this.availableEnclaveSize && this.availableEnclaveSize.toString()) ||
                null,
            maxEnclaveSize: (this.maxEnclaveSize && this.maxEnclaveSize.toString()) || null,
            maxCpu: (this.maxCpu && this.maxCpu.toString()) || null,
            enclaveCost: (this.enclaveCost && this.enclaveCost.toString()) || null,
        };
    }
    static fromJSON(obj) {
        return new ServiceWorkerSetConfigParams({
            region: (obj.region && types.ServerRegion.fromJSON(obj.region)) || null,
            zone: (obj.zone && types.ServerZone.fromJSON(obj.zone)) || null,
            permissionsRequired: obj.permissionsRequired,
            lockPermissionsRequired: obj.lockPermissionsRequired,
            availableEnclaveSize: (obj.availableEnclaveSize && new common_1.BN(obj.availableEnclaveSize)) || null,
            maxEnclaveSize: (obj.maxEnclaveSize && new common_1.BN(obj.maxEnclaveSize)) || null,
            maxCpu: (obj.maxCpu && new common_1.BN(obj.maxCpu)) || null,
            enclaveCost: (obj.enclaveCost && new common_1.BN(obj.enclaveCost)) || null,
        });
    }
    toEncodable() {
        return ServiceWorkerSetConfigParams.toEncodable(this);
    }
}
exports.ServiceWorkerSetConfigParams = ServiceWorkerSetConfigParams;
