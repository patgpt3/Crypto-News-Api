/// <reference types="node" resolution-mode="require"/>
import * as types from "../types/index.js";
export interface FunctionRequestSetConfigParamsFields {
    containerParams: Uint8Array;
    appendContainerParams: boolean;
}
export interface FunctionRequestSetConfigParamsJSON {
    containerParams: Array<number>;
    appendContainerParams: boolean;
}
export declare class FunctionRequestSetConfigParams {
    readonly containerParams: Uint8Array;
    readonly appendContainerParams: boolean;
    constructor(fields: FunctionRequestSetConfigParamsFields);
    static layout(property?: string): any;
    static fromDecoded(obj: any): types.FunctionRequestSetConfigParams;
    static toEncodable(fields: FunctionRequestSetConfigParamsFields): {
        containerParams: Buffer;
        appendContainerParams: boolean;
    };
    toJSON(): FunctionRequestSetConfigParamsJSON;
    static fromJSON(obj: FunctionRequestSetConfigParamsJSON): FunctionRequestSetConfigParams;
    toEncodable(): {
        containerParams: Buffer;
        appendContainerParams: boolean;
    };
}
//# sourceMappingURL=FunctionRequestSetConfigParams.d.ts.map