"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = exports.fromJSON = exports.fromDecoded = exports.NorthWest = exports.West = exports.SouthWest = exports.South = exports.SouthEast = exports.East = exports.NorthEast = exports.North = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class North {
    static discriminator = 0;
    static kind = "North";
    discriminator = 0;
    kind = "North";
    toJSON() {
        return {
            kind: "North",
        };
    }
    toEncodable() {
        return {
            North: {},
        };
    }
}
exports.North = North;
class NorthEast {
    static discriminator = 1;
    static kind = "NorthEast";
    discriminator = 1;
    kind = "NorthEast";
    toJSON() {
        return {
            kind: "NorthEast",
        };
    }
    toEncodable() {
        return {
            NorthEast: {},
        };
    }
}
exports.NorthEast = NorthEast;
class East {
    static discriminator = 2;
    static kind = "East";
    discriminator = 2;
    kind = "East";
    toJSON() {
        return {
            kind: "East",
        };
    }
    toEncodable() {
        return {
            East: {},
        };
    }
}
exports.East = East;
class SouthEast {
    static discriminator = 3;
    static kind = "SouthEast";
    discriminator = 3;
    kind = "SouthEast";
    toJSON() {
        return {
            kind: "SouthEast",
        };
    }
    toEncodable() {
        return {
            SouthEast: {},
        };
    }
}
exports.SouthEast = SouthEast;
class South {
    static discriminator = 4;
    static kind = "South";
    discriminator = 4;
    kind = "South";
    toJSON() {
        return {
            kind: "South",
        };
    }
    toEncodable() {
        return {
            South: {},
        };
    }
}
exports.South = South;
class SouthWest {
    static discriminator = 5;
    static kind = "SouthWest";
    discriminator = 5;
    kind = "SouthWest";
    toJSON() {
        return {
            kind: "SouthWest",
        };
    }
    toEncodable() {
        return {
            SouthWest: {},
        };
    }
}
exports.SouthWest = SouthWest;
class West {
    static discriminator = 6;
    static kind = "West";
    discriminator = 6;
    kind = "West";
    toJSON() {
        return {
            kind: "West",
        };
    }
    toEncodable() {
        return {
            West: {},
        };
    }
}
exports.West = West;
class NorthWest {
    static discriminator = 7;
    static kind = "NorthWest";
    discriminator = 7;
    kind = "NorthWest";
    toJSON() {
        return {
            kind: "NorthWest",
        };
    }
    toEncodable() {
        return {
            NorthWest: {},
        };
    }
}
exports.NorthWest = NorthWest;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("North" in obj) {
        return new North();
    }
    if ("NorthEast" in obj) {
        return new NorthEast();
    }
    if ("East" in obj) {
        return new East();
    }
    if ("SouthEast" in obj) {
        return new SouthEast();
    }
    if ("South" in obj) {
        return new South();
    }
    if ("SouthWest" in obj) {
        return new SouthWest();
    }
    if ("West" in obj) {
        return new West();
    }
    if ("NorthWest" in obj) {
        return new NorthWest();
    }
    throw new Error("Invalid enum object");
}
exports.fromDecoded = fromDecoded;
function fromJSON(obj) {
    switch (obj.kind) {
        case "North": {
            return new North();
        }
        case "NorthEast": {
            return new NorthEast();
        }
        case "East": {
            return new East();
        }
        case "SouthEast": {
            return new SouthEast();
        }
        case "South": {
            return new South();
        }
        case "SouthWest": {
            return new SouthWest();
        }
        case "West": {
            return new West();
        }
        case "NorthWest": {
            return new NorthWest();
        }
    }
}
exports.fromJSON = fromJSON;
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "North"),
        borsh.struct([], "NorthEast"),
        borsh.struct([], "East"),
        borsh.struct([], "SouthEast"),
        borsh.struct([], "South"),
        borsh.struct([], "SouthWest"),
        borsh.struct([], "West"),
        borsh.struct([], "NorthWest"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
exports.layout = layout;
