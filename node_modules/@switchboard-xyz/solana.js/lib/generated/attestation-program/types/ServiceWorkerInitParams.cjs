"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceWorkerInitParams = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class ServiceWorkerInitParams {
    region;
    zone;
    permissionsRequired;
    availableEnclaveSize;
    maxEnclaveSize;
    maxCpu;
    enclaveCost;
    maxServicesLen;
    constructor(fields) {
        this.region = fields.region;
        this.zone = fields.zone;
        this.permissionsRequired = fields.permissionsRequired;
        this.availableEnclaveSize = fields.availableEnclaveSize;
        this.maxEnclaveSize = fields.maxEnclaveSize;
        this.maxCpu = fields.maxCpu;
        this.enclaveCost = fields.enclaveCost;
        this.maxServicesLen = fields.maxServicesLen;
    }
    static layout(property) {
        return borsh.struct([
            types.ServerRegion.layout("region"),
            types.ServerZone.layout("zone"),
            borsh.bool("permissionsRequired"),
            borsh.u64("availableEnclaveSize"),
            borsh.u64("maxEnclaveSize"),
            borsh.u64("maxCpu"),
            borsh.u64("enclaveCost"),
            borsh.u32("maxServicesLen"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new ServiceWorkerInitParams({
            region: types.ServerRegion.fromDecoded(obj.region),
            zone: types.ServerZone.fromDecoded(obj.zone),
            permissionsRequired: obj.permissionsRequired,
            availableEnclaveSize: obj.availableEnclaveSize,
            maxEnclaveSize: obj.maxEnclaveSize,
            maxCpu: obj.maxCpu,
            enclaveCost: obj.enclaveCost,
            maxServicesLen: obj.maxServicesLen,
        });
    }
    static toEncodable(fields) {
        return {
            region: fields.region.toEncodable(),
            zone: fields.zone.toEncodable(),
            permissionsRequired: fields.permissionsRequired,
            availableEnclaveSize: fields.availableEnclaveSize,
            maxEnclaveSize: fields.maxEnclaveSize,
            maxCpu: fields.maxCpu,
            enclaveCost: fields.enclaveCost,
            maxServicesLen: fields.maxServicesLen,
        };
    }
    toJSON() {
        return {
            region: this.region.toJSON(),
            zone: this.zone.toJSON(),
            permissionsRequired: this.permissionsRequired,
            availableEnclaveSize: this.availableEnclaveSize.toString(),
            maxEnclaveSize: this.maxEnclaveSize.toString(),
            maxCpu: this.maxCpu.toString(),
            enclaveCost: this.enclaveCost.toString(),
            maxServicesLen: this.maxServicesLen,
        };
    }
    static fromJSON(obj) {
        return new ServiceWorkerInitParams({
            region: types.ServerRegion.fromJSON(obj.region),
            zone: types.ServerZone.fromJSON(obj.zone),
            permissionsRequired: obj.permissionsRequired,
            availableEnclaveSize: new common_1.BN(obj.availableEnclaveSize),
            maxEnclaveSize: new common_1.BN(obj.maxEnclaveSize),
            maxCpu: new common_1.BN(obj.maxCpu),
            enclaveCost: new common_1.BN(obj.enclaveCost),
            maxServicesLen: obj.maxServicesLen,
        });
    }
    toEncodable() {
        return ServiceWorkerInitParams.toEncodable(this);
    }
}
exports.ServiceWorkerInitParams = ServiceWorkerInitParams;
