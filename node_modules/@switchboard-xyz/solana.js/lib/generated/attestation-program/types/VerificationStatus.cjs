"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = exports.fromJSON = exports.fromDecoded = exports.VerificationOverride = exports.None7 = exports.None6 = exports.None5 = exports.VerificationSuccess = exports.None3 = exports.VerificationFailure = exports.VerificationPending = exports.None = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class None {
    static discriminator = 0;
    static kind = "None";
    discriminator = 0;
    kind = "None";
    toJSON() {
        return {
            kind: "None",
        };
    }
    toEncodable() {
        return {
            None: {},
        };
    }
}
exports.None = None;
class VerificationPending {
    static discriminator = 1;
    static kind = "VerificationPending";
    discriminator = 1;
    kind = "VerificationPending";
    toJSON() {
        return {
            kind: "VerificationPending",
        };
    }
    toEncodable() {
        return {
            VerificationPending: {},
        };
    }
}
exports.VerificationPending = VerificationPending;
class VerificationFailure {
    static discriminator = 2;
    static kind = "VerificationFailure";
    discriminator = 2;
    kind = "VerificationFailure";
    toJSON() {
        return {
            kind: "VerificationFailure",
        };
    }
    toEncodable() {
        return {
            VerificationFailure: {},
        };
    }
}
exports.VerificationFailure = VerificationFailure;
class None3 {
    static discriminator = 3;
    static kind = "None3";
    discriminator = 3;
    kind = "None3";
    toJSON() {
        return {
            kind: "None3",
        };
    }
    toEncodable() {
        return {
            None3: {},
        };
    }
}
exports.None3 = None3;
class VerificationSuccess {
    static discriminator = 4;
    static kind = "VerificationSuccess";
    discriminator = 4;
    kind = "VerificationSuccess";
    toJSON() {
        return {
            kind: "VerificationSuccess",
        };
    }
    toEncodable() {
        return {
            VerificationSuccess: {},
        };
    }
}
exports.VerificationSuccess = VerificationSuccess;
class None5 {
    static discriminator = 5;
    static kind = "None5";
    discriminator = 5;
    kind = "None5";
    toJSON() {
        return {
            kind: "None5",
        };
    }
    toEncodable() {
        return {
            None5: {},
        };
    }
}
exports.None5 = None5;
class None6 {
    static discriminator = 6;
    static kind = "None6";
    discriminator = 6;
    kind = "None6";
    toJSON() {
        return {
            kind: "None6",
        };
    }
    toEncodable() {
        return {
            None6: {},
        };
    }
}
exports.None6 = None6;
class None7 {
    static discriminator = 7;
    static kind = "None7";
    discriminator = 7;
    kind = "None7";
    toJSON() {
        return {
            kind: "None7",
        };
    }
    toEncodable() {
        return {
            None7: {},
        };
    }
}
exports.None7 = None7;
class VerificationOverride {
    static discriminator = 8;
    static kind = "VerificationOverride";
    discriminator = 8;
    kind = "VerificationOverride";
    toJSON() {
        return {
            kind: "VerificationOverride",
        };
    }
    toEncodable() {
        return {
            VerificationOverride: {},
        };
    }
}
exports.VerificationOverride = VerificationOverride;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("None" in obj) {
        return new None();
    }
    if ("VerificationPending" in obj) {
        return new VerificationPending();
    }
    if ("VerificationFailure" in obj) {
        return new VerificationFailure();
    }
    if ("None3" in obj) {
        return new None3();
    }
    if ("VerificationSuccess" in obj) {
        return new VerificationSuccess();
    }
    if ("None5" in obj) {
        return new None5();
    }
    if ("None6" in obj) {
        return new None6();
    }
    if ("None7" in obj) {
        return new None7();
    }
    if ("VerificationOverride" in obj) {
        return new VerificationOverride();
    }
    throw new Error("Invalid enum object");
}
exports.fromDecoded = fromDecoded;
function fromJSON(obj) {
    switch (obj.kind) {
        case "None": {
            return new None();
        }
        case "VerificationPending": {
            return new VerificationPending();
        }
        case "VerificationFailure": {
            return new VerificationFailure();
        }
        case "None3": {
            return new None3();
        }
        case "VerificationSuccess": {
            return new VerificationSuccess();
        }
        case "None5": {
            return new None5();
        }
        case "None6": {
            return new None6();
        }
        case "None7": {
            return new None7();
        }
        case "VerificationOverride": {
            return new VerificationOverride();
        }
    }
}
exports.fromJSON = fromJSON;
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "None"),
        borsh.struct([], "VerificationPending"),
        borsh.struct([], "VerificationFailure"),
        borsh.struct([], "None3"),
        borsh.struct([], "VerificationSuccess"),
        borsh.struct([], "None5"),
        borsh.struct([], "None6"),
        borsh.struct([], "None7"),
        borsh.struct([], "VerificationOverride"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
exports.layout = layout;
