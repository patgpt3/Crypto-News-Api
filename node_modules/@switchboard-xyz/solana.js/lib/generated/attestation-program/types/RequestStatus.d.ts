import type * as types from "../types/index.js";
import * as borsh from "@coral-xyz/borsh";
export interface NoneJSON {
    kind: "None";
}
export declare class None {
    static readonly discriminator = 0;
    static readonly kind = "None";
    readonly discriminator = 0;
    readonly kind = "None";
    toJSON(): NoneJSON;
    toEncodable(): {
        None: {};
    };
}
export interface RequestPendingJSON {
    kind: "RequestPending";
}
export declare class RequestPending {
    static readonly discriminator = 1;
    static readonly kind = "RequestPending";
    readonly discriminator = 1;
    readonly kind = "RequestPending";
    toJSON(): RequestPendingJSON;
    toEncodable(): {
        RequestPending: {};
    };
}
export interface RequestCancelledJSON {
    kind: "RequestCancelled";
}
export declare class RequestCancelled {
    static readonly discriminator = 2;
    static readonly kind = "RequestCancelled";
    readonly discriminator = 2;
    readonly kind = "RequestCancelled";
    toJSON(): RequestCancelledJSON;
    toEncodable(): {
        RequestCancelled: {};
    };
}
export interface RequestFailureJSON {
    kind: "RequestFailure";
}
export declare class RequestFailure {
    static readonly discriminator = 3;
    static readonly kind = "RequestFailure";
    readonly discriminator = 3;
    readonly kind = "RequestFailure";
    toJSON(): RequestFailureJSON;
    toEncodable(): {
        RequestFailure: {};
    };
}
export interface RequestExpiredJSON {
    kind: "RequestExpired";
}
export declare class RequestExpired {
    static readonly discriminator = 4;
    static readonly kind = "RequestExpired";
    readonly discriminator = 4;
    readonly kind = "RequestExpired";
    toJSON(): RequestExpiredJSON;
    toEncodable(): {
        RequestExpired: {};
    };
}
export interface RequestSuccessJSON {
    kind: "RequestSuccess";
}
export declare class RequestSuccess {
    static readonly discriminator = 5;
    static readonly kind = "RequestSuccess";
    readonly discriminator = 5;
    readonly kind = "RequestSuccess";
    toJSON(): RequestSuccessJSON;
    toEncodable(): {
        RequestSuccess: {};
    };
}
export declare function fromDecoded(obj: any): types.RequestStatusKind;
export declare function fromJSON(obj: types.RequestStatusJSON): types.RequestStatusKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=RequestStatus.d.ts.map