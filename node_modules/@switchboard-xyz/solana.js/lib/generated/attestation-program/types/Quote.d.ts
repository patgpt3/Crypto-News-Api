import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface QuoteFields {
    /** The address of the signer generated within an enclave. */
    enclaveSigner: PublicKey;
    /** The quotes MRENCLAVE measurement dictating the contents of the secure enclave. */
    mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    verificationTimestamp: BN;
    /** The unix timestamp when the quotes verification status expires. */
    validUntil: BN;
    /** The off-chain registry where the verifiers quote can be located. */
    quoteRegistry: Array<number>;
    /** Key to lookup the buffer data on IPFS or an alternative decentralized storage solution. */
    registryKey: Array<number>;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface QuoteJSON {
    /** The address of the signer generated within an enclave. */
    enclaveSigner: string;
    /** The quotes MRENCLAVE measurement dictating the contents of the secure enclave. */
    mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    verificationTimestamp: string;
    /** The unix timestamp when the quotes verification status expires. */
    validUntil: string;
    /** The off-chain registry where the verifiers quote can be located. */
    quoteRegistry: Array<number>;
    /** Key to lookup the buffer data on IPFS or an alternative decentralized storage solution. */
    registryKey: Array<number>;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class Quote {
    /** The address of the signer generated within an enclave. */
    readonly enclaveSigner: PublicKey;
    /** The quotes MRENCLAVE measurement dictating the contents of the secure enclave. */
    readonly mrEnclave: Array<number>;
    /** The VerificationStatus of the quote. */
    readonly verificationStatus: number;
    /** The unix timestamp when the quote was last verified. */
    readonly verificationTimestamp: BN;
    /** The unix timestamp when the quotes verification status expires. */
    readonly validUntil: BN;
    /** The off-chain registry where the verifiers quote can be located. */
    readonly quoteRegistry: Array<number>;
    /** Key to lookup the buffer data on IPFS or an alternative decentralized storage solution. */
    readonly registryKey: Array<number>;
    /** Reserved. */
    readonly ebuf: Array<number>;
    constructor(fields: QuoteFields);
    static layout(property?: string): any;
    static fromDecoded(obj: any): types.Quote;
    static toEncodable(fields: QuoteFields): {
        enclaveSigner: PublicKey;
        mrEnclave: number[];
        verificationStatus: number;
        verificationTimestamp: BN;
        validUntil: BN;
        quoteRegistry: number[];
        registryKey: number[];
        ebuf: number[];
    };
    toJSON(): QuoteJSON;
    static fromJSON(obj: QuoteJSON): Quote;
    toEncodable(): {
        enclaveSigner: PublicKey;
        mrEnclave: number[];
        verificationStatus: number;
        verificationTimestamp: BN;
        validUntil: BN;
        quoteRegistry: number[];
        registryKey: number[];
        ebuf: number[];
    };
}
//# sourceMappingURL=Quote.d.ts.map