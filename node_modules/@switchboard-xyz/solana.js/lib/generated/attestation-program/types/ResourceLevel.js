import * as borsh from "@coral-xyz/borsh";
export class None {
    static discriminator = 0;
    static kind = "None";
    discriminator = 0;
    kind = "None";
    toJSON() {
        return {
            kind: "None",
        };
    }
    toEncodable() {
        return {
            None: {},
        };
    }
}
export class Authority {
    static discriminator = 1;
    static kind = "Authority";
    discriminator = 1;
    kind = "Authority";
    toJSON() {
        return {
            kind: "Authority",
        };
    }
    toEncodable() {
        return {
            Authority: {},
        };
    }
}
export class Function {
    static discriminator = 2;
    static kind = "Function";
    discriminator = 2;
    kind = "Function";
    toJSON() {
        return {
            kind: "Function",
        };
    }
    toEncodable() {
        return {
            Function: {},
        };
    }
}
export class Queue {
    static discriminator = 3;
    static kind = "Queue";
    discriminator = 3;
    kind = "Queue";
    toJSON() {
        return {
            kind: "Queue",
        };
    }
    toEncodable() {
        return {
            Queue: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("None" in obj) {
        return new None();
    }
    if ("Authority" in obj) {
        return new Authority();
    }
    if ("Function" in obj) {
        return new Function();
    }
    if ("Queue" in obj) {
        return new Queue();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "None": {
            return new None();
        }
        case "Authority": {
            return new Authority();
        }
        case "Function": {
            return new Function();
        }
        case "Queue": {
            return new Queue();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "None"),
        borsh.struct([], "Authority"),
        borsh.struct([], "Function"),
        borsh.struct([], "Queue"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
