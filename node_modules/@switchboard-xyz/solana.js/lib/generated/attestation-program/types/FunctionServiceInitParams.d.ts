/// <reference types="node" resolution-mode="require"/>
import * as types from "../types/index.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionServiceInitParamsFields {
    name: Uint8Array | null;
    metadata: Uint8Array | null;
    enclaveSize: BN;
    cpu: BN;
    maxContainerParamsLen: number | null;
    containerParams: Uint8Array;
}
export interface FunctionServiceInitParamsJSON {
    name: Array<number> | null;
    metadata: Array<number> | null;
    enclaveSize: string;
    cpu: string;
    maxContainerParamsLen: number | null;
    containerParams: Array<number>;
}
export declare class FunctionServiceInitParams {
    readonly name: Uint8Array | null;
    readonly metadata: Uint8Array | null;
    readonly enclaveSize: BN;
    readonly cpu: BN;
    readonly maxContainerParamsLen: number | null;
    readonly containerParams: Uint8Array;
    constructor(fields: FunctionServiceInitParamsFields);
    static layout(property?: string): any;
    static fromDecoded(obj: any): types.FunctionServiceInitParams;
    static toEncodable(fields: FunctionServiceInitParamsFields): {
        name: Buffer | null;
        metadata: Buffer | null;
        enclaveSize: BN;
        cpu: BN;
        maxContainerParamsLen: number | null;
        containerParams: Buffer;
    };
    toJSON(): FunctionServiceInitParamsJSON;
    static fromJSON(obj: FunctionServiceInitParamsJSON): FunctionServiceInitParams;
    toEncodable(): {
        name: Buffer | null;
        metadata: Buffer | null;
        enclaveSize: BN;
        cpu: BN;
        maxContainerParamsLen: number | null;
        containerParams: Buffer;
    };
}
//# sourceMappingURL=FunctionServiceInitParams.d.ts.map