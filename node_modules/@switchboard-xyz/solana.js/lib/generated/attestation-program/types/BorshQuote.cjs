"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BorshQuote = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
const web3_js_1 = require("@solana/web3.js"); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class BorshQuote {
    /** The address of the signer generated within an enclave. */
    enclaveSigner;
    /** The [`VerifierAccountData`] which completed the verification. */
    verifier;
    /** The quotes MRENCLAVE measurement dictating the contents of the secure enclave. */
    mrEnclave;
    /** The off-chain registry where the verifiers quote can be located. */
    quoteRegistry;
    /** Key to lookup the buffer data on IPFS or an alternative decentralized storage solution. */
    registryKey;
    verificationStatus;
    /** The unix timestamp when verification was requested. */
    requestTimestamp;
    /** The unix timestamp when the quote was last verified. */
    verificationTimestamp;
    /** The unix timestamp when the quotes verification status expires. */
    validUntil;
    ebuf;
    constructor(fields) {
        this.enclaveSigner = fields.enclaveSigner;
        this.verifier = fields.verifier;
        this.mrEnclave = fields.mrEnclave;
        this.quoteRegistry = fields.quoteRegistry;
        this.registryKey = fields.registryKey;
        this.verificationStatus = fields.verificationStatus;
        this.requestTimestamp = fields.requestTimestamp;
        this.verificationTimestamp = fields.verificationTimestamp;
        this.validUntil = fields.validUntil;
        this.ebuf = fields.ebuf;
    }
    static layout(property) {
        return borsh.struct([
            borsh.publicKey("enclaveSigner"),
            borsh.publicKey("verifier"),
            borsh.array(borsh.u8(), 32, "mrEnclave"),
            borsh.array(borsh.u8(), 32, "quoteRegistry"),
            borsh.array(borsh.u8(), 64, "registryKey"),
            borsh.u8("verificationStatus"),
            borsh.i64("requestTimestamp"),
            borsh.i64("verificationTimestamp"),
            borsh.i64("validUntil"),
            borsh.array(borsh.u8(), 32, "ebuf"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new BorshQuote({
            enclaveSigner: obj.enclaveSigner,
            verifier: obj.verifier,
            mrEnclave: obj.mrEnclave,
            quoteRegistry: obj.quoteRegistry,
            registryKey: obj.registryKey,
            verificationStatus: obj.verificationStatus,
            requestTimestamp: obj.requestTimestamp,
            verificationTimestamp: obj.verificationTimestamp,
            validUntil: obj.validUntil,
            ebuf: obj.ebuf,
        });
    }
    static toEncodable(fields) {
        return {
            enclaveSigner: fields.enclaveSigner,
            verifier: fields.verifier,
            mrEnclave: fields.mrEnclave,
            quoteRegistry: fields.quoteRegistry,
            registryKey: fields.registryKey,
            verificationStatus: fields.verificationStatus,
            requestTimestamp: fields.requestTimestamp,
            verificationTimestamp: fields.verificationTimestamp,
            validUntil: fields.validUntil,
            ebuf: fields.ebuf,
        };
    }
    toJSON() {
        return {
            enclaveSigner: this.enclaveSigner.toString(),
            verifier: this.verifier.toString(),
            mrEnclave: this.mrEnclave,
            quoteRegistry: this.quoteRegistry,
            registryKey: this.registryKey,
            verificationStatus: this.verificationStatus,
            requestTimestamp: this.requestTimestamp.toString(),
            verificationTimestamp: this.verificationTimestamp.toString(),
            validUntil: this.validUntil.toString(),
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new BorshQuote({
            enclaveSigner: new web3_js_1.PublicKey(obj.enclaveSigner),
            verifier: new web3_js_1.PublicKey(obj.verifier),
            mrEnclave: obj.mrEnclave,
            quoteRegistry: obj.quoteRegistry,
            registryKey: obj.registryKey,
            verificationStatus: obj.verificationStatus,
            requestTimestamp: new common_1.BN(obj.requestTimestamp),
            verificationTimestamp: new common_1.BN(obj.verificationTimestamp),
            validUntil: new common_1.BN(obj.validUntil),
            ebuf: obj.ebuf,
        });
    }
    toEncodable() {
        return BorshQuote.toEncodable(this);
    }
}
exports.BorshQuote = BorshQuote;
