import * as borsh from "@coral-xyz/borsh";
export class None {
    static discriminator = 0;
    static kind = "None";
    discriminator = 0;
    kind = "None";
    toJSON() {
        return {
            kind: "None",
        };
    }
    toEncodable() {
        return {
            None: {},
        };
    }
}
export class Active {
    static discriminator = 1;
    static kind = "Active";
    discriminator = 1;
    kind = "Active";
    toJSON() {
        return {
            kind: "Active",
        };
    }
    toEncodable() {
        return {
            Active: {},
        };
    }
}
export class NonExecutable {
    static discriminator = 2;
    static kind = "NonExecutable";
    discriminator = 2;
    kind = "NonExecutable";
    toJSON() {
        return {
            kind: "NonExecutable",
        };
    }
    toEncodable() {
        return {
            NonExecutable: {},
        };
    }
}
export class ErrorKind {
    static discriminator = 3;
    static kind = "Error";
    discriminator = 3;
    kind = "Error";
    toJSON() {
        return {
            kind: "Error",
        };
    }
    toEncodable() {
        return {
            Error: {},
        };
    }
}
export class Expired {
    static discriminator = 4;
    static kind = "Expired";
    discriminator = 4;
    kind = "Expired";
    toJSON() {
        return {
            kind: "Expired",
        };
    }
    toEncodable() {
        return {
            Expired: {},
        };
    }
}
export class None5 {
    static discriminator = 5;
    static kind = "None5";
    discriminator = 5;
    kind = "None5";
    toJSON() {
        return {
            kind: "None5",
        };
    }
    toEncodable() {
        return {
            None5: {},
        };
    }
}
export class None6 {
    static discriminator = 6;
    static kind = "None6";
    discriminator = 6;
    kind = "None6";
    toJSON() {
        return {
            kind: "None6",
        };
    }
    toEncodable() {
        return {
            None6: {},
        };
    }
}
export class None7 {
    static discriminator = 7;
    static kind = "None7";
    discriminator = 7;
    kind = "None7";
    toJSON() {
        return {
            kind: "None7",
        };
    }
    toEncodable() {
        return {
            None7: {},
        };
    }
}
export class OutOfFunds {
    static discriminator = 8;
    static kind = "OutOfFunds";
    discriminator = 8;
    kind = "OutOfFunds";
    toJSON() {
        return {
            kind: "OutOfFunds",
        };
    }
    toEncodable() {
        return {
            OutOfFunds: {},
        };
    }
}
export class None9 {
    static discriminator = 9;
    static kind = "None9";
    discriminator = 9;
    kind = "None9";
    toJSON() {
        return {
            kind: "None9",
        };
    }
    toEncodable() {
        return {
            None9: {},
        };
    }
}
export class None10 {
    static discriminator = 10;
    static kind = "None10";
    discriminator = 10;
    kind = "None10";
    toJSON() {
        return {
            kind: "None10",
        };
    }
    toEncodable() {
        return {
            None10: {},
        };
    }
}
export class None11 {
    static discriminator = 11;
    static kind = "None11";
    discriminator = 11;
    kind = "None11";
    toJSON() {
        return {
            kind: "None11",
        };
    }
    toEncodable() {
        return {
            None11: {},
        };
    }
}
export class None12 {
    static discriminator = 12;
    static kind = "None12";
    discriminator = 12;
    kind = "None12";
    toJSON() {
        return {
            kind: "None12",
        };
    }
    toEncodable() {
        return {
            None12: {},
        };
    }
}
export class None13 {
    static discriminator = 13;
    static kind = "None13";
    discriminator = 13;
    kind = "None13";
    toJSON() {
        return {
            kind: "None13",
        };
    }
    toEncodable() {
        return {
            None13: {},
        };
    }
}
export class None14 {
    static discriminator = 14;
    static kind = "None14";
    discriminator = 14;
    kind = "None14";
    toJSON() {
        return {
            kind: "None14",
        };
    }
    toEncodable() {
        return {
            None14: {},
        };
    }
}
export class None15 {
    static discriminator = 15;
    static kind = "None15";
    discriminator = 15;
    kind = "None15";
    toJSON() {
        return {
            kind: "None15",
        };
    }
    toEncodable() {
        return {
            None15: {},
        };
    }
}
export class InvalidPermissions {
    static discriminator = 16;
    static kind = "InvalidPermissions";
    discriminator = 16;
    kind = "InvalidPermissions";
    toJSON() {
        return {
            kind: "InvalidPermissions",
        };
    }
    toEncodable() {
        return {
            InvalidPermissions: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("None" in obj) {
        return new None();
    }
    if ("Active" in obj) {
        return new Active();
    }
    if ("NonExecutable" in obj) {
        return new NonExecutable();
    }
    if ("Error" in obj) {
        return new ErrorKind();
    }
    if ("Expired" in obj) {
        return new Expired();
    }
    if ("None5" in obj) {
        return new None5();
    }
    if ("None6" in obj) {
        return new None6();
    }
    if ("None7" in obj) {
        return new None7();
    }
    if ("OutOfFunds" in obj) {
        return new OutOfFunds();
    }
    if ("None9" in obj) {
        return new None9();
    }
    if ("None10" in obj) {
        return new None10();
    }
    if ("None11" in obj) {
        return new None11();
    }
    if ("None12" in obj) {
        return new None12();
    }
    if ("None13" in obj) {
        return new None13();
    }
    if ("None14" in obj) {
        return new None14();
    }
    if ("None15" in obj) {
        return new None15();
    }
    if ("InvalidPermissions" in obj) {
        return new InvalidPermissions();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "None": {
            return new None();
        }
        case "Active": {
            return new Active();
        }
        case "NonExecutable": {
            return new NonExecutable();
        }
        case "Error": {
            return new ErrorKind();
        }
        case "Expired": {
            return new Expired();
        }
        case "None5": {
            return new None5();
        }
        case "None6": {
            return new None6();
        }
        case "None7": {
            return new None7();
        }
        case "OutOfFunds": {
            return new OutOfFunds();
        }
        case "None9": {
            return new None9();
        }
        case "None10": {
            return new None10();
        }
        case "None11": {
            return new None11();
        }
        case "None12": {
            return new None12();
        }
        case "None13": {
            return new None13();
        }
        case "None14": {
            return new None14();
        }
        case "None15": {
            return new None15();
        }
        case "InvalidPermissions": {
            return new InvalidPermissions();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "None"),
        borsh.struct([], "Active"),
        borsh.struct([], "NonExecutable"),
        borsh.struct([], "Error"),
        borsh.struct([], "Expired"),
        borsh.struct([], "None5"),
        borsh.struct([], "None6"),
        borsh.struct([], "None7"),
        borsh.struct([], "OutOfFunds"),
        borsh.struct([], "None9"),
        borsh.struct([], "None10"),
        borsh.struct([], "None11"),
        borsh.struct([], "None12"),
        borsh.struct([], "None13"),
        borsh.struct([], "None14"),
        borsh.struct([], "None15"),
        borsh.struct([], "InvalidPermissions"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
