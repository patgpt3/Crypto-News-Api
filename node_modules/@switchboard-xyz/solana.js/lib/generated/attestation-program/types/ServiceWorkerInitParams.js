import * as types from "../types/index.js"; // eslint-disable-line @typescript-eslint/no-unused-vars
import * as borsh from "@coral-xyz/borsh";
import { BN } from "@switchboard-xyz/common"; // eslint-disable-line @typescript-eslint/no-unused-vars
export class ServiceWorkerInitParams {
    region;
    zone;
    permissionsRequired;
    availableEnclaveSize;
    maxEnclaveSize;
    maxCpu;
    enclaveCost;
    maxServicesLen;
    constructor(fields) {
        this.region = fields.region;
        this.zone = fields.zone;
        this.permissionsRequired = fields.permissionsRequired;
        this.availableEnclaveSize = fields.availableEnclaveSize;
        this.maxEnclaveSize = fields.maxEnclaveSize;
        this.maxCpu = fields.maxCpu;
        this.enclaveCost = fields.enclaveCost;
        this.maxServicesLen = fields.maxServicesLen;
    }
    static layout(property) {
        return borsh.struct([
            types.ServerRegion.layout("region"),
            types.ServerZone.layout("zone"),
            borsh.bool("permissionsRequired"),
            borsh.u64("availableEnclaveSize"),
            borsh.u64("maxEnclaveSize"),
            borsh.u64("maxCpu"),
            borsh.u64("enclaveCost"),
            borsh.u32("maxServicesLen"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new ServiceWorkerInitParams({
            region: types.ServerRegion.fromDecoded(obj.region),
            zone: types.ServerZone.fromDecoded(obj.zone),
            permissionsRequired: obj.permissionsRequired,
            availableEnclaveSize: obj.availableEnclaveSize,
            maxEnclaveSize: obj.maxEnclaveSize,
            maxCpu: obj.maxCpu,
            enclaveCost: obj.enclaveCost,
            maxServicesLen: obj.maxServicesLen,
        });
    }
    static toEncodable(fields) {
        return {
            region: fields.region.toEncodable(),
            zone: fields.zone.toEncodable(),
            permissionsRequired: fields.permissionsRequired,
            availableEnclaveSize: fields.availableEnclaveSize,
            maxEnclaveSize: fields.maxEnclaveSize,
            maxCpu: fields.maxCpu,
            enclaveCost: fields.enclaveCost,
            maxServicesLen: fields.maxServicesLen,
        };
    }
    toJSON() {
        return {
            region: this.region.toJSON(),
            zone: this.zone.toJSON(),
            permissionsRequired: this.permissionsRequired,
            availableEnclaveSize: this.availableEnclaveSize.toString(),
            maxEnclaveSize: this.maxEnclaveSize.toString(),
            maxCpu: this.maxCpu.toString(),
            enclaveCost: this.enclaveCost.toString(),
            maxServicesLen: this.maxServicesLen,
        };
    }
    static fromJSON(obj) {
        return new ServiceWorkerInitParams({
            region: types.ServerRegion.fromJSON(obj.region),
            zone: types.ServerZone.fromJSON(obj.zone),
            permissionsRequired: obj.permissionsRequired,
            availableEnclaveSize: new BN(obj.availableEnclaveSize),
            maxEnclaveSize: new BN(obj.maxEnclaveSize),
            maxCpu: new BN(obj.maxCpu),
            enclaveCost: new BN(obj.enclaveCost),
            maxServicesLen: obj.maxServicesLen,
        });
    }
    toEncodable() {
        return ServiceWorkerInitParams.toEncodable(this);
    }
}
