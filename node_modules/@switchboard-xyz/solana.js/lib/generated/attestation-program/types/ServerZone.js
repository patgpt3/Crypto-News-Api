import * as borsh from "@coral-xyz/borsh";
export class North {
    static discriminator = 0;
    static kind = "North";
    discriminator = 0;
    kind = "North";
    toJSON() {
        return {
            kind: "North",
        };
    }
    toEncodable() {
        return {
            North: {},
        };
    }
}
export class NorthEast {
    static discriminator = 1;
    static kind = "NorthEast";
    discriminator = 1;
    kind = "NorthEast";
    toJSON() {
        return {
            kind: "NorthEast",
        };
    }
    toEncodable() {
        return {
            NorthEast: {},
        };
    }
}
export class East {
    static discriminator = 2;
    static kind = "East";
    discriminator = 2;
    kind = "East";
    toJSON() {
        return {
            kind: "East",
        };
    }
    toEncodable() {
        return {
            East: {},
        };
    }
}
export class SouthEast {
    static discriminator = 3;
    static kind = "SouthEast";
    discriminator = 3;
    kind = "SouthEast";
    toJSON() {
        return {
            kind: "SouthEast",
        };
    }
    toEncodable() {
        return {
            SouthEast: {},
        };
    }
}
export class South {
    static discriminator = 4;
    static kind = "South";
    discriminator = 4;
    kind = "South";
    toJSON() {
        return {
            kind: "South",
        };
    }
    toEncodable() {
        return {
            South: {},
        };
    }
}
export class SouthWest {
    static discriminator = 5;
    static kind = "SouthWest";
    discriminator = 5;
    kind = "SouthWest";
    toJSON() {
        return {
            kind: "SouthWest",
        };
    }
    toEncodable() {
        return {
            SouthWest: {},
        };
    }
}
export class West {
    static discriminator = 6;
    static kind = "West";
    discriminator = 6;
    kind = "West";
    toJSON() {
        return {
            kind: "West",
        };
    }
    toEncodable() {
        return {
            West: {},
        };
    }
}
export class NorthWest {
    static discriminator = 7;
    static kind = "NorthWest";
    discriminator = 7;
    kind = "NorthWest";
    toJSON() {
        return {
            kind: "NorthWest",
        };
    }
    toEncodable() {
        return {
            NorthWest: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("North" in obj) {
        return new North();
    }
    if ("NorthEast" in obj) {
        return new NorthEast();
    }
    if ("East" in obj) {
        return new East();
    }
    if ("SouthEast" in obj) {
        return new SouthEast();
    }
    if ("South" in obj) {
        return new South();
    }
    if ("SouthWest" in obj) {
        return new SouthWest();
    }
    if ("West" in obj) {
        return new West();
    }
    if ("NorthWest" in obj) {
        return new NorthWest();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "North": {
            return new North();
        }
        case "NorthEast": {
            return new NorthEast();
        }
        case "East": {
            return new East();
        }
        case "SouthEast": {
            return new SouthEast();
        }
        case "South": {
            return new South();
        }
        case "SouthWest": {
            return new SouthWest();
        }
        case "West": {
            return new West();
        }
        case "NorthWest": {
            return new NorthWest();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "North"),
        borsh.struct([], "NorthEast"),
        borsh.struct([], "East"),
        borsh.struct([], "SouthEast"),
        borsh.struct([], "South"),
        borsh.struct([], "SouthWest"),
        borsh.struct([], "West"),
        borsh.struct([], "NorthWest"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
