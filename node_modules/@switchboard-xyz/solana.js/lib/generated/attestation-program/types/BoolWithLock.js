import * as borsh from "@coral-xyz/borsh";
export class FalseUnlocked {
    static discriminator = 0;
    static kind = "FalseUnlocked";
    discriminator = 0;
    kind = "FalseUnlocked";
    toJSON() {
        return {
            kind: "FalseUnlocked",
        };
    }
    toEncodable() {
        return {
            FalseUnlocked: {},
        };
    }
}
export class TrueUnlocked {
    static discriminator = 1;
    static kind = "TrueUnlocked";
    discriminator = 1;
    kind = "TrueUnlocked";
    toJSON() {
        return {
            kind: "TrueUnlocked",
        };
    }
    toEncodable() {
        return {
            TrueUnlocked: {},
        };
    }
}
export class FalseLocked {
    static discriminator = 2;
    static kind = "FalseLocked";
    discriminator = 2;
    kind = "FalseLocked";
    toJSON() {
        return {
            kind: "FalseLocked",
        };
    }
    toEncodable() {
        return {
            FalseLocked: {},
        };
    }
}
export class TrueLocked {
    static discriminator = 3;
    static kind = "TrueLocked";
    discriminator = 3;
    kind = "TrueLocked";
    toJSON() {
        return {
            kind: "TrueLocked",
        };
    }
    toEncodable() {
        return {
            TrueLocked: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("FalseUnlocked" in obj) {
        return new FalseUnlocked();
    }
    if ("TrueUnlocked" in obj) {
        return new TrueUnlocked();
    }
    if ("FalseLocked" in obj) {
        return new FalseLocked();
    }
    if ("TrueLocked" in obj) {
        return new TrueLocked();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "FalseUnlocked": {
            return new FalseUnlocked();
        }
        case "TrueUnlocked": {
            return new TrueUnlocked();
        }
        case "FalseLocked": {
            return new FalseLocked();
        }
        case "TrueLocked": {
            return new TrueLocked();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "FalseUnlocked"),
        borsh.struct([], "TrueUnlocked"),
        borsh.struct([], "FalseLocked"),
        borsh.struct([], "TrueLocked"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
