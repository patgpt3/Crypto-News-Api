"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = exports.fromJSON = exports.fromDecoded = exports.LatinAmerica = exports.SouthAmerica = exports.Russia = exports.Asia = exports.MiddleEast = exports.Europe = exports.UnitedKingdom = exports.Canada = exports.UnitedStates = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class UnitedStates {
    static discriminator = 0;
    static kind = "UnitedStates";
    discriminator = 0;
    kind = "UnitedStates";
    toJSON() {
        return {
            kind: "UnitedStates",
        };
    }
    toEncodable() {
        return {
            UnitedStates: {},
        };
    }
}
exports.UnitedStates = UnitedStates;
class Canada {
    static discriminator = 1;
    static kind = "Canada";
    discriminator = 1;
    kind = "Canada";
    toJSON() {
        return {
            kind: "Canada",
        };
    }
    toEncodable() {
        return {
            Canada: {},
        };
    }
}
exports.Canada = Canada;
class UnitedKingdom {
    static discriminator = 2;
    static kind = "UnitedKingdom";
    discriminator = 2;
    kind = "UnitedKingdom";
    toJSON() {
        return {
            kind: "UnitedKingdom",
        };
    }
    toEncodable() {
        return {
            UnitedKingdom: {},
        };
    }
}
exports.UnitedKingdom = UnitedKingdom;
class Europe {
    static discriminator = 3;
    static kind = "Europe";
    discriminator = 3;
    kind = "Europe";
    toJSON() {
        return {
            kind: "Europe",
        };
    }
    toEncodable() {
        return {
            Europe: {},
        };
    }
}
exports.Europe = Europe;
class MiddleEast {
    static discriminator = 4;
    static kind = "MiddleEast";
    discriminator = 4;
    kind = "MiddleEast";
    toJSON() {
        return {
            kind: "MiddleEast",
        };
    }
    toEncodable() {
        return {
            MiddleEast: {},
        };
    }
}
exports.MiddleEast = MiddleEast;
class Asia {
    static discriminator = 5;
    static kind = "Asia";
    discriminator = 5;
    kind = "Asia";
    toJSON() {
        return {
            kind: "Asia",
        };
    }
    toEncodable() {
        return {
            Asia: {},
        };
    }
}
exports.Asia = Asia;
class Russia {
    static discriminator = 6;
    static kind = "Russia";
    discriminator = 6;
    kind = "Russia";
    toJSON() {
        return {
            kind: "Russia",
        };
    }
    toEncodable() {
        return {
            Russia: {},
        };
    }
}
exports.Russia = Russia;
class SouthAmerica {
    static discriminator = 7;
    static kind = "SouthAmerica";
    discriminator = 7;
    kind = "SouthAmerica";
    toJSON() {
        return {
            kind: "SouthAmerica",
        };
    }
    toEncodable() {
        return {
            SouthAmerica: {},
        };
    }
}
exports.SouthAmerica = SouthAmerica;
class LatinAmerica {
    static discriminator = 8;
    static kind = "LatinAmerica";
    discriminator = 8;
    kind = "LatinAmerica";
    toJSON() {
        return {
            kind: "LatinAmerica",
        };
    }
    toEncodable() {
        return {
            LatinAmerica: {},
        };
    }
}
exports.LatinAmerica = LatinAmerica;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("UnitedStates" in obj) {
        return new UnitedStates();
    }
    if ("Canada" in obj) {
        return new Canada();
    }
    if ("UnitedKingdom" in obj) {
        return new UnitedKingdom();
    }
    if ("Europe" in obj) {
        return new Europe();
    }
    if ("MiddleEast" in obj) {
        return new MiddleEast();
    }
    if ("Asia" in obj) {
        return new Asia();
    }
    if ("Russia" in obj) {
        return new Russia();
    }
    if ("SouthAmerica" in obj) {
        return new SouthAmerica();
    }
    if ("LatinAmerica" in obj) {
        return new LatinAmerica();
    }
    throw new Error("Invalid enum object");
}
exports.fromDecoded = fromDecoded;
function fromJSON(obj) {
    switch (obj.kind) {
        case "UnitedStates": {
            return new UnitedStates();
        }
        case "Canada": {
            return new Canada();
        }
        case "UnitedKingdom": {
            return new UnitedKingdom();
        }
        case "Europe": {
            return new Europe();
        }
        case "MiddleEast": {
            return new MiddleEast();
        }
        case "Asia": {
            return new Asia();
        }
        case "Russia": {
            return new Russia();
        }
        case "SouthAmerica": {
            return new SouthAmerica();
        }
        case "LatinAmerica": {
            return new LatinAmerica();
        }
    }
}
exports.fromJSON = fromJSON;
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "UnitedStates"),
        borsh.struct([], "Canada"),
        borsh.struct([], "UnitedKingdom"),
        borsh.struct([], "Europe"),
        borsh.struct([], "MiddleEast"),
        borsh.struct([], "Asia"),
        borsh.struct([], "Russia"),
        borsh.struct([], "SouthAmerica"),
        borsh.struct([], "LatinAmerica"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
exports.layout = layout;
