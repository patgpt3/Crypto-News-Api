"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionRequestTriggerRound = void 0;
const types = __importStar(require("../types/index.cjs")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
const web3_js_1 = require("@solana/web3.js"); // eslint-disable-line @typescript-eslint/no-unused-vars
const common_1 = require("@switchboard-xyz/common"); // eslint-disable-line @typescript-eslint/no-unused-vars
class FunctionRequestTriggerRound {
    /** The status of the request. */
    status;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. */
    bounty;
    /** The slot the request was published */
    requestSlot;
    /** The slot when the request was fulfilled */
    fulfilledSlot;
    /** The slot when the request will expire and be able to be closed by the non-authority account */
    expirationSlot;
    /** The EnclaveAccount who verified the enclave for this request */
    verifier;
    /**
     * The keypair generated in the enclave and required to sign any
     * valid transactions processed by the function.
     */
    enclaveSigner;
    /** The slot when the request can first be executed. */
    validAfterSlot;
    queueIdx;
    /** Reserved. */
    ebuf;
    constructor(fields) {
        this.status = fields.status;
        this.bounty = fields.bounty;
        this.requestSlot = fields.requestSlot;
        this.fulfilledSlot = fields.fulfilledSlot;
        this.expirationSlot = fields.expirationSlot;
        this.verifier = fields.verifier;
        this.enclaveSigner = fields.enclaveSigner;
        this.validAfterSlot = fields.validAfterSlot;
        this.queueIdx = fields.queueIdx;
        this.ebuf = fields.ebuf;
    }
    static layout(property) {
        return borsh.struct([
            types.RequestStatus.layout("status"),
            borsh.u64("bounty"),
            borsh.u64("requestSlot"),
            borsh.u64("fulfilledSlot"),
            borsh.u64("expirationSlot"),
            borsh.publicKey("verifier"),
            borsh.publicKey("enclaveSigner"),
            borsh.u64("validAfterSlot"),
            borsh.u32("queueIdx"),
            borsh.array(borsh.u8(), 52, "ebuf"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new FunctionRequestTriggerRound({
            status: types.RequestStatus.fromDecoded(obj.status),
            bounty: obj.bounty,
            requestSlot: obj.requestSlot,
            fulfilledSlot: obj.fulfilledSlot,
            expirationSlot: obj.expirationSlot,
            verifier: obj.verifier,
            enclaveSigner: obj.enclaveSigner,
            validAfterSlot: obj.validAfterSlot,
            queueIdx: obj.queueIdx,
            ebuf: obj.ebuf,
        });
    }
    static toEncodable(fields) {
        return {
            status: fields.status.toEncodable(),
            bounty: fields.bounty,
            requestSlot: fields.requestSlot,
            fulfilledSlot: fields.fulfilledSlot,
            expirationSlot: fields.expirationSlot,
            verifier: fields.verifier,
            enclaveSigner: fields.enclaveSigner,
            validAfterSlot: fields.validAfterSlot,
            queueIdx: fields.queueIdx,
            ebuf: fields.ebuf,
        };
    }
    toJSON() {
        return {
            status: this.status.toJSON(),
            bounty: this.bounty.toString(),
            requestSlot: this.requestSlot.toString(),
            fulfilledSlot: this.fulfilledSlot.toString(),
            expirationSlot: this.expirationSlot.toString(),
            verifier: this.verifier.toString(),
            enclaveSigner: this.enclaveSigner.toString(),
            validAfterSlot: this.validAfterSlot.toString(),
            queueIdx: this.queueIdx,
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new FunctionRequestTriggerRound({
            status: types.RequestStatus.fromJSON(obj.status),
            bounty: new common_1.BN(obj.bounty),
            requestSlot: new common_1.BN(obj.requestSlot),
            fulfilledSlot: new common_1.BN(obj.fulfilledSlot),
            expirationSlot: new common_1.BN(obj.expirationSlot),
            verifier: new web3_js_1.PublicKey(obj.verifier),
            enclaveSigner: new web3_js_1.PublicKey(obj.enclaveSigner),
            validAfterSlot: new common_1.BN(obj.validAfterSlot),
            queueIdx: obj.queueIdx,
            ebuf: obj.ebuf,
        });
    }
    toEncodable() {
        return FunctionRequestTriggerRound.toEncodable(this);
    }
}
exports.FunctionRequestTriggerRound = FunctionRequestTriggerRound;
