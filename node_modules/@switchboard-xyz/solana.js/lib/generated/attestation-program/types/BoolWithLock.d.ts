import type * as types from "../types/index.js";
import * as borsh from "@coral-xyz/borsh";
export interface FalseUnlockedJSON {
    kind: "FalseUnlocked";
}
export declare class FalseUnlocked {
    static readonly discriminator = 0;
    static readonly kind = "FalseUnlocked";
    readonly discriminator = 0;
    readonly kind = "FalseUnlocked";
    toJSON(): FalseUnlockedJSON;
    toEncodable(): {
        FalseUnlocked: {};
    };
}
export interface TrueUnlockedJSON {
    kind: "TrueUnlocked";
}
export declare class TrueUnlocked {
    static readonly discriminator = 1;
    static readonly kind = "TrueUnlocked";
    readonly discriminator = 1;
    readonly kind = "TrueUnlocked";
    toJSON(): TrueUnlockedJSON;
    toEncodable(): {
        TrueUnlocked: {};
    };
}
export interface FalseLockedJSON {
    kind: "FalseLocked";
}
export declare class FalseLocked {
    static readonly discriminator = 2;
    static readonly kind = "FalseLocked";
    readonly discriminator = 2;
    readonly kind = "FalseLocked";
    toJSON(): FalseLockedJSON;
    toEncodable(): {
        FalseLocked: {};
    };
}
export interface TrueLockedJSON {
    kind: "TrueLocked";
}
export declare class TrueLocked {
    static readonly discriminator = 3;
    static readonly kind = "TrueLocked";
    readonly discriminator = 3;
    readonly kind = "TrueLocked";
    toJSON(): TrueLockedJSON;
    toEncodable(): {
        TrueLocked: {};
    };
}
export declare function fromDecoded(obj: any): types.BoolWithLockKind;
export declare function fromJSON(obj: types.BoolWithLockJSON): types.BoolWithLockKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=BoolWithLock.d.ts.map