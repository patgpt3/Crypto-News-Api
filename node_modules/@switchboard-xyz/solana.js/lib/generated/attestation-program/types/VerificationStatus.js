import * as borsh from "@coral-xyz/borsh";
export class None {
    static discriminator = 0;
    static kind = "None";
    discriminator = 0;
    kind = "None";
    toJSON() {
        return {
            kind: "None",
        };
    }
    toEncodable() {
        return {
            None: {},
        };
    }
}
export class VerificationPending {
    static discriminator = 1;
    static kind = "VerificationPending";
    discriminator = 1;
    kind = "VerificationPending";
    toJSON() {
        return {
            kind: "VerificationPending",
        };
    }
    toEncodable() {
        return {
            VerificationPending: {},
        };
    }
}
export class VerificationFailure {
    static discriminator = 2;
    static kind = "VerificationFailure";
    discriminator = 2;
    kind = "VerificationFailure";
    toJSON() {
        return {
            kind: "VerificationFailure",
        };
    }
    toEncodable() {
        return {
            VerificationFailure: {},
        };
    }
}
export class None3 {
    static discriminator = 3;
    static kind = "None3";
    discriminator = 3;
    kind = "None3";
    toJSON() {
        return {
            kind: "None3",
        };
    }
    toEncodable() {
        return {
            None3: {},
        };
    }
}
export class VerificationSuccess {
    static discriminator = 4;
    static kind = "VerificationSuccess";
    discriminator = 4;
    kind = "VerificationSuccess";
    toJSON() {
        return {
            kind: "VerificationSuccess",
        };
    }
    toEncodable() {
        return {
            VerificationSuccess: {},
        };
    }
}
export class None5 {
    static discriminator = 5;
    static kind = "None5";
    discriminator = 5;
    kind = "None5";
    toJSON() {
        return {
            kind: "None5",
        };
    }
    toEncodable() {
        return {
            None5: {},
        };
    }
}
export class None6 {
    static discriminator = 6;
    static kind = "None6";
    discriminator = 6;
    kind = "None6";
    toJSON() {
        return {
            kind: "None6",
        };
    }
    toEncodable() {
        return {
            None6: {},
        };
    }
}
export class None7 {
    static discriminator = 7;
    static kind = "None7";
    discriminator = 7;
    kind = "None7";
    toJSON() {
        return {
            kind: "None7",
        };
    }
    toEncodable() {
        return {
            None7: {},
        };
    }
}
export class VerificationOverride {
    static discriminator = 8;
    static kind = "VerificationOverride";
    discriminator = 8;
    kind = "VerificationOverride";
    toJSON() {
        return {
            kind: "VerificationOverride",
        };
    }
    toEncodable() {
        return {
            VerificationOverride: {},
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("None" in obj) {
        return new None();
    }
    if ("VerificationPending" in obj) {
        return new VerificationPending();
    }
    if ("VerificationFailure" in obj) {
        return new VerificationFailure();
    }
    if ("None3" in obj) {
        return new None3();
    }
    if ("VerificationSuccess" in obj) {
        return new VerificationSuccess();
    }
    if ("None5" in obj) {
        return new None5();
    }
    if ("None6" in obj) {
        return new None6();
    }
    if ("None7" in obj) {
        return new None7();
    }
    if ("VerificationOverride" in obj) {
        return new VerificationOverride();
    }
    throw new Error("Invalid enum object");
}
export function fromJSON(obj) {
    switch (obj.kind) {
        case "None": {
            return new None();
        }
        case "VerificationPending": {
            return new VerificationPending();
        }
        case "VerificationFailure": {
            return new VerificationFailure();
        }
        case "None3": {
            return new None3();
        }
        case "VerificationSuccess": {
            return new VerificationSuccess();
        }
        case "None5": {
            return new None5();
        }
        case "None6": {
            return new None6();
        }
        case "None7": {
            return new None7();
        }
        case "VerificationOverride": {
            return new VerificationOverride();
        }
    }
}
export function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "None"),
        borsh.struct([], "VerificationPending"),
        borsh.struct([], "VerificationFailure"),
        borsh.struct([], "None3"),
        borsh.struct([], "VerificationSuccess"),
        borsh.struct([], "None5"),
        borsh.struct([], "None6"),
        borsh.struct([], "None7"),
        borsh.struct([], "VerificationOverride"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
