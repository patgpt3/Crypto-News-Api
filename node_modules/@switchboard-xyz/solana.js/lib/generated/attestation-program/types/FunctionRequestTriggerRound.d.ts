import * as types from "../types/index.js";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
export interface FunctionRequestTriggerRoundFields {
    /** The status of the request. */
    status: types.RequestStatusKind;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. */
    bounty: BN;
    /** The slot the request was published */
    requestSlot: BN;
    /** The slot when the request was fulfilled */
    fulfilledSlot: BN;
    /** The slot when the request will expire and be able to be closed by the non-authority account */
    expirationSlot: BN;
    /** The EnclaveAccount who verified the enclave for this request */
    verifier: PublicKey;
    /**
     * The keypair generated in the enclave and required to sign any
     * valid transactions processed by the function.
     */
    enclaveSigner: PublicKey;
    /** The slot when the request can first be executed. */
    validAfterSlot: BN;
    queueIdx: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface FunctionRequestTriggerRoundJSON {
    /** The status of the request. */
    status: types.RequestStatusJSON;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. */
    bounty: string;
    /** The slot the request was published */
    requestSlot: string;
    /** The slot when the request was fulfilled */
    fulfilledSlot: string;
    /** The slot when the request will expire and be able to be closed by the non-authority account */
    expirationSlot: string;
    /** The EnclaveAccount who verified the enclave for this request */
    verifier: string;
    /**
     * The keypair generated in the enclave and required to sign any
     * valid transactions processed by the function.
     */
    enclaveSigner: string;
    /** The slot when the request can first be executed. */
    validAfterSlot: string;
    queueIdx: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class FunctionRequestTriggerRound {
    /** The status of the request. */
    readonly status: types.RequestStatusKind;
    /** The SOL bounty in lamports used to incentivize a verifier to expedite the request. */
    readonly bounty: BN;
    /** The slot the request was published */
    readonly requestSlot: BN;
    /** The slot when the request was fulfilled */
    readonly fulfilledSlot: BN;
    /** The slot when the request will expire and be able to be closed by the non-authority account */
    readonly expirationSlot: BN;
    /** The EnclaveAccount who verified the enclave for this request */
    readonly verifier: PublicKey;
    /**
     * The keypair generated in the enclave and required to sign any
     * valid transactions processed by the function.
     */
    readonly enclaveSigner: PublicKey;
    /** The slot when the request can first be executed. */
    readonly validAfterSlot: BN;
    readonly queueIdx: number;
    /** Reserved. */
    readonly ebuf: Array<number>;
    constructor(fields: FunctionRequestTriggerRoundFields);
    static layout(property?: string): any;
    static fromDecoded(obj: any): types.FunctionRequestTriggerRound;
    static toEncodable(fields: FunctionRequestTriggerRoundFields): {
        status: {
            None: {};
        } | {
            RequestPending: {};
        } | {
            RequestCancelled: {};
        } | {
            RequestFailure: {};
        } | {
            RequestExpired: {};
        } | {
            RequestSuccess: {};
        };
        bounty: BN;
        requestSlot: BN;
        fulfilledSlot: BN;
        expirationSlot: BN;
        verifier: PublicKey;
        enclaveSigner: PublicKey;
        validAfterSlot: BN;
        queueIdx: number;
        ebuf: number[];
    };
    toJSON(): FunctionRequestTriggerRoundJSON;
    static fromJSON(obj: FunctionRequestTriggerRoundJSON): FunctionRequestTriggerRound;
    toEncodable(): {
        status: {
            None: {};
        } | {
            RequestPending: {};
        } | {
            RequestCancelled: {};
        } | {
            RequestFailure: {};
        } | {
            RequestExpired: {};
        } | {
            RequestSuccess: {};
        };
        bounty: BN;
        requestSlot: BN;
        fulfilledSlot: BN;
        expirationSlot: BN;
        verifier: PublicKey;
        enclaveSigner: PublicKey;
        validAfterSlot: BN;
        queueIdx: number;
        ebuf: number[];
    };
}
//# sourceMappingURL=FunctionRequestTriggerRound.d.ts.map