"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationQueueInitParams = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class AttestationQueueInitParams {
    allowAuthorityOverrideAfter;
    requireAuthorityHeartbeatPermission;
    requireUsagePermissions;
    maxQuoteVerificationAge;
    reward;
    nodeTimeout;
    constructor(fields) {
        this.allowAuthorityOverrideAfter = fields.allowAuthorityOverrideAfter;
        this.requireAuthorityHeartbeatPermission =
            fields.requireAuthorityHeartbeatPermission;
        this.requireUsagePermissions = fields.requireUsagePermissions;
        this.maxQuoteVerificationAge = fields.maxQuoteVerificationAge;
        this.reward = fields.reward;
        this.nodeTimeout = fields.nodeTimeout;
    }
    static layout(property) {
        return borsh.struct([
            borsh.u32("allowAuthorityOverrideAfter"),
            borsh.bool("requireAuthorityHeartbeatPermission"),
            borsh.bool("requireUsagePermissions"),
            borsh.u32("maxQuoteVerificationAge"),
            borsh.u32("reward"),
            borsh.u32("nodeTimeout"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new AttestationQueueInitParams({
            allowAuthorityOverrideAfter: obj.allowAuthorityOverrideAfter,
            requireAuthorityHeartbeatPermission: obj.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: obj.requireUsagePermissions,
            maxQuoteVerificationAge: obj.maxQuoteVerificationAge,
            reward: obj.reward,
            nodeTimeout: obj.nodeTimeout,
        });
    }
    static toEncodable(fields) {
        return {
            allowAuthorityOverrideAfter: fields.allowAuthorityOverrideAfter,
            requireAuthorityHeartbeatPermission: fields.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: fields.requireUsagePermissions,
            maxQuoteVerificationAge: fields.maxQuoteVerificationAge,
            reward: fields.reward,
            nodeTimeout: fields.nodeTimeout,
        };
    }
    toJSON() {
        return {
            allowAuthorityOverrideAfter: this.allowAuthorityOverrideAfter,
            requireAuthorityHeartbeatPermission: this.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: this.requireUsagePermissions,
            maxQuoteVerificationAge: this.maxQuoteVerificationAge,
            reward: this.reward,
            nodeTimeout: this.nodeTimeout,
        };
    }
    static fromJSON(obj) {
        return new AttestationQueueInitParams({
            allowAuthorityOverrideAfter: obj.allowAuthorityOverrideAfter,
            requireAuthorityHeartbeatPermission: obj.requireAuthorityHeartbeatPermission,
            requireUsagePermissions: obj.requireUsagePermissions,
            maxQuoteVerificationAge: obj.maxQuoteVerificationAge,
            reward: obj.reward,
            nodeTimeout: obj.nodeTimeout,
        });
    }
    toEncodable() {
        return AttestationQueueInitParams.toEncodable(this);
    }
}
exports.AttestationQueueInitParams = AttestationQueueInitParams;
