"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = exports.fromJSON = exports.fromDecoded = exports.InvalidPermissions = exports.None15 = exports.None14 = exports.None13 = exports.None12 = exports.None11 = exports.None10 = exports.None9 = exports.OutOfFunds = exports.None7 = exports.None6 = exports.None5 = exports.Expired = exports.ErrorKind = exports.NonExecutable = exports.Active = exports.None = void 0;
const borsh = __importStar(require("@coral-xyz/borsh"));
class None {
    static discriminator = 0;
    static kind = "None";
    discriminator = 0;
    kind = "None";
    toJSON() {
        return {
            kind: "None",
        };
    }
    toEncodable() {
        return {
            None: {},
        };
    }
}
exports.None = None;
class Active {
    static discriminator = 1;
    static kind = "Active";
    discriminator = 1;
    kind = "Active";
    toJSON() {
        return {
            kind: "Active",
        };
    }
    toEncodable() {
        return {
            Active: {},
        };
    }
}
exports.Active = Active;
class NonExecutable {
    static discriminator = 2;
    static kind = "NonExecutable";
    discriminator = 2;
    kind = "NonExecutable";
    toJSON() {
        return {
            kind: "NonExecutable",
        };
    }
    toEncodable() {
        return {
            NonExecutable: {},
        };
    }
}
exports.NonExecutable = NonExecutable;
class ErrorKind {
    static discriminator = 3;
    static kind = "Error";
    discriminator = 3;
    kind = "Error";
    toJSON() {
        return {
            kind: "Error",
        };
    }
    toEncodable() {
        return {
            Error: {},
        };
    }
}
exports.ErrorKind = ErrorKind;
class Expired {
    static discriminator = 4;
    static kind = "Expired";
    discriminator = 4;
    kind = "Expired";
    toJSON() {
        return {
            kind: "Expired",
        };
    }
    toEncodable() {
        return {
            Expired: {},
        };
    }
}
exports.Expired = Expired;
class None5 {
    static discriminator = 5;
    static kind = "None5";
    discriminator = 5;
    kind = "None5";
    toJSON() {
        return {
            kind: "None5",
        };
    }
    toEncodable() {
        return {
            None5: {},
        };
    }
}
exports.None5 = None5;
class None6 {
    static discriminator = 6;
    static kind = "None6";
    discriminator = 6;
    kind = "None6";
    toJSON() {
        return {
            kind: "None6",
        };
    }
    toEncodable() {
        return {
            None6: {},
        };
    }
}
exports.None6 = None6;
class None7 {
    static discriminator = 7;
    static kind = "None7";
    discriminator = 7;
    kind = "None7";
    toJSON() {
        return {
            kind: "None7",
        };
    }
    toEncodable() {
        return {
            None7: {},
        };
    }
}
exports.None7 = None7;
class OutOfFunds {
    static discriminator = 8;
    static kind = "OutOfFunds";
    discriminator = 8;
    kind = "OutOfFunds";
    toJSON() {
        return {
            kind: "OutOfFunds",
        };
    }
    toEncodable() {
        return {
            OutOfFunds: {},
        };
    }
}
exports.OutOfFunds = OutOfFunds;
class None9 {
    static discriminator = 9;
    static kind = "None9";
    discriminator = 9;
    kind = "None9";
    toJSON() {
        return {
            kind: "None9",
        };
    }
    toEncodable() {
        return {
            None9: {},
        };
    }
}
exports.None9 = None9;
class None10 {
    static discriminator = 10;
    static kind = "None10";
    discriminator = 10;
    kind = "None10";
    toJSON() {
        return {
            kind: "None10",
        };
    }
    toEncodable() {
        return {
            None10: {},
        };
    }
}
exports.None10 = None10;
class None11 {
    static discriminator = 11;
    static kind = "None11";
    discriminator = 11;
    kind = "None11";
    toJSON() {
        return {
            kind: "None11",
        };
    }
    toEncodable() {
        return {
            None11: {},
        };
    }
}
exports.None11 = None11;
class None12 {
    static discriminator = 12;
    static kind = "None12";
    discriminator = 12;
    kind = "None12";
    toJSON() {
        return {
            kind: "None12",
        };
    }
    toEncodable() {
        return {
            None12: {},
        };
    }
}
exports.None12 = None12;
class None13 {
    static discriminator = 13;
    static kind = "None13";
    discriminator = 13;
    kind = "None13";
    toJSON() {
        return {
            kind: "None13",
        };
    }
    toEncodable() {
        return {
            None13: {},
        };
    }
}
exports.None13 = None13;
class None14 {
    static discriminator = 14;
    static kind = "None14";
    discriminator = 14;
    kind = "None14";
    toJSON() {
        return {
            kind: "None14",
        };
    }
    toEncodable() {
        return {
            None14: {},
        };
    }
}
exports.None14 = None14;
class None15 {
    static discriminator = 15;
    static kind = "None15";
    discriminator = 15;
    kind = "None15";
    toJSON() {
        return {
            kind: "None15",
        };
    }
    toEncodable() {
        return {
            None15: {},
        };
    }
}
exports.None15 = None15;
class InvalidPermissions {
    static discriminator = 16;
    static kind = "InvalidPermissions";
    discriminator = 16;
    kind = "InvalidPermissions";
    toJSON() {
        return {
            kind: "InvalidPermissions",
        };
    }
    toEncodable() {
        return {
            InvalidPermissions: {},
        };
    }
}
exports.InvalidPermissions = InvalidPermissions;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("None" in obj) {
        return new None();
    }
    if ("Active" in obj) {
        return new Active();
    }
    if ("NonExecutable" in obj) {
        return new NonExecutable();
    }
    if ("Error" in obj) {
        return new ErrorKind();
    }
    if ("Expired" in obj) {
        return new Expired();
    }
    if ("None5" in obj) {
        return new None5();
    }
    if ("None6" in obj) {
        return new None6();
    }
    if ("None7" in obj) {
        return new None7();
    }
    if ("OutOfFunds" in obj) {
        return new OutOfFunds();
    }
    if ("None9" in obj) {
        return new None9();
    }
    if ("None10" in obj) {
        return new None10();
    }
    if ("None11" in obj) {
        return new None11();
    }
    if ("None12" in obj) {
        return new None12();
    }
    if ("None13" in obj) {
        return new None13();
    }
    if ("None14" in obj) {
        return new None14();
    }
    if ("None15" in obj) {
        return new None15();
    }
    if ("InvalidPermissions" in obj) {
        return new InvalidPermissions();
    }
    throw new Error("Invalid enum object");
}
exports.fromDecoded = fromDecoded;
function fromJSON(obj) {
    switch (obj.kind) {
        case "None": {
            return new None();
        }
        case "Active": {
            return new Active();
        }
        case "NonExecutable": {
            return new NonExecutable();
        }
        case "Error": {
            return new ErrorKind();
        }
        case "Expired": {
            return new Expired();
        }
        case "None5": {
            return new None5();
        }
        case "None6": {
            return new None6();
        }
        case "None7": {
            return new None7();
        }
        case "OutOfFunds": {
            return new OutOfFunds();
        }
        case "None9": {
            return new None9();
        }
        case "None10": {
            return new None10();
        }
        case "None11": {
            return new None11();
        }
        case "None12": {
            return new None12();
        }
        case "None13": {
            return new None13();
        }
        case "None14": {
            return new None14();
        }
        case "None15": {
            return new None15();
        }
        case "InvalidPermissions": {
            return new InvalidPermissions();
        }
    }
}
exports.fromJSON = fromJSON;
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "None"),
        borsh.struct([], "Active"),
        borsh.struct([], "NonExecutable"),
        borsh.struct([], "Error"),
        borsh.struct([], "Expired"),
        borsh.struct([], "None5"),
        borsh.struct([], "None6"),
        borsh.struct([], "None7"),
        borsh.struct([], "OutOfFunds"),
        borsh.struct([], "None9"),
        borsh.struct([], "None10"),
        borsh.struct([], "None11"),
        borsh.struct([], "None12"),
        borsh.struct([], "None13"),
        borsh.struct([], "None14"),
        borsh.struct([], "None15"),
        borsh.struct([], "InvalidPermissions"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
exports.layout = layout;
