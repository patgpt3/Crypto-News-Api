import type { AggregatorAccount, CreateQueueFeedParams, QueueAccount } from "./accounts/index.js";
import type { AggregatorAccountData } from "./generated/index.js";
import { TransactionInstruction } from "@solana/web3.js";
import { Keypair } from "@solana/web3.js";
import type { RawBuffer } from "@switchboard-xyz/common";
import { BN } from "@switchboard-xyz/common";
export { combineMrEnclaveSets, containsMrEnclave, filterEmptyMrEnclaves, } from "@switchboard-xyz/common";
export declare function handleOptionalPubkeys(ixn: TransactionInstruction): TransactionInstruction;
export declare function loadKeypair(keypairPath: string): Keypair;
/**
 * Create a feed and wait for it to resolve to a static value
 * @param queueAccount - the oracle queue to create the feed on
 * @param params - the aggregator init params and the static value to resolve the feed to
 * @param timeout - the number of milliseconds to wait before timing out
 *
 * Basic usage example:
 *
 * ```ts
 * import { createStaticFeed, QueueAccount, AggregatorAccount } from "@switchboard-xyz/solana.js";
 *
 * let queueAccount: QueueAccount;
 * let staticFeedAccount: AggregatorAccount;
 *
 * [staticFeedAccount] = await createStaticFeed(queueAccount, {
 *    value: 10,
 * });
 * const staticFeedValue: Big = await staticFeedAccount.fetchLatestValue();
 * assert(staticFeedValue.toNumber() === 10, "StaticFeedValueMismatch");
 * ```
 */
export declare function createStaticFeed(queueAccount: QueueAccount, params: Partial<CreateQueueFeedParams> & {
    value: number;
}, timeout?: number): Promise<[AggregatorAccount, AggregatorAccountData]>;
/**
 * Update an existing aggregator that resolves to a new static value, then await the new result
 * @param aggregatorAccount - the aggregator account to modify
 * @param value - the static value the feed will resolve to
 * @param timeout - the number of milliseconds to wait before timing out
 *
 * Basic usage example:
 *
 * ```ts
 * import { updateStaticFeed, AggregatorAccount } from "@switchboard-xyz/solana.js";
 *
 * let staticFeedAccount: AggregatorAccount;
 *
 * const staticFeedState = await updateStaticFeed(staticFeedAccount, 100);
 * staticFeedValue = AggregatorAccount.decodeLatestValue(staticFeedState);
 * assert(staticFeedValue.toNumber() === 100, "StaticFeedValueMismatch");
 * ```
 */
export declare function updateStaticFeed(aggregatorAccount: AggregatorAccount, value: number, timeout?: number): Promise<AggregatorAccountData>;
export declare function parseRawBuffer(rawBuffer: RawBuffer, size?: number): Uint8Array;
export declare function numToBN(num?: number | BN, defaultVal?: number): BN;
export declare function calculatePriorityFee(timestamp: number, roundOpenTimestamp: number, basePriorityFee: number, priorityFeeBump: number, priorityFeeBumpPeriod: number, maxPriorityFeeMultiplier: number): number;
//# sourceMappingURL=utils.d.ts.map