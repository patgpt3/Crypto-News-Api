"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnchorWallet = exports.isVersionedTransaction = exports.SwitchboardProgram = exports.getSwitchboardAttestationProgramId = exports.getSwitchboardProgramId = exports.READ_ONLY_KEYPAIR = exports.SB_ATTESTATION_PID = exports.SB_V2_PID = exports.DEFAULT_SEND_TRANSACTION_OPTIONS = void 0;
const index_js_1 = require("./accounts/index.cjs");
const index_js_2 = require("./generated/index.cjs");
const const_js_1 = require("./const.cjs");
const errors = __importStar(require("./errors.cjs"));
const mint_js_1 = require("./mint.cjs");
const TransactionObject_js_1 = require("./TransactionObject.cjs");
const anchor_1 = require("@coral-xyz/anchor");
const web3_js_1 = require("@solana/web3.js");
const web3_js_2 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common");
exports.DEFAULT_SEND_TRANSACTION_OPTIONS = {
    skipPreflight: false,
    maxRetries: 10,
    skipConfrimation: false,
};
/**
 * Switchboard's V2 Program ID
 */
exports.SB_V2_PID = new web3_js_2.PublicKey("SW1TCH7qEPTdLsDHRgPuMQjbQxKdH2aBStViMFnt64f");
// /**
//  * Switchboard's Attestation Program ID
//  */
// export const SB_ATTESTATION_PID = new PublicKey(
//   "sbattyXrzedoNATfc4L31wC9Mhxsi1BmFhTiN8gDshx"
// );
/**
 * Switchboard's Attestation Program ID
 */
exports.SB_ATTESTATION_PID = new web3_js_2.PublicKey("sbattyXrzedoNATfc4L31wC9Mhxsi1BmFhTiN8gDshx");
/**
 *  A generated keypair that is assigned as the _payerKeypair_ when in read-only mode.
 */
exports.READ_ONLY_KEYPAIR = web3_js_2.Keypair.generate();
/**
 * Returns the Switchboard Program ID for the specified Cluster.
 */
const getSwitchboardProgramId = (cluster) => {
    switch (cluster) {
        case "localnet":
        case "devnet":
        case "mainnet-beta":
            return exports.SB_V2_PID;
        case "testnet":
        default:
            throw new Error(`Switchboard PID not found for cluster (${cluster})`);
    }
};
exports.getSwitchboardProgramId = getSwitchboardProgramId;
/**
 * Returns the Program ID for the Switchboard Attestation Program for the specified Cluster.
 */
const getSwitchboardAttestationProgramId = (cluster) => {
    switch (cluster) {
        case "localnet":
        case "devnet":
        case "mainnet-beta":
            return exports.SB_ATTESTATION_PID;
        case "testnet":
        default:
            throw new Error(`Switchboard Attestation PID not found for cluster (${cluster})`);
    }
};
exports.getSwitchboardAttestationProgramId = getSwitchboardAttestationProgramId;
/**
 * Wrapper class for the Switchboard anchor Program.
 *
 * This class provides an interface to interact with the Switchboard program on the Solana network.
 * It allows you to load the program, create and initialize connection objects, and interact with
 * Switchboard accounts.
 *
 * Basic usage example:
 *
 * ```ts
 * import { Connection } from "@solana/web3.js";
 * import { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';
 *
 * const program = await SwitchboardProgram.load(
 *    "mainnet-beta",
 *    new Connection("https://api.mainnet-beta.solana.com"),
 *    payerKeypair
 * );
 *
 * const txn = new TransactionObject(program.walletPubkey, [], []);
 * const txnSignature = await program.signAndSend(txn);
 * ```
 */
class SwitchboardProgram {
    // The read-only keypair for the Switchboard program.
    static _readOnlyKeypair = exports.READ_ONLY_KEYPAIR;
    // // The anchor program instance.
    // private readonly _program: Program;
    // // The anchor program instance for Switchboard's attestation program.
    // private readonly _attestationProgram: Program;
    /** Lazy load */
    _oracleProgram = undefined;
    /** Lazy load */
    _attestationProgram = undefined;
    /** The Solana cluster to load the Switchboard program for. */
    _cluster = undefined;
    /**
     * The anchor Provider used by this program to connect with the Solana cluster.
     * @return The AnchorProvider instance for the Switchboard Program.
     */
    provider;
    // The pubkey and bump of the Switchboard program state account.
    programState;
    // The pubkey and bump of the Switchboard quote verifier program state account.
    attestationProgramState;
    // The native mint for the Switchboard program.
    mint;
    /**
     * Retrieves the Switchboard V2 Program ID for the currently connected cluster.
     * @return The PublicKey of the Switchboard V2 Program ID.
     */
    oracleProgramId;
    /**
     * Retrieves the Switchboard Attestation Program ID for the currently connected cluster.
     * @return The PublicKey of the Switchboard Attestation Program ID.
     */
    attestationProgramId;
    /**
     * Constructor for the SwitchboardProgram class.
     *
     * @param provider - The AnchorProvider containing the RPC and wallet connection.
     * @param mint - The native mint for the Switchboard program.
     * @param oracleProgramId - The Switchboard V2 Oracle Program ID.
     * @param attestationProgramId - The Switchboard Attestation Program ID.
     */
    constructor(provider, mint = new mint_js_1.NativeMint(provider), oracleProgramId = exports.SB_V2_PID, attestationProgramId = exports.SB_ATTESTATION_PID, 
    /** Lazy loading parameters to pass-through */
    oracleProgram, attestationProgram) {
        this.provider = provider;
        this.mint = mint;
        this.oracleProgramId = oracleProgramId;
        this.attestationProgramId = attestationProgramId;
        if (oracleProgram) {
            this._oracleProgram = oracleProgram;
        }
        if (attestationProgram) {
            this._attestationProgram = attestationProgram;
        }
        // Derive the state account from the seed.
        const [programStatePubkey, programStateBump] = web3_js_2.PublicKey.findProgramAddressSync([Buffer.from("STATE")], oracleProgramId);
        this.programState = {
            publicKey: programStatePubkey,
            bump: programStateBump,
        };
        const [attestationProgramStatePubkey, attestationProgramStateBump] = web3_js_2.PublicKey.findProgramAddressSync([Buffer.from("STATE")], attestationProgramId);
        this.attestationProgramState = {
            publicKey: attestationProgramStatePubkey,
            bump: attestationProgramStateBump,
        };
    }
    /**
     * Create and initialize a {@linkcode SwitchboardProgram} connection object.
     *
     * @dev This method is synchronous but will return a promise for consistency with past be.
     *
     * @param connection - the Solana connection object used to connect to an RPC node.
     *
     * @param payerKeypair - optional, payer keypair used to pay for on-chain transactions.
     *
     * @param oracleProgramId - optional, override the default oracleProgramId.
     *
     * @param attestationProgramId - optional, override the default attestationProgramId.
     *
     * @return the {@linkcode SwitchboardProgram} used to create and interact with Switchboard accounts.
     *
     * Basic usage example:
     *
     * ```ts
     * import { Connection } from "@solana/web3.js";
     * import { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';
     *
     * const program = SwitchboardProgram.from(
     *    new Connection("https://api.mainnet-beta.solana.com"),
     *    payerKeypair
     * );
     *
     * const txn = new TransactionObject(program.walletPubkey, [], []);
     * const txnSignature = await program.signAndSend(txn);
     * ```
     */
    static from(connection, payerKeypair = exports.READ_ONLY_KEYPAIR, oracleProgramId = exports.SB_V2_PID, attestationProgramId = exports.SB_ATTESTATION_PID) {
        const provider = new anchor_1.AnchorProvider(connection, new AnchorWallet(payerKeypair), {});
        const mint = new mint_js_1.NativeMint(provider);
        return new SwitchboardProgram(provider, mint, oracleProgramId, attestationProgramId);
    }
    /**
     * Load the anchor program for the Switchboard.
     *
     * This method fetches the IDL for the Switchboard program, and initializes an anchor program
     * instance using the fetched IDL, provided program ID, and provider.
     *
     * @param connection - The Solana connection object used to connect to an RPC node.
     * @param programId - The programID to load the Anchor program for. The program must have an IDL deployed.
     * @param payerKeypair - Optional payer keypair used to pay for on-chain transactions.
     *
     * @returns The initialized anchor program instance.
     */
    static async loadAnchorProgram(connection, programId, payerKeypair = exports.READ_ONLY_KEYPAIR) {
        const provider = new anchor_1.AnchorProvider(connection, 
        // If no keypair is provided, default to dummy keypair
        new AnchorWallet(payerKeypair ?? SwitchboardProgram._readOnlyKeypair), { commitment: "confirmed" });
        const anchorIdl = await anchor_1.Program.fetchIdl(programId, provider);
        if (!anchorIdl) {
            throw new Error(`Failed to find IDL for ${programId.toBase58()}`);
        }
        const program = new anchor_1.Program(anchorIdl, programId, provider);
        return program;
    }
    /**
     * Create and initialize a {@linkcode SwitchboardProgram} connection object.
     *
     * @dev This method is synchronous but will return a promise for consistency with past be.
     *
     * @param connection - the Solana connection object used to connect to an RPC node.
     * @param payerKeypair - optional, payer keypair used to pay for on-chain transactions.
     * @param oracleProgramId - optional, override the cluster's default oracleProgramId.
     *
     * @return the {@linkcode SwitchboardProgram} used to create and interact with Switchboard accounts.
     *
     * Basic usage example:
     *
     * ```ts
     * import { Connection } from "@solana/web3.js";
     * import { SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';
     *
     * const program = await SwitchboardProgram.load(
     *    new Connection("https://api.mainnet-beta.solana.com"),
     *    payerKeypair
     * );
     *
     * const txn = new TransactionObject(program.walletPubkey, [], []);
     * const txnSignature = await program.signAndSend(txn);
     * ```
     */
    static load = async (connection, payerKeypair = exports.READ_ONLY_KEYPAIR, oracleProgramId = exports.SB_V2_PID, attestationProgramId = exports.SB_ATTESTATION_PID) => {
        const provider = new anchor_1.AnchorProvider(connection, new AnchorWallet(payerKeypair), {});
        const mint = new mint_js_1.NativeMint(provider);
        return new SwitchboardProgram(provider, mint, oracleProgramId, attestationProgramId);
    };
    /**
     * Create and initialize a {@linkcode SwitchboardProgram} connection object.
     *
     * @dev This method is synchronous but will return a promise for consistency with past behavior.
     *
     * @param provider - The anchor provider containing the RPC and wallet connection.
     *
     * @return The {@linkcode SwitchboardProgram} used to create and interact with Switchboard accounts.
     *
     * Basic usage example:
     *
     * ```ts
     * import * as anchor from "@coral-xyz/anchor";
     * import { Connection } from "@solana/web3.js";
     * import { AnchorWallet, SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';
     *
     * const connection = new Connection("https://api.mainnet-beta.solana.com");
     * const provider = new AnchorProvider(
        connection,
        new AnchorWallet(payerKeypair ?? SwitchboardProgram._readOnlyKeypair),
        { commitment: 'confirmed' }
      );
     * const program = await SwitchboardProgram.fromProvider(provider);
     *
     * const txn = new TransactionObject(program.walletPubkey, [], []);
     * const txnSignature = await program.signAndSend(txn);
     * ```
     */
    static fromProvider = async (provider, oracleProgramId = exports.SB_V2_PID, attestationProgramId = exports.SB_ATTESTATION_PID) => {
        const mint = new mint_js_1.NativeMint(provider);
        return new SwitchboardProgram(provider, mint, oracleProgramId, attestationProgramId);
    };
    /**
     * Create and initialize a {@linkcode SwitchboardProgram} connection object.
     *
     * @dev This method is synchronous but will return a promise for consistency with past behavior.
     *
     * @param connection - The Solana connection object used to connect to an RPC node.
     * @param payer - Optional, payer keypair used to pay for on-chain transactions (defaults to READ_ONLY_KEYPAIR).
     * @param oracleProgramId - Optional, override the cluster's default oracleProgramId.
     *
     * @return The {@linkcode SwitchboardProgram} instance used to create and interact with Switchboard accounts.
     *
     * Basic usage example:
     *
     * ```ts
     * import * as anchor from "@coral-xyz/anchor";
     * import { Connection } from "@solana/web3.js";
     * import { AnchorWallet, SwitchboardProgram, TransactionObject } from '@switchboard-xyz/solana.js';
     *
     * const connection = new Connection("https://api.mainnet-beta.solana.com");
     * const program = await SwitchboardProgram.fromConnection(connection);
     * ```
     */
    static fromConnection = async (connection, payer = exports.READ_ONLY_KEYPAIR, oracleProgramId = exports.SB_V2_PID, attestationProgramId = exports.SB_ATTESTATION_PID) => {
        const program = await SwitchboardProgram.load(connection, payer, oracleProgramId, attestationProgramId);
        return program;
    };
    get cluster() {
        if (!this._cluster) {
            this._cluster = this.connection
                .getGenesisHash()
                .then((genesisHash) => {
                switch (genesisHash) {
                    case const_js_1.MAINNET_GENESIS_HASH:
                        return "mainnet-beta";
                    case const_js_1.DEVNET_GENESIS_HASH:
                        return "devnet";
                    default:
                        return "localnet";
                }
            })
                .catch((err) => {
                console.error(err);
                this._cluster = undefined;
                throw err;
            });
        }
        return this._cluster;
    }
    get oracleProgram() {
        if (!this._oracleProgram) {
            this._oracleProgram = this.getOracleProgram().catch((err) => {
                console.error(err);
                this._oracleProgram = undefined;
                throw err;
            });
        }
        return this._oracleProgram;
    }
    async getOracleProgram(retryCount = 3) {
        const anchorIdl = await anchor_1.Program.fetchIdl(this.oracleProgramId, this.provider);
        if (!anchorIdl) {
            throw new Error(`Failed to find IDL for ${this.oracleProgramId.toBase58()}`);
        }
        return new anchor_1.Program(anchorIdl, this.oracleProgramId, this.provider);
    }
    get attestationProgram() {
        if (!this._attestationProgram) {
            this._attestationProgram = this.getAttestationProgram().catch((err) => {
                console.error(err);
                this._attestationProgram = undefined;
                throw err;
            });
        }
        return this._attestationProgram;
    }
    async getAttestationProgram(retryCount = 3) {
        try {
            const anchorIdl = await anchor_1.Program.fetchIdl(this.attestationProgramId, this.provider);
            if (!anchorIdl) {
                throw new Error(`Failed to find IDL for ${this.attestationProgramId.toBase58()}`);
            }
            return new anchor_1.Program(anchorIdl, this.attestationProgramId, this.provider);
        }
        catch (error) {
            if (0 >= retryCount) {
                throw error;
            }
            return this.getAttestationProgram(retryCount - 1);
        }
    }
    async getGitVersion() {
        const messageV0 = new web3_js_2.TransactionMessage({
            payerKey: this.walletPubkey,
            instructions: [
                await (await this.oracleProgram).methods
                    .viewVersion()
                    .accounts({})
                    .instruction(),
            ],
            recentBlockhash: (await this.connection.getLatestBlockhash()).blockhash,
        }).compileToLegacyMessage();
        const simulationResult = await this.connection.simulateTransaction(new web3_js_1.VersionedTransaction(messageV0), { sigVerify: false });
        const logs = (simulationResult.value?.logs ?? []).join("\n");
        const version = extractVersion(logs);
        if (version) {
            return version;
        }
        console.error(logs);
        throw new Error(`Failed to yield the git version in the view_version simulation result`);
    }
    async getAttestationGitVersion() {
        const messageV0 = new web3_js_2.TransactionMessage({
            payerKey: this.walletPubkey,
            instructions: [
                await (await this.attestationProgram).methods
                    .viewVersion()
                    .accounts({})
                    .instruction(),
            ],
            recentBlockhash: (await this.connection.getLatestBlockhash()).blockhash,
        }).compileToLegacyMessage();
        const simulationResult = await this.connection.simulateTransaction(new web3_js_1.VersionedTransaction(messageV0), { sigVerify: false });
        console.error(simulationResult);
        const logs = (simulationResult.value?.logs ?? []).join("\n");
        const version = extractVersion(logs);
        if (version) {
            return version;
        }
        console.error(logs);
        throw new Error(`Failed to yield the git version in the view_version simulation result`);
    }
    /**
     * Retrieves the Switchboard V2 Program IDL.
     * @return A promise that resolves to the IDL of the Switchboard V2 Program.
     */
    get oracleProgramIdl() {
        return this.oracleProgram.then((program) => program.idl);
    }
    /**
     * Retrieves the Switchboard Attestation Program IDL.
     * @return A promise that resolves to the IDL of the Switchboard Attestation Program.
     */
    get attestationIdl() {
        return this.attestationProgram.then((program) => program.idl);
    }
    /**
     * Retrieves the Connection used by this program to connect with the Solana cluster.
     * @return The Connection instance for the Switchboard Program.
     */
    get connection() {
        return this.provider.connection;
    }
    /**
     * Retrieves the Wallet used by this program.
     * @return The AnchorWallet instance for the Switchboard Program.
     */
    get wallet() {
        return this.provider.wallet;
    }
    /**
     * Retrieves the wallet's PublicKey.
     * @return The PublicKey of the wallet.
     */
    get walletPubkey() {
        return this.wallet.payer.publicKey;
    }
    /**
     * Returns a new instance of the SwitchboardProgram class for a new payer keypair
     * @return A new instance of the SwitchboardProgram class
     */
    newWithPayer(payer) {
        const newProvider = new anchor_1.AnchorProvider(this.connection, new AnchorWallet(payer), this.provider.opts);
        return new SwitchboardProgram(newProvider, this.mint, this.oracleProgramId, this.attestationProgramId, this._oracleProgram, this._attestationProgram);
    }
    /**
     * Checks if the program is read-only.
     * @return A boolean indicating if the SwitchboardProgram instance is read-only.
     */
    get isReadOnly() {
        return (this.provider.publicKey.toBase58() ===
            SwitchboardProgram._readOnlyKeypair.publicKey.toBase58());
    }
    /**
     * Verifies that a payer keypair has been supplied to the {@linkcode SwitchboardProgram}.
     * Throws an error if the program is read-only.
     */
    verifyPayer() {
        if (this.isReadOnly) {
            throw new errors.SwitchboardProgramReadOnlyError();
        }
    }
    /**
     * Verifies that a new keypair has been provided and the corresponding account does not already exist.
     *
     * **NOTE:** Creating new accounts without this check may prevent the ability to withdraw any existing funds.
     *
     * @param keypair - The Keypair to be verified.
     * @throws Will throw an error if the account for the keypair already exists.
     */
    async verifyNewKeypair(keypair) {
        const accountInfo = await this.connection.getAccountInfo(keypair.publicKey);
        if (accountInfo) {
            throw new errors.ExistingKeypair();
        }
    }
    /**
     * Verifies that a new keypair has been provided and the corresponding account does not already exist.
     *
     * **NOTE:** Creating new accounts without this check may prevent the ability to withdraw any existing funds.
     *
     * @param keypair - The Keypair to be verified.
     * @throws Will throw an error if the account for the keypair already exists.
     */
    async verifyNewKeypairs(...keypairs) {
        const accounts = await this.connection.getMultipleAccountsInfo(keypairs.map((k) => k.publicKey));
        for (const [n, account] of accounts.entries()) {
            if (account) {
                throw new errors.ExistingKeypair();
            }
        }
    }
    /**
     * Retrieves the account namespace for the Switchboard V2 Program.
     * @return The AccountNamespace instance for the Switchboard V2 Program.
     */
    get oracleProgramAccount() {
        return this.oracleProgram.then((program) => program.account);
    }
    /**
     * Retrieves the account namespace for the Switchboard Attestation Program.
     * @return The AccountNamespace instance for the Switchboard Attestation Program.
     */
    get attestationAccount() {
        return this.attestationProgram.then((program) => program.account);
    }
    /**
     * Load the Switchboard Labs permissionless Queue for either devnet or mainnet. The permissionless queue has the following permissions:
     *  - unpermissionedFeedsEnabled: True
     *  - unpermissionedVrfEnabled: True
     *  - enableBufferRelayers: False
     *
     * **Note:** {@linkcode AggregatorAccount}s and {@linkcode VrfAccount}s do not require permissions to join this queue. {@linkcode BufferRelayerAccount}s are disabled.
     */
    async loadPermissionless() {
        // TODO: make this load from common network configs
        throw new Error(`Not implemented yet`);
    }
    /**
     * Load the Switchboard Labs permissionled Queue for either devnet or mainnet. The permissioned queue has the following permissions:
     *  - unpermissionedFeedsEnabled: False
     *  - unpermissionedVrfEnabled: False
     *  - enableBufferRelayers: False
     *
     * **Note:** The queue authority must grant {@linkcode AggregatorAccount}s PERMIT_ORACLE_QUEUE_USAGE and {@linkcode VrfAccount}s PERMIT_VRF_REQUESTS permissions before joining the queue and requesting oracle updates. {@linkcode BufferRelayerAccount}s are disabled.
     */
    async loadPermissioned() {
        // TODO: make this load from common network configs
        throw new Error(`Not implemented yet`);
    }
    /**
     * Adds an event listener for the specified AnchorEvent, allowing consumers to monitor the chain for events
     * such as AggregatorOpenRound, VrfRequestRandomness, and AggregatorSaveResult.
     *
     * @param eventName - The name of the event to listen for.
     * @param callback - A callback function to handle the event data, slot, and signature.
     * @return A unique listener ID that can be used to remove the event listener.
     */
    async addEventListener(eventName, callback) {
        return (await this.oracleProgram).addEventListener(eventName, callback);
    }
    /**
     * Removes the event listener with the specified listener ID.
     *
     * @param listenerId - The unique ID of the event listener to be removed.
     */
    async removeEventListener(listenerId) {
        return await (await this.oracleProgram).removeEventListener(listenerId);
    }
    /**
     * Adds an event listener for the specified AnchorEvent, allowing consumers to monitor the chain for events
     * emitted from Switchboard's attestation program.
     *
     * @param eventName - The name of the event to listen for.
     * @param callback - A callback function to handle the event data, slot, and signature.
     * @return A unique listener ID that can be used to remove the event listener.
     */
    async addAttestationEventListener(eventName, callback) {
        return (await this.attestationProgram).addEventListener(eventName, callback);
    }
    /**
     * Removes the event listener with the specified listener ID.
     *
     * @param listenerId - The unique ID of the event listener to be removed.
     */
    async removeAttestationEventListener(listenerId) {
        return await (await this.attestationProgram).removeEventListener(listenerId);
    }
    async signAndSendAll(txns, opts = exports.DEFAULT_SEND_TRANSACTION_OPTIONS, txnOptions, delay = 0) {
        const txnSignatures = await TransactionObject_js_1.TransactionObject.signAndSendAll(this.provider, txns, opts, txnOptions, delay);
        return txnSignatures;
    }
    async signAndSend(txn, opts = exports.DEFAULT_SEND_TRANSACTION_OPTIONS, txnOptions) {
        const txnSignature = await txn.signAndSend(this.provider, opts, txnOptions);
        return txnSignature;
    }
    async getProgramJobAccounts() {
        const accountInfos = await this.connection
            .getProgramAccounts(this.oracleProgramId, {
            filters: [
                {
                    memcmp: {
                        offset: 0,
                        bytes: anchor_1.utils.bytes.bs58.encode(index_js_2.JobAccountData.discriminator),
                    },
                },
            ],
        })
            .then((values) => {
            return values.filter(Boolean);
        });
        const jobs = accountInfos
            .map((job) => {
            const jobAccount = new index_js_1.JobAccount(this, job.pubkey);
            const state = index_js_2.JobAccountData.decode(job.account.data);
            let oracleJob;
            try {
                oracleJob = common_1.OracleJob.decodeDelimited(state.data);
            }
            catch {
                return undefined;
            }
            return {
                account: jobAccount,
                state: state,
                job: oracleJob,
            };
        })
            .filter(Boolean);
        return new Map(jobs.map((job) => [job.state.data, job]));
    }
    async getProgramAccounts() {
        const accountInfos = await this.connection.getProgramAccounts(this.oracleProgramId);
        // buffer - [42, 55, 46, 46, 45, 52, 78, 78]
        // bufferRelayer - [50, 35, 51, 115, 169, 219, 158, 52]
        // lease - [55, 254, 208, 251, 164, 44, 150, 50]
        // permissions - [77, 37, 177, 164, 38, 39, 34, 109]
        // slidingResult - [91, 4, 83, 187, 102, 216, 153, 254]
        // vrf - [101, 35, 62, 239, 103, 151, 6, 18]
        // crank - [111, 81, 146, 73, 172, 180, 134, 209]
        // job - [124, 69, 101, 195, 229, 218, 144, 63]
        // oracles - [128, 30, 16, 241, 170, 73, 55, 54]
        // sbState - [159, 42, 192, 191, 139, 62, 168, 28]
        // queue - [164, 207, 200, 51, 199, 113, 35, 109]
        // aggregator - [217, 230, 65, 101, 201, 162, 27, 125]
        const discriminatorMap = accountInfos.reduce((map, account) => {
            const discriminator = account.account.data
                .slice(0, anchor_1.DISCRIMINATOR_SIZE)
                .toString("utf-8");
            const accounts = map.get(discriminator) ?? [];
            accounts.push(account);
            map.set(discriminator, accounts);
            return map;
        }, new Map());
        function decodeAccounts(accounts, decode) {
            return accounts.reduce((map, account) => {
                try {
                    const decoded = decode(account.account.data);
                    map.set(account.pubkey.toBase58(), decoded);
                    // eslint-disable-next-line no-empty
                }
                catch { }
                return map;
            }, new Map());
        }
        const aggregators = decodeAccounts(discriminatorMap.get(index_js_2.AggregatorAccountData.discriminator.toString("utf-8")) ?? [], index_js_2.AggregatorAccountData.decode);
        // TODO: Use aggregator.historyBuffer, crank.dataBuffer, queue.dataBuffer to filter these down and decode
        const buffers = (discriminatorMap.get(index_js_1.BUFFER_DISCRIMINATOR.toString("utf-8")) ?? []).reduce((map, buffer) => {
            map.set(buffer.pubkey.toBase58(), buffer.account.data);
            return map;
        }, new Map());
        const bufferRelayers = decodeAccounts(discriminatorMap.get(index_js_2.BufferRelayerAccountData.discriminator.toString("utf-8")) ?? [], index_js_2.BufferRelayerAccountData.decode);
        const cranks = decodeAccounts(discriminatorMap.get(index_js_2.CrankAccountData.discriminator.toString("utf-8")) ??
            [], index_js_2.CrankAccountData.decode);
        const jobs = decodeAccounts(discriminatorMap.get(index_js_2.JobAccountData.discriminator.toString("utf-8")) ??
            [], index_js_2.JobAccountData.decode);
        const leases = decodeAccounts(discriminatorMap.get(index_js_2.LeaseAccountData.discriminator.toString("utf-8")) ??
            [], index_js_2.LeaseAccountData.decode);
        const oracles = decodeAccounts(discriminatorMap.get(index_js_2.OracleAccountData.discriminator.toString("utf-8")) ??
            [], index_js_2.OracleAccountData.decode);
        const permissions = decodeAccounts(discriminatorMap.get(index_js_2.PermissionAccountData.discriminator.toString("utf-8")) ?? [], index_js_2.PermissionAccountData.decode);
        const programState = decodeAccounts(discriminatorMap.get(index_js_2.SbState.discriminator.toString("utf-8")) ?? [], index_js_2.SbState.decode);
        const queues = decodeAccounts(discriminatorMap.get(index_js_2.OracleQueueAccountData.discriminator.toString("utf-8")) ?? [], index_js_2.OracleQueueAccountData.decode);
        const slidingResult = decodeAccounts(discriminatorMap.get(index_js_2.SlidingResultAccountData.discriminator.toString("utf-8")) ?? [], index_js_2.SlidingResultAccountData.decode);
        const vrfs = decodeAccounts(discriminatorMap.get(index_js_2.VrfAccountData.discriminator.toString("utf-8")) ??
            [], index_js_2.VrfAccountData.decode);
        return {
            aggregators,
            buffers,
            bufferRelayers,
            cranks,
            jobs,
            leases,
            oracles,
            permissions,
            programState,
            slidingResult,
            queues,
            vrfs,
        };
    }
    static getAccountType(accountInfo) {
        const discriminator = accountInfo.data
            .slice(0, anchor_1.DISCRIMINATOR_SIZE)
            .toString("utf-8");
        const accountType = index_js_1.DISCRIMINATOR_MAP.get(discriminator);
        if (accountType) {
            return accountType;
        }
        return null;
    }
}
exports.SwitchboardProgram = SwitchboardProgram;
/**
 * Check if a transaction object is a VersionedTransaction or not
 *
 * @param tx
 * @returns bool
 */
const isVersionedTransaction = (tx) => {
    return "version" in tx;
};
exports.isVersionedTransaction = isVersionedTransaction;
class AnchorWallet {
    payer;
    constructor(payer) {
        this.payer = payer;
    }
    get publicKey() {
        return this.payer.publicKey;
    }
    async signTransaction(tx) {
        if ((0, exports.isVersionedTransaction)(tx)) {
            tx.sign([this.payer]);
        }
        else {
            tx.partialSign(this.payer);
        }
        return tx;
    }
    async signAllTransactions(txs) {
        return txs.map((t) => {
            if ((0, exports.isVersionedTransaction)(t)) {
                t.sign([this.payer]);
            }
            else {
                t.partialSign(this.payer);
            }
            return t;
        });
    }
}
exports.AnchorWallet = AnchorWallet;
function extractVersion(input) {
    const regex = /VERSION: (\S+)/;
    const match = input.match(regex);
    return match ? match[1] : null;
}
