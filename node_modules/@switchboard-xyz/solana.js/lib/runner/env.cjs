"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnv = void 0;
const SwitchboardProgram_js_1 = require("../SwitchboardProgram.cjs");
const dotenv_1 = __importDefault(require("dotenv"));
const zod_1 = __importDefault(require("zod"));
const zod_error_1 = require("zod-error");
dotenv_1.default.config();
const envSchema = zod_1.default.object({
    NODE_ENV: zod_1.default
        .enum(["development", "test", "production"])
        .default("development"),
    IS_SIMULATION: zod_1.default.coerce.boolean().default(false),
    SWITCHBOARD: zod_1.default.string().default(SwitchboardProgram_js_1.SB_ATTESTATION_PID.toBase58()),
    FUNCTION_KEY: zod_1.default.string(),
    PAYER: zod_1.default.string(),
    VERIFIER: zod_1.default.string(),
    REWARD_RECEIVER: zod_1.default.string(),
    FUNCTION_DATA: zod_1.default.string().optional(),
    VERIFIER_ENCLAVE_SIGNER: zod_1.default.string().optional(),
    QUEUE_AUTHORITY: zod_1.default.string().optional(),
    FUNCTION_REQUEST_KEY: zod_1.default.string().optional(),
    FUNCTION_REQUEST_DATA: zod_1.default.string().optional(),
    CLUSTER: zod_1.default
        .enum(["mainnet-beta", "devnet", "localnet"])
        .default("mainnet-beta"),
});
const ENV = envSchema.parse(process.env);
const getEnvIssues = () => {
    const result = envSchema.safeParse(process.env);
    if (!result.success)
        return result.error.issues;
    const env = envSchema.parse(process.env);
};
function getEnv() {
    const issues = getEnvIssues();
    if (issues) {
        console.error("Invalid environment variables, check the errors below!");
        console.error((0, zod_error_1.generateErrorMessage)(issues, {
            delimiter: { error: "\\n" },
        }));
        process.exit(-1);
    }
    return ENV;
}
exports.getEnv = getEnv;
// export interface SolanaFunctionEnvironment {
//   switchboard: PublicKey;
//   functionKey: PublicKey;
//   payer: PublicKey;
//   verifier: PublicKey;
//   rewardReceiver: PublicKey;
//   functionData: FunctionAccountData;
//   verifierEnclaveSigner: PublicKey;
//   queueAuthority: PublicKey;
//   functionRequestKey: PublicKey;
//   functionRequestData: FunctionRequestAccountData;
//   cluster: Omit<Cluster, "testnet"> | "localnet";
// }
// export async function loadEnv(): Promise<SolanaFunctionEnvironment> {
//   const issues = getEnvIssues();
//   if (issues) {
//     console.error("Invalid environment variables, check the errors below!");
//     console.error(
//       generateErrorMessage(issues, {
//         delimiter: { error: "\\n" },
//       })
//     );
//     process.exit(-1);
//   }
//   const env = envSchema.parse(process.env);
//   if (env.IS_SIMULATION) {
//     // idk, handle this differently somehow
//   }
//   const cluster = env.CLUSTER;
//   const switchboard = env.SWITCHBOARD
//     ? new PublicKey(env.SWITCHBOARD)
//     : SB_ATTESTATION_PID;
//   const payer = new PublicKey(env.PAYER);
//   const verifier = new PublicKey(env.VERIFIER);
//   const functionKey = new PublicKey(env.FUNCTION_KEY);
// }
