import { FunctionAccountData } from "../generated/attestation-program/accounts/FunctionAccountData.js";
import { FunctionRequestAccountData } from "../generated/attestation-program/accounts/FunctionRequestAccountData.js";
import { SwitchboardProgram } from "../SwitchboardProgram.js";
import type { FunctionResult } from "./functionResult.js";
import type { AnchorProvider } from "@coral-xyz/anchor";
import type { Cluster, Commitment, TransactionInstruction } from "@solana/web3.js";
import { Connection, PublicKey } from "@solana/web3.js";
export interface SolanaFunctionEnvironment {
    isSimulation?: boolean;
    cluster: Omit<Cluster, "testnet"> | "localnet";
    switchboard: PublicKey;
    functionKey: PublicKey;
    payer: PublicKey;
    verifier: PublicKey;
    rewardReceiver: PublicKey;
    queueAuthority?: PublicKey;
    verifierEnclaveSigner?: PublicKey;
    functionData?: Promise<FunctionAccountData>;
    functionRequestKey?: PublicKey;
    functionRequestData?: Promise<FunctionRequestAccountData>;
}
export declare class FunctionRunner {
    readonly program: SwitchboardProgram;
    private env;
    private readonly enclaveSigner;
    private readonly start;
    private constructor();
    isSimulation(): boolean;
    get signer(): PublicKey;
    get connection(): Connection;
    get payer(): PublicKey;
    get verifier(): PublicKey;
    get rewardReceiver(): PublicKey;
    get provider(): AnchorProvider;
    get functionKey(): PublicKey;
    get functionData(): Promise<FunctionAccountData>;
    get functionRequestKey(): PublicKey;
    get functionRequestData(): Promise<FunctionRequestAccountData>;
    static create(rpcEndpoint?: string, commitment?: Commitment): FunctionRunner;
    private loadQueueAuthority;
    private loadVerifierEnclaveSigner;
    getResult(ixs?: TransactionInstruction[], errorCode?: number): Promise<FunctionResult>;
    emit(ixs?: TransactionInstruction[], errorCode?: number): Promise<void>;
    emitError(errorCode: 0): Promise<void>;
    private generateQuote;
    private buildFnVerifyIxn;
    private buildFnRequestVerifyIxn;
}
//# sourceMappingURL=runner.d.ts.map