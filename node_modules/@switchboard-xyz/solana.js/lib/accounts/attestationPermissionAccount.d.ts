import * as types from "../generated/attestation-program/index.js";
import type { SwitchboardProgram } from "../SwitchboardProgram.js";
import type { SendTransactionObjectOptions, TransactionObjectOptions } from "../TransactionObject.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import type { Keypair, TransactionSignature } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
/**
 *  Parameters for initializing an {@linkcode AttestationPermissionAccount}
 */
export interface AttestationPermissionAccountInitParams {
    granter: PublicKey;
    grantee: PublicKey;
    authority?: PublicKey;
}
/**
 *  Parameters for setting the permissions of a {@linkcode AttestationPermissionAccount}
 */
export interface AttestationPermissionSetParams {
    enable: boolean;
    /**
     *  The {@linkcode types.SwitchboardPermission} to set for the grantee.
     */
    permission: types.SwitchboardAttestationPermissionKind;
    /**
     *  The authority for the queue
     *
     *  @default payer
     */
    queueAuthority?: Keypair;
    queue: PublicKey;
    enclave: PublicKey;
}
/**
 *  Account type dictating the level of permissions between a granter and a grantee.
 *
 *  Data: {@linkcode types.AttestationPermissionAccountData}
 */
export declare class AttestationPermissionAccount extends Account<types.AttestationPermissionAccountData> {
    static accountName: string;
    /**
     *  Load an existing PermissionAccount with its current on-chain state
     */
    static load(program: SwitchboardProgram, authority: PublicKey | string, granter: PublicKey | string, grantee: PublicKey | string): Promise<[
        AttestationPermissionAccount,
        types.AttestationPermissionAccountData
    ]>;
    /**
     *  Loads an AttestationPermissionAccount from the expected PDA seed format.
     *
     *  @param program The Switchboard program for the current connection.
     *  @param authority The authority pubkey to be incorporated into the account seed.
     *  @param granter The granter pubkey to be incorporated into the account seed.
     *  @param grantee The grantee pubkey to be incorporated into the account seed.
     *
     *  @return AttestationPermissionAccount and PDA bump.
     */
    static fromSeed(program: SwitchboardProgram, authority: PublicKey, granter: PublicKey, grantee: PublicKey): AttestationPermissionAccount;
    static createInstruction(program: SwitchboardProgram, payer: PublicKey, params: AttestationPermissionAccountInitParams, options?: TransactionObjectOptions): [AttestationPermissionAccount, TransactionObject];
    static create(program: SwitchboardProgram, params: AttestationPermissionAccountInitParams, options?: SendTransactionObjectOptions): Promise<[AttestationPermissionAccount, TransactionSignature]>;
    /**
     *  Retrieve and decode the {@linkcode types.AttestationPermissionAccountData} stored in this account.
     */
    loadData(): Promise<types.AttestationPermissionAccountData>;
    /**
     *  Produces the instruction to set the permission in the AttestationPermissionAccount
     */
    setInstruction(payer: PublicKey, params: AttestationPermissionSetParams, options?: TransactionObjectOptions): TransactionObject;
    /**
     *  Sets the permission in the AttestationPermissionAccount
     */
    set(params: AttestationPermissionSetParams, options?: SendTransactionObjectOptions): Promise<string>;
}
//# sourceMappingURL=attestationPermissionAccount.d.ts.map