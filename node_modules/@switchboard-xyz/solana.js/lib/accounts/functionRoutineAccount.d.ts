/// <reference types="node" resolution-mode="require"/>
import * as types from "../generated/attestation-program/index.js";
import type { SwitchboardProgram } from "../SwitchboardProgram.js";
import type { SendTransactionObjectOptions, TransactionObjectOptions } from "../TransactionObject.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import type { FunctionAccount } from "./functionAccount.js";
import type { SwitchboardWalletFundParams } from "./switchboardWallet.js";
import { SwitchboardWallet } from "./switchboardWallet.js";
import type { PublicKey, TransactionInstruction, TransactionSignature } from "@solana/web3.js";
import { Keypair } from "@solana/web3.js";
import type { RawBuffer } from "@switchboard-xyz/common";
import { BN } from "@switchboard-xyz/common";
/**
 *  Parameters for initializing a {@linkcode FunctionRoutineAccount}
 */
export interface FunctionRoutineAccountInitParams {
    name?: string;
    metadata?: string;
    bounty?: number;
    schedule: string;
    functionAccount: FunctionAccount;
    maxContainerParamsLen?: number;
    containerParams?: Buffer;
    /**
     *  A keypair to be used to address this account.
     *
     *  @default Keypair.generate()
     */
    keypair?: Keypair;
    authority?: PublicKey;
}
/**
 *  Parameters for setting a {@linkcode FunctionRoutineAccount} config
 */
export interface FunctionRoutineSetConfigParams {
    name?: string;
    metadata?: string;
    bounty?: number;
    schedule?: string;
    containerParams?: string;
    appendContainerParams?: boolean;
    authority?: Keypair;
}
export interface FunctionRoutineVerifyParams {
    observedTime?: number;
    isFailure?: boolean;
    mrEnclave: RawBuffer;
    nextAllowedTimestamp: number | BN;
    containerParamsHash: RawBuffer;
    functionEnclaveSigner: PublicKey;
    function: PublicKey;
    functionEscrow: PublicKey;
    verifierQuote: PublicKey;
    verifierEnclaveSigner: PublicKey;
    verifierPermission: PublicKey;
    attestationQueue: PublicKey;
    receiver: PublicKey;
    escrowWallet: PublicKey;
}
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.FunctionRoutineAccountData}
 */
export declare class FunctionRoutineAccount extends Account<types.FunctionRoutineAccountData> {
    static accountName: string;
    private switchboardWallet?;
    /**
     *  Retrieve and decode the {@linkcode types.FunctionRoutineAccountData} stored in this account.
     */
    loadData(): Promise<types.FunctionRoutineAccountData>;
    private getSwitchboardWallet;
    static load(program: SwitchboardProgram, address: PublicKey | string): Promise<[FunctionRoutineAccount, types.FunctionRoutineAccountData]>;
    static createInstruction(program: SwitchboardProgram, payer: PublicKey, params: FunctionRoutineAccountInitParams, wallet?: SwitchboardWallet, options?: TransactionObjectOptions): Promise<[FunctionRoutineAccount, TransactionObject]>;
    static create(program: SwitchboardProgram, params: FunctionRoutineAccountInitParams, wallet?: SwitchboardWallet, options?: SendTransactionObjectOptions): Promise<[FunctionRoutineAccount, TransactionSignature]>;
    getBalance(): Promise<number>;
    getBalanceBN(): Promise<BN>;
    setConfigInstruction(payer: PublicKey, params: FunctionRoutineSetConfigParams, options?: TransactionObjectOptions): Promise<TransactionObject>;
    setConfig(params: FunctionRoutineSetConfigParams, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    fundInstruction(payer: PublicKey, params: SwitchboardWalletFundParams, options?: TransactionObjectOptions): Promise<TransactionObject>;
    fund(params: SwitchboardWalletFundParams, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    withdrawInstruction(payer: PublicKey, amount: number, destinationWallet?: PublicKey, options?: TransactionObjectOptions): Promise<TransactionObject>;
    withdraw(amount: number, destinationWallet?: PublicKey, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    verifyIxn(params: FunctionRoutineVerifyParams): TransactionInstruction;
}
//# sourceMappingURL=functionRoutineAccount.d.ts.map