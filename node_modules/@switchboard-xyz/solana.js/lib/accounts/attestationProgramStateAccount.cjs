"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationProgramStateAccount = void 0;
const errors = __importStar(require("../errors.cjs"));
const types = __importStar(require("../generated/attestation-program/index.cjs"));
const TransactionObject_js_1 = require("../TransactionObject.cjs");
const account_js_1 = require("./account.cjs");
const web3_js_1 = require("@solana/web3.js");
/**
 * Account type representing Switchboard global program state.
 *
 * Data: {@linkcode types.AttestationProgramState}
 */
class AttestationProgramStateAccount extends account_js_1.Account {
    static accountName = "State";
    static size = 1128;
    /**
     * Finds the {@linkcode AttestationProgramStateAccount} from the static seed from which it was generated.
     * @return AttestationProgramStateAccount and PDA bump tuple.
     */
    static fromSeed(program) {
        const [publicKey, bump] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("STATE")], program.attestationProgramId);
        return [new AttestationProgramStateAccount(program, publicKey), bump];
    }
    /** Load the AttestationProgramStateAccount with its current on-chain state */
    static async load(program, publicKey) {
        const account = new AttestationProgramStateAccount(program, typeof publicKey === "string" ? new web3_js_1.PublicKey(publicKey) : publicKey);
        const state = await account.loadData();
        return [account, state];
    }
    /**
     * Retrieve and decode the {@linkcode types.AttestationProgramState} stored in this account.
     */
    async loadData() {
        const data = await types.AttestationProgramState.fetch(this.program, this.publicKey);
        if (data === null)
            throw new errors.AccountNotFoundError("Attestation Program State", this.publicKey);
        return data;
    }
    /**
     * Retrieves the {@linkcode AttestationProgramStateAccount}, creates it if it doesn't exist;
     */
    static async getOrCreate(program) {
        const [account, bump, txn] = await AttestationProgramStateAccount.getOrCreateInstructions(program, program.walletPubkey);
        if (txn) {
            const txnSignature = await program.signAndSend(txn);
            return [account, bump, txnSignature];
        }
        return [account, bump, undefined];
    }
    static async getOrCreateInstructions(program, payer) {
        const [account, bump] = AttestationProgramStateAccount.fromSeed(program);
        try {
            await account.loadData();
            return [account, bump, undefined];
        }
        catch (e) {
            const stateInit = types.stateInit(program, { params: {} }, {
                state: account.publicKey,
                payer: payer,
                systemProgram: web3_js_1.SystemProgram.programId,
            });
            const programInit = new TransactionObject_js_1.TransactionObject(payer, [stateInit], []);
            return [account, bump, programInit];
        }
    }
}
exports.AttestationProgramStateAccount = AttestationProgramStateAccount;
