import { type SwitchboardProgram } from "../SwitchboardProgram.js";
import type { SendTransactionObjectOptions, TransactionObjectOptions } from "../TransactionObject.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import * as spl from "@solana/spl-token";
import type { Keypair, TransactionSignature } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
import type { BN } from "@switchboard-xyz/common";
export interface SwitchboardWalletTransferParams {
    funderTokenWallet?: PublicKey;
    funderAuthority?: Keypair;
    transferAmount?: number;
    resources?: Array<PublicKey>;
}
export interface SwitchboardWalletWrapParams {
    funderAuthority?: Keypair;
    wrapAmount?: number;
}
export type SwitchboardWalletFundParams = SwitchboardWalletTransferParams & SwitchboardWalletWrapParams;
export interface SwitchboardWalletState {
    bump: number;
    initialized: number;
    mint: PublicKey;
    attestationQueue: PublicKey;
    authority: PublicKey;
    name: Array<number>;
    resourceCount: number;
    withdrawAuthority: PublicKey;
    tokenWallet: PublicKey;
    resources: Array<PublicKey>;
    resourcesMaxLen: number;
    ebuf: Array<number>;
}
export type SwitchboardWalletWithEscrow = SwitchboardWalletState & {
    tokenWalletAccount: spl.Account;
};
/**
 * Account holding a Verifiable Random Function result with a callback instruction for consuming on-chain pseudo-randomness.
 *
 * Data: {@linkcode types.SwitchboardWalletData}
 * Result: [u8;32]
 */
export declare class SwitchboardWallet extends Account<SwitchboardWalletWithEscrow> {
    static accountName: string;
    get tokenWallet(): PublicKey;
    static parseName(name: string | PublicKey | Uint8Array): Uint8Array;
    static fromSeed(program: SwitchboardProgram, attestationQueue: PublicKey, authority: PublicKey, name: string | PublicKey | Uint8Array): SwitchboardWallet;
    loadData(): Promise<SwitchboardWalletWithEscrow>;
    static load(program: SwitchboardProgram, attestationQueue: PublicKey, authority: PublicKey, name: string | PublicKey): Promise<[SwitchboardWallet, SwitchboardWalletWithEscrow | undefined]>;
    getBalance(): Promise<number>;
    getBalanceBN(): Promise<BN>;
    static createInstruction(program: SwitchboardProgram, payer: PublicKey, attestationQueue: PublicKey, authority: PublicKey, name: string | PublicKey, maxLen?: number, options?: TransactionObjectOptions): Promise<[SwitchboardWallet, TransactionObject]>;
    static create(program: SwitchboardProgram, attestationQueue: PublicKey, authority: PublicKey, name: string | PublicKey, maxLen?: number, options?: SendTransactionObjectOptions): Promise<[SwitchboardWallet, TransactionSignature]>;
    fundInstruction(payer: PublicKey, params: SwitchboardWalletFundParams, options?: TransactionObjectOptions): Promise<TransactionObject>;
    fund(params: SwitchboardWalletFundParams, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    wrapInstruction(payer: PublicKey, amount: number, options?: TransactionObjectOptions): Promise<TransactionObject>;
    wrap(amount: number, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    withdrawInstruction(payer: PublicKey, amount: number, destinationWallet?: PublicKey, options?: TransactionObjectOptions): Promise<TransactionObject>;
    withdraw(amount: number, destinationWallet?: PublicKey, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
}
//# sourceMappingURL=switchboardWallet.d.ts.map