import { Account } from "../accounts/account.js";
import * as errors from "../errors.js";
import * as types from "../generated/attestation-program/index.js";
import { TransactionObject } from "../TransactionObject.js";
import { parseRawBuffer } from "../utils.js";
import { FunctionAccount } from "./index.js";
import * as spl from "@solana/spl-token";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import { Keypair, SystemProgram } from "@solana/web3.js";
import { BN, parseRawMrEnclave, sleep } from "@switchboard-xyz/common";
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.FunctionRequestAccountData}
 */
export class FunctionRequestAccount extends Account {
    static accountName = "FunctionRequestAccountData";
    /**
     *  Retrieve and decode the {@linkcode types.FunctionRequestAccountData} stored in this account.
     */
    async loadData() {
        const data = await types.FunctionRequestAccountData.fetch(this.program, this.publicKey);
        if (data)
            return data;
        throw new errors.AccountNotFoundError("Request", this.publicKey);
    }
    static async load(program, address) {
        const functionAccount = new FunctionRequestAccount(program, address);
        const state = await functionAccount.loadData();
        return [functionAccount, state];
    }
    static async createInstruction(program, payer, params, options) {
        // TODO: Calculate the max size of data we can support up front then split into multiple txns
        // TODO: Add way to make this a PDA
        const requestKeypair = params.keypair ?? Keypair.generate();
        await program.verifyNewKeypair(requestKeypair);
        const escrow = program.mint.getAssociatedAddress(requestKeypair.publicKey);
        const functionState = await params.functionAccount.loadData();
        const instruction = types.functionRequestInit(program, {
            params: {
                maxContainerParamsLen: null,
                containerParams: new Uint8Array(params.containerParams ?? Buffer.from("")),
                garbageCollectionSlot: params.garbageCollectionSlot
                    ? new BN(params.garbageCollectionSlot)
                    : null,
            },
        }, {
            request: requestKeypair.publicKey,
            function: params.functionAccount.publicKey,
            functionAuthority: functionState.authority,
            attestationQueue: functionState.attestationQueue,
            escrow,
            mint: program.mint.address,
            state: program.attestationProgramState.publicKey,
            payer,
            authority: params.authority ?? payer,
            systemProgram: SystemProgram.programId,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        });
        return [
            new FunctionRequestAccount(program, requestKeypair.publicKey),
            new TransactionObject(payer, [instruction], [requestKeypair], options),
        ];
    }
    static async create(program, params, options) {
        const [account, txnObject] = await this.createInstruction(program, program.walletPubkey, params, options);
        const txSignature = await program.signAndSend(txnObject, options);
        return [account, txSignature];
    }
    get tokenAccount() {
        return this.program.mint.getAssociatedAddress(this.publicKey);
    }
    async getBalance() {
        const balance = await this.program.mint.getAssociatedBalance(this.publicKey);
        if (balance === null) {
            throw new errors.AccountNotFoundError(`Function escrow`, this.tokenAccount);
        }
        return balance;
    }
    async getBalanceBN() {
        const balance = await this.getBalance();
        return this.program.mint.toTokenAmountBN(balance);
    }
    async setConfigInstruction(payer, params, options) {
        const requestState = await this.loadData();
        const setConfigIxn = types.functionRequestSetConfig(this.program, {
            params: {
                containerParams: new Uint8Array(params.containerParams),
                appendContainerParams: params.appendContainerParams ?? false,
            },
        }, {
            request: this.publicKey,
            authority: requestState.authority,
        });
        return new TransactionObject(payer, [setConfigIxn], params?.authority ? [params.authority] : [], options);
    }
    async setConfig(params, options) {
        return await this.setConfigInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    async fundInstruction(payer, params, options) {
        const wrapTxn = (await this.program.mint.getOrCreateWrappedUserInstructions(payer, {
            fundUpTo: params.transferAmount,
        }))[1];
        const funderAuthority = params.funderAuthority?.publicKey ?? payer;
        const source = params.funderTokenWallet ??
            this.program.mint.getAssociatedAddress(funderAuthority);
        const destination = this.tokenAccount;
        const transferAmount = this.program.mint.toTokenAmount(params.transferAmount);
        const signers = params.funderAuthority ? [params.funderAuthority] : [];
        const ixn = spl.createTransferInstruction(source, destination, funderAuthority, transferAmount, signers);
        const transferTxn = new TransactionObject(payer, [ixn], signers, options);
        return wrapTxn?.combine(transferTxn) ?? transferTxn;
    }
    async fund(params, options) {
        return await this.fundInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    async triggerInstruction(payer, params, options) {
        const requestState = await this.loadData();
        const functionAccount = new FunctionAccount(this.program, requestState.function);
        const functionState = await functionAccount.loadData();
        const setConfigIxn = types.functionRequestTrigger(this.program, {
            params: {
                bounty: params?.bounty
                    ? typeof params.bounty === "number"
                        ? new BN(params.bounty)
                        : params.bounty
                    : null,
                slotsUntilExpiration: params?.slotsUntilExpiration ?? null,
                validAfterSlot: params?.validAfterSlot ?? null,
            },
        }, {
            request: this.publicKey,
            authority: requestState.authority,
            escrow: requestState.escrow,
            function: requestState.function,
            state: this.program.attestationProgramState.publicKey,
            attestationQueue: functionState.attestationQueue,
            payer,
            tokenProgram: TOKEN_PROGRAM_ID,
            systemProgram: SystemProgram.programId,
        });
        return new TransactionObject(payer, [setConfigIxn], params?.authority ? [params.authority] : [], options);
    }
    async trigger(params, options) {
        return await this.triggerInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    verifyIxn(params) {
        const ixn = types.functionRequestVerify(this.program, {
            params: {
                observedTime: new BN(params.observedTime
                    ? params.observedTime
                    : Math.floor(Date.now() / 1000)),
                errorCode: params.isFailure ? 1 : 0,
                mrEnclave: Array.from(parseRawMrEnclave(params.mrEnclave)),
                requestSlot: typeof params.requestSlot === "number"
                    ? new BN(params.requestSlot)
                    : params.requestSlot,
                containerParamsHash: Array.from(parseRawBuffer(params.containerParamsHash)),
            },
        }, {
            request: this.publicKey,
            functionEnclaveSigner: params.functionEnclaveSigner,
            escrow: this.program.mint.getAssociatedAddress(this.publicKey),
            function: params.function,
            functionEscrow: params.functionEscrow,
            verifierQuote: params.verifierQuote,
            verifierEnclaveSigner: params.verifierEnclaveSigner,
            verifierPermission: params.verifierPermission,
            state: this.program.attestationProgramState.publicKey,
            attestationQueue: params.attestationQueue,
            receiver: params.receiver,
            tokenProgram: TOKEN_PROGRAM_ID,
        });
        return ixn;
    }
    /**
     * Poll a FunctionRequest Account and wait for the status to be set to 'RequestSuccess' or 'RequestFailure'
     * @param requestSlot
     * @param maxAttempts
     * @throws if the round is never closed before maxAttempts
     * @returns
     */
    async poll(requestSlot, maxAttempts = 60, commitment = "processed") {
        const slot = requestSlot ?? (await this.program.connection.getSlot());
        const isSettled = (state) => slot >= state.activeRequest.requestSlot.toNumber() &&
            state.activeRequest.fulfilledSlot.toNumber() > 0;
        let ws = undefined;
        let requestState = undefined;
        let shouldPoll = true;
        let attempts = 0;
        ws = this.program.provider.connection.onAccountChange(this.publicKey, (accountInfo) => {
            requestState = types.FunctionRequestAccountData.decode(accountInfo.data);
            if (isSettled(requestState)) {
                shouldPoll = false;
                if (ws !== undefined) {
                    this.program.provider.connection
                        .removeAccountChangeListener(ws)
                        .then(() => {
                        ws = undefined;
                    })
                        .catch();
                }
            }
        }, commitment);
        while (shouldPoll && attempts < maxAttempts) {
            await sleep(1000);
            attempts = attempts + 1;
        }
        if (ws !== undefined) {
            this.program.provider.connection
                .removeAccountChangeListener(ws)
                .then(() => {
                ws = undefined;
            })
                .catch();
        }
        if (requestState === undefined) {
            requestState = await this.loadData();
        }
        if (isSettled(requestState)) {
            return requestState.activeRequest;
        }
        throw new Error(`Function Request failed to verify in ${maxAttempts} attempts. Check the chain for more details.`);
    }
}
