"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceWorkerAccount = void 0;
const errors = __importStar(require("../errors.cjs"));
const types = __importStar(require("../generated/attestation-program/index.cjs"));
const TransactionObject_js_1 = require("../TransactionObject.cjs");
const account_js_1 = require("./account.cjs");
const index_js_1 = require("./index.cjs");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const web3_js_2 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common");
const toNumBytes = (mb) => {
    return new common_1.BN(Number.parseInt(mb.toString()) * 1024);
};
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.ServiceWorkerAccountData}
 */
class ServiceWorkerAccount extends account_js_1.Account {
    static accountName = "ServiceWorkerAccountData";
    /**
     *  Retrieve and decode the {@linkcode types.ServiceWorkerAccountData} stored in this account.
     */
    async loadData() {
        const data = await types.ServiceWorkerAccountData.fetch(this.program, this.publicKey);
        if (data)
            return data;
        throw new errors.AccountNotFoundError("Request", this.publicKey);
    }
    static async load(program, address) {
        const functionAccount = new ServiceWorkerAccount(program, address);
        const state = await functionAccount.loadData();
        return [functionAccount, state];
    }
    static async createInstruction(program, payer, params, wallet, options) {
        // TODO: Calculate the max size of data we can support up front then split into multiple txns
        const authorityPubkey = params.authority ?? payer;
        const workerKeypair = params.keypair ?? web3_js_2.Keypair.generate();
        await program.verifyNewKeypair(workerKeypair);
        let escrowWallet;
        let escrowWalletAuthority;
        if (wallet) {
            escrowWallet = wallet;
            escrowWalletAuthority = (await escrowWallet.loadData()).authority;
            if (!escrowWalletAuthority.equals(payer) &&
                !escrowWalletAuthority.equals(authorityPubkey)) {
                throw new errors.IncorrectAuthority(escrowWalletAuthority, authorityPubkey);
            }
        }
        else {
            escrowWallet = index_js_1.SwitchboardWallet.fromSeed(program, params.attestationQueue, authorityPubkey, workerKeypair.publicKey.toBytes());
            escrowWalletAuthority = authorityPubkey;
        }
        const instruction = types.serviceWorkerInit(program, {
            params: {
                region: params.region,
                zone: params.zone,
                permissionsRequired: params.permissionsRequired ?? false,
                availableEnclaveSize: toNumBytes(params.availableEnclaveSize ?? 10 * 1024),
                maxEnclaveSize: toNumBytes(params.availableEnclaveSize ?? 1024),
                maxCpu: new common_1.BN(Number.parseInt(params.maxCpu?.toString() ?? "100")),
                enclaveCost: program.mint.toTokenAmountBN(params.enclaveCost ?? 0),
                maxServicesLen: Math.min(1, Number.parseInt(params.maxServices?.toString() ?? "1")),
            },
        }, {
            serviceWorker: workerKeypair.publicKey,
            attestationQueue: params.attestationQueue,
            rewardEscrowWallet: escrowWallet.publicKey,
            rewardEscrowTokenWallet: escrowWallet.tokenWallet,
            rewardEscrowWalletAuthority: escrowWalletAuthority,
            mint: program.mint.address,
            authority: authorityPubkey,
            payer,
            systemProgram: web3_js_2.SystemProgram.programId,
            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
        });
        return [
            new ServiceWorkerAccount(program, workerKeypair.publicKey),
            new TransactionObject_js_1.TransactionObject(payer, [instruction], [workerKeypair], options),
        ];
    }
    static async create(program, params, wallet, options) {
        const [account, txnObject] = await this.createInstruction(program, program.walletPubkey, params, wallet, options);
        const txSignature = await program.signAndSend(txnObject, options);
        return [account, txSignature];
    }
    async setConfigInstruction(payer, params, options) {
        const serviceWorkerState = await this.loadData();
        const setConfigIxn = types.serviceWorkerSetConfig(this.program, {
            params: {
                region: params.region ?? null,
                zone: params.zone ?? null,
                permissionsRequired: params.permissionsRequired !== undefined
                    ? params.permissionsRequired
                    : null,
                lockPermissionsRequired: null,
                availableEnclaveSize: params.availableEnclaveSize
                    ? toNumBytes(params.availableEnclaveSize)
                    : null,
                maxEnclaveSize: params.maxEnclaveSize
                    ? toNumBytes(params.maxEnclaveSize)
                    : null,
                maxCpu: params.maxCpu
                    ? new common_1.BN(Number.parseInt(params.maxCpu.toString()))
                    : null,
                enclaveCost: params.enclaveCost
                    ? this.program.mint.toTokenAmountBN(params.enclaveCost)
                    : null,
            },
        }, {
            serviceWorker: this.publicKey,
            authority: serviceWorkerState.authority,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [setConfigIxn], params?.authority ? [params.authority] : [], options);
    }
    async setConfig(params, options) {
        return await this.setConfigInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    addServiceInstruction(payer, authority, servicePubkey, functionPubkey, options) {
        const authorityPubkey = authority instanceof web3_js_1.PublicKey ? authority : authority.publicKey;
        const addServiceIxn = types.serviceWorkerAddService(this.program, {
            params: {},
        }, {
            serviceWorker: this.publicKey,
            service: servicePubkey,
            function: functionPubkey,
            authority: authorityPubkey,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [addServiceIxn], authority instanceof web3_js_1.PublicKey ? [] : [authority], options);
    }
    async addService(authority, servicePubkey, functionPubkey, options) {
        const txn = this.addServiceInstruction(this.program.walletPubkey, authority, servicePubkey, functionPubkey, options);
        return await this.program.signAndSend(txn, options);
    }
    removeServiceInstruction(payer, authority, servicePubkey, functionPubkey, options) {
        const authorityPubkey = authority instanceof web3_js_1.PublicKey ? authority : authority.publicKey;
        const removeServiceIxn = types.serviceWorkerRemoveService(this.program, {
            params: {
                idx: null,
            },
        }, {
            serviceWorker: this.publicKey,
            service: servicePubkey,
            function: functionPubkey,
            authority: authorityPubkey,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [removeServiceIxn], authority instanceof web3_js_1.PublicKey ? [] : [authority], options);
    }
    async removeService(authority, servicePubkey, functionPubkey, options) {
        const txn = this.removeServiceInstruction(this.program.walletPubkey, authority, servicePubkey, functionPubkey, options);
        return await this.program.signAndSend(txn, options);
    }
}
exports.ServiceWorkerAccount = ServiceWorkerAccount;
