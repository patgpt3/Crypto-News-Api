"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationPermissionAccount = void 0;
const errors = __importStar(require("../errors.cjs"));
const types = __importStar(require("../generated/attestation-program/index.cjs"));
const TransactionObject_js_1 = require("../TransactionObject.cjs");
const account_js_1 = require("./account.cjs");
const web3_js_1 = require("@solana/web3.js");
/**
 *  Account type dictating the level of permissions between a granter and a grantee.
 *
 *  Data: {@linkcode types.AttestationPermissionAccountData}
 */
class AttestationPermissionAccount extends account_js_1.Account {
    static accountName = "AttestationPermissionAccountData";
    /**
     *  Load an existing PermissionAccount with its current on-chain state
     */
    static async load(program, authority, granter, grantee) {
        const account = AttestationPermissionAccount.fromSeed(program, typeof authority === "string" ? new web3_js_1.PublicKey(authority) : authority, typeof granter === "string" ? new web3_js_1.PublicKey(granter) : granter, typeof grantee === "string" ? new web3_js_1.PublicKey(grantee) : grantee);
        const state = await account.loadData();
        return [account, state];
    }
    /**
     *  Loads an AttestationPermissionAccount from the expected PDA seed format.
     *
     *  @param program The Switchboard program for the current connection.
     *  @param authority The authority pubkey to be incorporated into the account seed.
     *  @param granter The granter pubkey to be incorporated into the account seed.
     *  @param grantee The grantee pubkey to be incorporated into the account seed.
     *
     *  @return AttestationPermissionAccount and PDA bump.
     */
    static fromSeed(program, authority, granter, grantee) {
        const [publicKey, bump] = web3_js_1.PublicKey.findProgramAddressSync([
            Buffer.from("PermissionAccountData"),
            authority.toBytes(),
            granter.toBytes(),
            grantee.toBytes(),
        ], program.attestationProgramId);
        return new AttestationPermissionAccount(program, publicKey);
    }
    static createInstruction(program, payer, params, options) {
        const authority = params.authority ?? payer;
        const account = AttestationPermissionAccount.fromSeed(program, authority, params.granter, params.grantee);
        const instruction = types.attestationPermissionInit(program, { params: {} }, {
            permission: account.publicKey,
            attestationQueue: params.granter,
            node: params.grantee,
            authority,
            payer,
            systemProgram: web3_js_1.SystemProgram.programId,
        });
        return [account, new TransactionObject_js_1.TransactionObject(payer, [instruction], [], options)];
    }
    static async create(program, params, options) {
        const [account, txnObject] = this.createInstruction(program, program.walletPubkey, params, options);
        const txSignature = await program.signAndSend(txnObject, options);
        return [account, txSignature];
    }
    /**
     *  Retrieve and decode the {@linkcode types.AttestationPermissionAccountData} stored in this account.
     */
    async loadData() {
        const data = await types.AttestationPermissionAccountData.fetch(this.program, this.publicKey);
        if (data)
            return data;
        throw new errors.AccountNotFoundError("Permissions (Attestation)", this.publicKey);
    }
    /**
     *  Produces the instruction to set the permission in the AttestationPermissionAccount
     */
    setInstruction(payer, params, options) {
        // const data = await this.loadData();
        return new TransactionObject_js_1.TransactionObject(payer, [
            types.attestationPermissionSet(this.program, {
                params: {
                    permission: params.permission.discriminator,
                    enable: params.enable,
                },
            }, {
                permission: this.publicKey,
                authority: params.queueAuthority
                    ? params.queueAuthority.publicKey
                    : payer,
                attestationQueue: params.queue,
                grantee: params.enclave,
            }),
        ], params.queueAuthority ? [params.queueAuthority] : [], options);
    }
    /**
     *  Sets the permission in the AttestationPermissionAccount
     */
    async set(params, options) {
        const setTxn = await this.setInstruction(this.program.walletPubkey, params, options);
        const txnSignature = await this.program.signAndSend(setTxn, options);
        return txnSignature;
    }
}
exports.AttestationPermissionAccount = AttestationPermissionAccount;
