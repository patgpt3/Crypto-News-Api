import * as types from "../generated/attestation-program/index.js";
import type { SwitchboardProgram } from "../SwitchboardProgram.js";
import type { SendTransactionObjectOptions, TransactionObjectOptions } from "../TransactionObject.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import { SwitchboardWallet } from "./index.js";
import type { TransactionSignature } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
import { Keypair } from "@solana/web3.js";
/**
 *  Parameters for initializing a {@linkcode ServiceWorkerAccount}
 */
export interface ServiceWorkerAccountInitParams {
    attestationQueue: PublicKey;
    region: types.ServerRegionKind;
    zone: types.ServerZoneKind;
    permissionsRequired?: boolean;
    availableEnclaveSize?: number;
    maxEnclaveSize?: number;
    maxCpu?: number;
    enclaveCost?: number;
    maxServices?: number;
    /**
     *  A keypair to be used to address this account.
     *
     *  @default Keypair.generate()
     */
    keypair?: Keypair;
    authority?: PublicKey;
}
/**
 *  Parameters for setting a {@linkcode ServiceWorkerAccount} config
 */
export interface ServiceWorkerSetConfigParams {
    region?: types.ServerRegionKind;
    zone?: types.ServerZoneKind;
    permissionsRequired?: boolean;
    availableEnclaveSize?: number;
    maxEnclaveSize?: number;
    maxCpu?: number;
    enclaveCost?: number;
    authority?: Keypair;
}
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.ServiceWorkerAccountData}
 */
export declare class ServiceWorkerAccount extends Account<types.ServiceWorkerAccountData> {
    static accountName: string;
    /**
     *  Retrieve and decode the {@linkcode types.ServiceWorkerAccountData} stored in this account.
     */
    loadData(): Promise<types.ServiceWorkerAccountData>;
    static load(program: SwitchboardProgram, address: PublicKey | string): Promise<[ServiceWorkerAccount, types.ServiceWorkerAccountData]>;
    static createInstruction(program: SwitchboardProgram, payer: PublicKey, params: ServiceWorkerAccountInitParams, wallet?: SwitchboardWallet, options?: TransactionObjectOptions): Promise<[ServiceWorkerAccount, TransactionObject]>;
    static create(program: SwitchboardProgram, params: ServiceWorkerAccountInitParams, wallet?: SwitchboardWallet, options?: SendTransactionObjectOptions): Promise<[ServiceWorkerAccount, TransactionSignature]>;
    setConfigInstruction(payer: PublicKey, params: ServiceWorkerSetConfigParams, options?: TransactionObjectOptions): Promise<TransactionObject>;
    setConfig(params: ServiceWorkerSetConfigParams, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    addServiceInstruction(payer: PublicKey, authority: PublicKey | Keypair, servicePubkey: PublicKey, functionPubkey: PublicKey, options?: TransactionObjectOptions): TransactionObject;
    addService(authority: PublicKey | Keypair, servicePubkey: PublicKey, functionPubkey: PublicKey, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
    removeServiceInstruction(payer: PublicKey, authority: PublicKey | Keypair, servicePubkey: PublicKey, functionPubkey: PublicKey, options?: TransactionObjectOptions): TransactionObject;
    removeService(authority: PublicKey | Keypair, servicePubkey: PublicKey, functionPubkey: PublicKey, options?: SendTransactionObjectOptions): Promise<TransactionSignature>;
}
//# sourceMappingURL=serviceWorkerAccount.d.ts.map