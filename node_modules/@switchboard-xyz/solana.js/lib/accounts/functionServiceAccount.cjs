"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionServiceAccount = void 0;
const errors = __importStar(require("../errors.cjs"));
const types = __importStar(require("../generated/attestation-program/index.cjs"));
const mint_js_1 = require("../mint.cjs");
const TransactionObject_js_1 = require("../TransactionObject.cjs");
const account_js_1 = require("./account.cjs");
const switchboardWallet_js_1 = require("./switchboardWallet.cjs");
const anchor = __importStar(require("@coral-xyz/anchor"));
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const web3_js_2 = require("@solana/web3.js");
const common_1 = require("@switchboard-xyz/common");
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.FunctionServiceAccountData}
 */
class FunctionServiceAccount extends account_js_1.Account {
    static accountName = "FunctionServiceAccountData";
    switchboardWallet = undefined;
    /**
     *  Retrieve and decode the {@linkcode types.FunctionServiceAccountData} stored in this account.
     */
    async loadData() {
        const data = await types.FunctionServiceAccountData.fetch(this.program, this.publicKey);
        if (!data) {
            throw new errors.AccountNotFoundError("Routine", this.publicKey);
        }
        // cache this so we dont need to always re-fetch
        this.switchboardWallet = new switchboardWallet_js_1.SwitchboardWallet(this.program, data.escrowWallet);
        return data;
    }
    async getSwitchboardWallet() {
        if (this.switchboardWallet) {
            return this.switchboardWallet;
        }
        const data = await this.loadData();
        if (this.switchboardWallet) {
            return this.switchboardWallet;
        }
        return new switchboardWallet_js_1.SwitchboardWallet(this.program, data.escrowWallet);
    }
    static async load(program, address) {
        const functionAccount = new FunctionServiceAccount(program, address);
        const state = await functionAccount.loadData();
        return [functionAccount, state];
    }
    static async createInstruction(program, payer, params, wallet, options) {
        // TODO: Calculate the max size of data we can support up front then split into multiple txns
        const authorityPubkey = params.authority ?? payer;
        const serviceKeypair = params.keypair ?? web3_js_2.Keypair.generate();
        await program.verifyNewKeypair(serviceKeypair);
        // TODO: verify this math / units
        const enclaveSize = new common_1.BN(Number.parseInt(params.enclaveSize.toString()) * 1024);
        const cpu = new common_1.BN(Number.parseInt(params.cpu?.toString() ?? "1"));
        const functionState = await params.functionAccount.loadData();
        let escrowWallet;
        let escrowWalletAuthority;
        if (wallet) {
            escrowWallet = wallet;
            escrowWalletAuthority = (await escrowWallet.loadData()).authority;
            if (!escrowWalletAuthority.equals(payer) &&
                !escrowWalletAuthority.equals(authorityPubkey)) {
                throw new errors.IncorrectAuthority(escrowWalletAuthority, authorityPubkey);
            }
        }
        else {
            escrowWallet = switchboardWallet_js_1.SwitchboardWallet.fromSeed(program, functionState.attestationQueue, authorityPubkey, params.functionAccount.publicKey.toBytes());
            escrowWalletAuthority = authorityPubkey;
        }
        const instruction = types.functionServiceInit(program, {
            params: {
                // Metadata Config
                name: new Uint8Array(Buffer.from(params.name ?? "", "utf8")),
                metadata: new Uint8Array(Buffer.from(params.metadata ?? "", "utf8")),
                enclaveSize,
                cpu,
                maxContainerParamsLen: null,
                containerParams: new Uint8Array(params.containerParams ?? Buffer.from("")),
            },
        }, {
            service: serviceKeypair.publicKey,
            authority: authorityPubkey,
            function: params.functionAccount.publicKey,
            functionAuthority: functionState.authority,
            escrowWallet: escrowWallet.publicKey,
            escrowWalletAuthority: escrowWalletAuthority,
            escrowTokenWallet: anchor.utils.token.associatedAddress({
                mint: program.mint.address,
                owner: escrowWallet.publicKey,
            }),
            mint: program.mint.address,
            attestationQueue: functionState.attestationQueue,
            payer,
            systemProgram: web3_js_2.SystemProgram.programId,
            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
        });
        return [
            new FunctionServiceAccount(program, serviceKeypair.publicKey),
            new TransactionObject_js_1.TransactionObject(payer, [instruction], [serviceKeypair], options),
        ];
    }
    static async create(program, params, wallet, options) {
        const [account, txnObject] = await this.createInstruction(program, program.walletPubkey, params, wallet, options);
        const txSignature = await program.signAndSend(txnObject, options);
        return [account, txSignature];
    }
    async getBalance() {
        const switchboardWallet = await this.getSwitchboardWallet();
        return switchboardWallet.getBalance();
    }
    async getBalanceBN() {
        const switchboardWallet = await this.getSwitchboardWallet();
        return switchboardWallet.getBalanceBN();
    }
    async setConfigInstruction(payer, params, options) {
        const serviceState = await this.loadData();
        let name = null;
        if (params.name !== undefined) {
            name = new Uint8Array(Buffer.from(params.name ?? "", "utf8"));
        }
        let metadata = null;
        if (params.metadata !== undefined) {
            metadata = new Uint8Array(Buffer.from(params.metadata ?? "", "utf8"));
        }
        let enclaveSize = null;
        if (params.enclaveSize !== undefined) {
            enclaveSize = new common_1.BN(Number.parseInt(params.enclaveSize.toString()) * 1024);
        }
        let cpu = null;
        if (params.cpu !== undefined) {
            cpu = new common_1.BN(Number.parseInt(params.cpu.toString()));
        }
        let containerParams = null;
        if (params.containerParams !== undefined) {
            containerParams = new Uint8Array(Buffer.from(params.containerParams ?? "", "utf8"));
        }
        const setConfigIxn = types.functionServiceSetConfig(this.program, {
            params: {
                name,
                metadata,
                enclaveSize,
                cpu,
                containerParams,
            },
        }, {
            service: this.publicKey,
            function: serviceState.function,
            serviceWorker: web3_js_1.PublicKey.default.equals(serviceState.serviceWorker)
                ? this.program
                    .attestationProgramId /** Use programID for optional accounts */
                : serviceState.serviceWorker,
            authority: serviceState.authority,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [setConfigIxn], params?.authority ? [params.authority] : [], options);
    }
    async setConfig(params, options) {
        return await this.setConfigInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    async fundInstruction(payer, params, options) {
        const switchboardWallet = await this.getSwitchboardWallet();
        return await switchboardWallet.fundInstruction(payer, { ...params, resources: [this.publicKey] }, options);
    }
    async fund(params, options) {
        return await this.fundInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    async requestQuoteVerifyInstruction(payer, params, options) {
        const serviceState = await this.loadData();
        if (serviceState.authority.equals(web3_js_1.PublicKey.default)) {
            throw new Error(`Services needs to be added to a ServiceWorker before it can be verified`);
        }
        if (params.authority &&
            serviceState.authority.equals(params.authority.publicKey)) {
            throw new errors.IncorrectAuthority(serviceState.authority, params.authority.publicKey);
        }
        const ixn = types.functionServiceRequestQuoteVerify(this.program, {
            params: {
                quoteRegistry: params.quoteRegistry
                    ? Buffer.from(params.quoteRegistry)
                    : null,
                registryKey: Buffer.from(params.registryKey),
            },
        }, {
            service: this.publicKey,
            serviceWorker: serviceState.serviceWorker,
            function: serviceState.function,
            attestationQueue: serviceState.attestationQueue,
            escrowWallet: serviceState.escrowWallet,
            escrowTokenWallet: serviceState.escrowTokenWallet,
            newEnclaveSigner: params.enclaveSigner.publicKey,
            authority: serviceState.authority,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [ixn], params.authority
            ? [params.enclaveSigner, params.authority]
            : [params.enclaveSigner], options);
    }
    async requestQuoteVerify(params, options) {
        return await this.requestQuoteVerifyInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    verifyIxn(params) {
        const ixn = types.functionServiceVerify(this.program, {
            params: {
                observedTime: new common_1.BN(params.observedTime
                    ? params.observedTime
                    : Math.floor(Date.now() / 1000)),
                mrEnclave: Array.from((0, common_1.parseRawMrEnclave)(params.mrEnclave)),
            },
        }, {
            service: this.publicKey,
            functionEnclaveSigner: params.functionEnclaveSigner,
            escrowWallet: params.escrowWallet,
            escrowTokenWallet: anchor.utils.token.associatedAddress({
                mint: mint_js_1.NativeMint.address,
                owner: params.escrowWallet,
            }),
            function: params.function,
            functionEscrowTokenWallet: params.functionEscrow,
            verifierQuote: params.verifierQuote,
            verifierEnclaveSigner: params.verifierEnclaveSigner,
            verifierPermission: params.verifierPermission,
            attestationQueue: params.attestationQueue,
            receiver: params.receiver,
            tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
        });
        return ixn;
    }
    async addWorkerInstruction(payer, authority, serviceWorker, options) {
        const serviceState = await this.loadData();
        const authorityPubkey = authority instanceof web3_js_1.PublicKey ? authority : authority.publicKey;
        if (!authorityPubkey.equals(serviceState.authority)) {
            throw new errors.IncorrectAuthority(serviceState.authority, authorityPubkey);
        }
        const ixn = types.functionServiceAddWorker(this.program, { params: {} }, {
            service: this.publicKey,
            serviceWorker,
            function: serviceState.function,
            authority: authorityPubkey,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [ixn], authority instanceof web3_js_1.PublicKey ? [] : [authority], options);
    }
    async addWorker(authority, serviceWorker, options) {
        return await this.addWorkerInstruction(this.program.walletPubkey, authority, serviceWorker, options).then((txn) => this.program.signAndSend(txn, options));
    }
    async removeWorkerInstruction(payer, authority, serviceWorker, options) {
        const serviceState = await this.loadData();
        const authorityPubkey = authority instanceof web3_js_1.PublicKey ? authority : authority.publicKey;
        if (!authorityPubkey.equals(serviceState.authority)) {
            throw new errors.IncorrectAuthority(serviceState.authority, authorityPubkey);
        }
        const ixn = types.functionServiceRemoveWorker(this.program, { params: { idx: null } }, {
            service: this.publicKey,
            serviceWorker,
            function: serviceState.function,
            authority: authorityPubkey,
        });
        return new TransactionObject_js_1.TransactionObject(payer, [ixn], authority instanceof web3_js_1.PublicKey ? [] : [authority], options);
    }
    async removeWorker(authority, serviceWorker, options) {
        return await this.removeWorkerInstruction(this.program.walletPubkey, authority, serviceWorker, options).then((txn) => this.program.signAndSend(txn, options));
    }
}
exports.FunctionServiceAccount = FunctionServiceAccount;
