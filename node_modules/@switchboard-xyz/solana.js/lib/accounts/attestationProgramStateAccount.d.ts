import * as types from "../generated/attestation-program/index.js";
import type { SwitchboardProgram } from "../SwitchboardProgram.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import type { TransactionSignature } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
/**
 * Account type representing Switchboard global program state.
 *
 * Data: {@linkcode types.AttestationProgramState}
 */
export declare class AttestationProgramStateAccount extends Account<types.AttestationProgramState> {
    static accountName: string;
    static size: number;
    /**
     * Finds the {@linkcode AttestationProgramStateAccount} from the static seed from which it was generated.
     * @return AttestationProgramStateAccount and PDA bump tuple.
     */
    static fromSeed(program: SwitchboardProgram): [AttestationProgramStateAccount, number];
    /** Load the AttestationProgramStateAccount with its current on-chain state */
    static load(program: SwitchboardProgram, publicKey: PublicKey | string): Promise<[AttestationProgramStateAccount, types.AttestationProgramState]>;
    /**
     * Retrieve and decode the {@linkcode types.AttestationProgramState} stored in this account.
     */
    loadData(): Promise<types.AttestationProgramState>;
    /**
     * Retrieves the {@linkcode AttestationProgramStateAccount}, creates it if it doesn't exist;
     */
    static getOrCreate(program: SwitchboardProgram): Promise<[
        AttestationProgramStateAccount,
        number,
        TransactionSignature | undefined
    ]>;
    static getOrCreateInstructions(program: SwitchboardProgram, payer: PublicKey): Promise<[
        AttestationProgramStateAccount,
        number,
        TransactionObject | undefined
    ]>;
}
//# sourceMappingURL=attestationProgramStateAccount.d.ts.map