import * as errors from "../errors.js";
import * as types from "../generated/attestation-program/index.js";
import { TransactionObject } from "../TransactionObject.js";
import { Account } from "./account.js";
import { SwitchboardWallet } from "./index.js";
import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { Keypair, SystemProgram } from "@solana/web3.js";
import { BN } from "@switchboard-xyz/common";
const toNumBytes = (mb) => {
    return new BN(Number.parseInt(mb.toString()) * 1024);
};
/**
 * Account type representing a Switchboard Function.
 *
 * Data: {@linkcode types.ServiceWorkerAccountData}
 */
export class ServiceWorkerAccount extends Account {
    static accountName = "ServiceWorkerAccountData";
    /**
     *  Retrieve and decode the {@linkcode types.ServiceWorkerAccountData} stored in this account.
     */
    async loadData() {
        const data = await types.ServiceWorkerAccountData.fetch(this.program, this.publicKey);
        if (data)
            return data;
        throw new errors.AccountNotFoundError("Request", this.publicKey);
    }
    static async load(program, address) {
        const functionAccount = new ServiceWorkerAccount(program, address);
        const state = await functionAccount.loadData();
        return [functionAccount, state];
    }
    static async createInstruction(program, payer, params, wallet, options) {
        // TODO: Calculate the max size of data we can support up front then split into multiple txns
        const authorityPubkey = params.authority ?? payer;
        const workerKeypair = params.keypair ?? Keypair.generate();
        await program.verifyNewKeypair(workerKeypair);
        let escrowWallet;
        let escrowWalletAuthority;
        if (wallet) {
            escrowWallet = wallet;
            escrowWalletAuthority = (await escrowWallet.loadData()).authority;
            if (!escrowWalletAuthority.equals(payer) &&
                !escrowWalletAuthority.equals(authorityPubkey)) {
                throw new errors.IncorrectAuthority(escrowWalletAuthority, authorityPubkey);
            }
        }
        else {
            escrowWallet = SwitchboardWallet.fromSeed(program, params.attestationQueue, authorityPubkey, workerKeypair.publicKey.toBytes());
            escrowWalletAuthority = authorityPubkey;
        }
        const instruction = types.serviceWorkerInit(program, {
            params: {
                region: params.region,
                zone: params.zone,
                permissionsRequired: params.permissionsRequired ?? false,
                availableEnclaveSize: toNumBytes(params.availableEnclaveSize ?? 10 * 1024),
                maxEnclaveSize: toNumBytes(params.availableEnclaveSize ?? 1024),
                maxCpu: new BN(Number.parseInt(params.maxCpu?.toString() ?? "100")),
                enclaveCost: program.mint.toTokenAmountBN(params.enclaveCost ?? 0),
                maxServicesLen: Math.min(1, Number.parseInt(params.maxServices?.toString() ?? "1")),
            },
        }, {
            serviceWorker: workerKeypair.publicKey,
            attestationQueue: params.attestationQueue,
            rewardEscrowWallet: escrowWallet.publicKey,
            rewardEscrowTokenWallet: escrowWallet.tokenWallet,
            rewardEscrowWalletAuthority: escrowWalletAuthority,
            mint: program.mint.address,
            authority: authorityPubkey,
            payer,
            systemProgram: SystemProgram.programId,
            tokenProgram: TOKEN_PROGRAM_ID,
            associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
        });
        return [
            new ServiceWorkerAccount(program, workerKeypair.publicKey),
            new TransactionObject(payer, [instruction], [workerKeypair], options),
        ];
    }
    static async create(program, params, wallet, options) {
        const [account, txnObject] = await this.createInstruction(program, program.walletPubkey, params, wallet, options);
        const txSignature = await program.signAndSend(txnObject, options);
        return [account, txSignature];
    }
    async setConfigInstruction(payer, params, options) {
        const serviceWorkerState = await this.loadData();
        const setConfigIxn = types.serviceWorkerSetConfig(this.program, {
            params: {
                region: params.region ?? null,
                zone: params.zone ?? null,
                permissionsRequired: params.permissionsRequired !== undefined
                    ? params.permissionsRequired
                    : null,
                lockPermissionsRequired: null,
                availableEnclaveSize: params.availableEnclaveSize
                    ? toNumBytes(params.availableEnclaveSize)
                    : null,
                maxEnclaveSize: params.maxEnclaveSize
                    ? toNumBytes(params.maxEnclaveSize)
                    : null,
                maxCpu: params.maxCpu
                    ? new BN(Number.parseInt(params.maxCpu.toString()))
                    : null,
                enclaveCost: params.enclaveCost
                    ? this.program.mint.toTokenAmountBN(params.enclaveCost)
                    : null,
            },
        }, {
            serviceWorker: this.publicKey,
            authority: serviceWorkerState.authority,
        });
        return new TransactionObject(payer, [setConfigIxn], params?.authority ? [params.authority] : [], options);
    }
    async setConfig(params, options) {
        return await this.setConfigInstruction(this.program.walletPubkey, params, options).then((txn) => this.program.signAndSend(txn, options));
    }
    addServiceInstruction(payer, authority, servicePubkey, functionPubkey, options) {
        const authorityPubkey = authority instanceof PublicKey ? authority : authority.publicKey;
        const addServiceIxn = types.serviceWorkerAddService(this.program, {
            params: {},
        }, {
            serviceWorker: this.publicKey,
            service: servicePubkey,
            function: functionPubkey,
            authority: authorityPubkey,
        });
        return new TransactionObject(payer, [addServiceIxn], authority instanceof PublicKey ? [] : [authority], options);
    }
    async addService(authority, servicePubkey, functionPubkey, options) {
        const txn = this.addServiceInstruction(this.program.walletPubkey, authority, servicePubkey, functionPubkey, options);
        return await this.program.signAndSend(txn, options);
    }
    removeServiceInstruction(payer, authority, servicePubkey, functionPubkey, options) {
        const authorityPubkey = authority instanceof PublicKey ? authority : authority.publicKey;
        const removeServiceIxn = types.serviceWorkerRemoveService(this.program, {
            params: {
                idx: null,
            },
        }, {
            serviceWorker: this.publicKey,
            service: servicePubkey,
            function: functionPubkey,
            authority: authorityPubkey,
        });
        return new TransactionObject(payer, [removeServiceIxn], authority instanceof PublicKey ? [] : [authority], options);
    }
    async removeService(authority, servicePubkey, functionPubkey, options) {
        const txn = this.removeServiceInstruction(this.program.walletPubkey, authority, servicePubkey, functionPubkey, options);
        return await this.program.signAndSend(txn, options);
    }
}
