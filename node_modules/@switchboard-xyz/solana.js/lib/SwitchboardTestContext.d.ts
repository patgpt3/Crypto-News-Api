import type { AggregatorAccount, OracleAccount } from "./accounts/index.js";
import type { CreateQueueFeedParams, CreateQueueOracleParams } from "./accounts/index.js";
import { QueueAccount } from "./accounts/index.js";
import type { AggregatorAccountData } from "./generated/index.js";
import type { LoadedSwitchboardNetwork, NetworkInitParams } from "./SwitchboardNetwork.js";
import { SwitchboardProgram } from "./SwitchboardProgram.js";
import type { AnchorProvider } from "@coral-xyz/anchor";
import type { Connection, PublicKey } from "@solana/web3.js";
import { Keypair } from "@solana/web3.js";
export declare function findAnchorTomlWallet(workingDir?: string): string;
export type SwitchboardTestContextInit = Omit<Omit<NetworkInitParams, "authority">, "oracles"> & {
    oracle: Omit<CreateQueueOracleParams, "authority">;
};
export declare const DEFAULT_LOCALNET_NETWORK: SwitchboardTestContextInit;
export declare class SwitchboardTestContext {
    readonly network: LoadedSwitchboardNetwork;
    readonly walletPath: string;
    constructor(network: LoadedSwitchboardNetwork, walletPath: string);
    get queue(): QueueAccount;
    get program(): SwitchboardProgram;
    get oracle(): OracleAccount;
    static load(connection: Connection, networkInitParams?: Partial<SwitchboardTestContextInit>, walletPath?: string, programId?: PublicKey): Promise<SwitchboardTestContext>;
    static loadFromProvider(provider: AnchorProvider, networkInitParams?: Partial<SwitchboardTestContextInit>, programId?: PublicKey): Promise<SwitchboardTestContext>;
    static initFromProvider(provider: AnchorProvider, networkInitParams?: Partial<SwitchboardTestContextInit>, programId?: PublicKey): Promise<SwitchboardTestContext>;
    static init(connection: Connection, networkInitParams?: Partial<SwitchboardTestContextInit>, walletPath?: string, programId?: PublicKey): Promise<SwitchboardTestContext>;
    static findAnchorTomlWallet(workingDir?: string): string;
    /** Load a keypair from a file path. If one doesn't exist, it will be created */
    static loadKeypair(keypairPath: string): Keypair;
    /**
     * Create a feed and wait for it to resolve to a static value
     * @param params - the aggregator init params and the static value to resolve the feed to
     * @param timeout - the number of milliseconds to wait before timing out
     *
     * Basic usage example:
     *
     * ```ts
     * let switchboard: SwitchboardTestContext;
     *
     * const [staticFeedAccount] = await switchboard.createStaticFeed({
     *    value: 10,
     * })
     * const staticFeedValue: Big = await staticFeedAccount.fetchLatestValue();
     * assert(staticFeedValue.toNumber() === 10, "StaticFeedValueMismatch");
     * ```
     */
    createStaticFeed(params: Partial<CreateQueueFeedParams> & {
        value: number;
    }, timeout?: number): Promise<[AggregatorAccount, AggregatorAccountData]>;
    /**
     * Update an existing aggregator that resolves to a new static value, then await the new result
     * @param aggregatorAccount - the aggregator account to modify
     * @param value - the static value the feed will resolve to
     * @param timeout - the number of milliseconds to wait before timing out
     *
     * Basic usage example:
     *
     * ```ts
     * let switchboard: SwitchboardTestContext;
     * let staticFeedAccount: AggregatorAccount;
     *
     * [staticFeedAccount] = await switchboard.createStaticFeed({
     *    value: 10,
     * });
     * const staticFeedValue: Big = await staticFeedAccount.fetchLatestValue();
     * assert(staticFeedValue.toNumber() === 10, "StaticFeedValueMismatch");
     *
     * await switchboard.updateStaticFeed(
     *    staticFeedAccount,
     *    25
     * );
     * staticFeedValue = await staticFeedAccount.fetchLatestValue();
     * assert(staticFeedValue.toNumber() === 25, "StaticFeedValueMismatch");
     * ```
     */
    updateStaticFeed(aggregatorAccount: AggregatorAccount, value: number, timeout?: number): Promise<AggregatorAccountData>;
}
export { SwitchboardTestContext as SwitchboardTestContextV2 };
//# sourceMappingURL=SwitchboardTestContext.d.ts.map